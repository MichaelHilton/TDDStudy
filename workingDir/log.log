


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: FDDED9EBB8 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Widget.java
**************************************

public class Widget {
    
    public int answer(int n) {
        if(n % 2 == 0 ) {
            logger.log("returning 42");
            return -1;
        }
        return 5;
    }

    public Logger logger = ConsoleLogger.instance();
}

**************************************
WidgetTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WidgetTest {
    

    class MockLogger implements Logger {
        public void log(String diagnostic) {
            seen = diagnostic;
        }
        public String seen;
    }

    @Test
    public void hitch_hiker_logs_via_singleton() {
        Widget target = new Widget();
        int expected = 6 * 7;
        int actual = target.answer(1);
        assertEquals(expected, actual);
    }

    @Test
    public void logs_output_via_singleton() {
        Widget target = new Widget();
        
        MockLogger mock = new MockLogger();
        target.logger = mock;
        target.answer(2);
        assertEquals( mock.seen, "returning 42");
        assertEquals( target.answer(2), -1);


    }
}

**************************************
ConsoleLogger.java
**************************************

public class ConsoleLogger implements Logger{

    private ConsoleLogger() {
    }

    public static ConsoleLogger instance() {
        return singleton;
    }

    public void log(String diagnostic) {
        System.out.println("Writing to File: " + diagnostic);
    }

    private static ConsoleLogger singleton = new ConsoleLogger();
}

**************************************
Logger.java
**************************************
public interface Logger
{
    
    void log(String output);
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Widget.java
**************************************

public class Widget {
    
    public int answer(int n) {
        if(n % 2 == 0 ) {
            logger.log("returning 42");
            return -1;
        }
        return 5;
    }

    public Logger logger = ConsoleLogger.instance();
}

**************************************
WidgetTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WidgetTest {
    

    class MockLogger implements Logger {
        public void log(String diagnostic) {
            seen = diagnostic;
        }
        public String seen;
    }


    @Test
    public void logs_output_via_singleton() {
        Widget target = new Widget();
        
        MockLogger mock = new MockLogger();
        target.logger = mock;
        target.answer(2);
        assertEquals( mock.seen, "returning 42");
        assertEquals( target.answer(2), -1);


    }
}

**************************************
ConsoleLogger.java
**************************************

public class ConsoleLogger implements Logger{

    private ConsoleLogger() {
    }

    public static ConsoleLogger instance() {
        return singleton;
    }

    public void log(String diagnostic) {
        System.out.println("Writing to File: " + diagnostic);
    }

    private static ConsoleLogger singleton = new ConsoleLogger();
}

**************************************
Logger.java
**************************************
public interface Logger
{
    
    void log(String output);
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F47898C610 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RUList.java
**************************************

public class RUList{
    
    public static int answer() {
        return 42;
    }
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RecentlyUsedListTest{
    
// create list
// add elt
// add elt at the begining of the list
// retreiving via index
// item unicity

    @Test
    public void create_list() {
       RUList list = new RUList();
        assertNotNull(list);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F4458DC8E8 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Hangman.java
**************************************

public class Hangman{
    
    public static int answer() {
        return 42;
    }
}

**************************************
HangmanTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HangmanTest {
    
    @Test
    public void prototype() {
        new Hangman();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F2219C917B koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door{
    
    public Door(){
    }

    public boolean openState(){
        return false;
    }
}

**************************************
TestAnswer.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestAnswer {
    
    @Test
    public void DoorShouldBeClosedInitially() {
        Door door = new Door();
        assertTrue(!door.openState());
    }

    @Test
    public void DoorShouldBeOpenAfter1stToggle() {
        Door door = new Door();
        door.toggle();
        assertTrue(door.openState());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door{
    
    public Door(){
    }

    public boolean openState(){
        return false;
    }
}

**************************************
TestAnswer.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestAnswer {
    
    @Test
    public void DoorShouldBeClosedInitially() {
        Door door = new Door();
        assertTrue(!door.openState());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F1FC12E5DA elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {

    private static StringBuilder sb;    
    private static int original;    
    private static boolean printNumber;

    private static void printFizz() {
        if (original%3==0) 
        {
            sb.append("Fizz");
            printNumber = false;
        }
    }

    private static void printBuzz() {
        if (original%5==0) 
        {
            sb.append("Buzz");
            printNumber = false;
        }
    }

    public static String convert(int input) {
        sb = new StringBuilder();
        original = input;
        printNumber = true;
    
        if (original!=0) {
            printFizz();
            printBuzz();
        }

        if (printNumber == true) sb.append(original);

        return sb.toString();
    }
}

**************************************
TestFizzBuzz.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestFizzBuzz {
    
    @Test
    public void FizzBuzz() {
        int expected = 0;
        assertEquals("0", FizzBuzz.convert(0));
        assertEquals("1", FizzBuzz.convert(1));
        assertEquals("2", FizzBuzz.convert(2));
        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("4", FizzBuzz.convert(4));
        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("7", FizzBuzz.convert(7));
        assertEquals("8", FizzBuzz.convert(8));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("FizzBuzz", FizzBuzz.convert(15));      

        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("Fizz", FizzBuzz.convert(15));
        assertEquals("Fizz", FizzBuzz.convert(18));
        assertEquals("Fizz", FizzBuzz.convert(21));
        assertEquals("Fizz", FizzBuzz.convert(24));
        assertEquals("Fizz", FizzBuzz.convert(27));
        assertEquals("Fizz", FizzBuzz.convert(30));

        assertEquals("Fizz", FizzBuzz.convert(5));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(10));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {

    private static StringBuilder sb;    
    private static int original;    
    private static boolean printNumber;

    private static void printFizz() {
        if (original%3==0) 
        {
            sb.append("Fizz");
            printNumber = false;
        }
    }

    private static void printBuzz() {
        if (original%5==0) 
        {
            sb.append("Buzz");
            printNumber = false;
        }
    }

    public static String convert(int input) {
        sb = new StringBuilder();
        original = input;
        printNumber = true;
    
        if (original!=0) {
            printFizz();
            printBuzz();
        }

        if (printNumber == true) sb.append(original);

        return sb.toString();
    }
}

**************************************
TestFizzBuzz.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestFizzBuzz {
    
    @Test
    public void FizzBuzz() {
        int expected = 0;
        assertEquals("0", FizzBuzz.convert(0));
        assertEquals("1", FizzBuzz.convert(1));
        assertEquals("2", FizzBuzz.convert(2));
        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("4", FizzBuzz.convert(4));
        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("7", FizzBuzz.convert(7));
        assertEquals("8", FizzBuzz.convert(8));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("FizzBuzz", FizzBuzz.convert(15));      

        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("Fizz", FizzBuzz.convert(18));
        assertEquals("Fizz", FizzBuzz.convert(21));
        assertEquals("Fizz", FizzBuzz.convert(24));
        assertEquals("Fizz", FizzBuzz.convert(27));

        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(10));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F1FC12E5DA elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {

    private static StringBuilder sb;    
    private static int original;    
    private static boolean printNumber;

    private static void printFizz() {
        if (original%3==0) 
        {
            sb.append("Fizz");
            printNumber = false;
        }
    }

    private static void printBuzz() {
        if (original%5==0) 
        {
            sb.append("Buzz");
            printNumber = false;
        }
    }

    public static String convert(int input) {
        sb = new StringBuilder();
        original = input;
        printNumber = true;
    
        if (original!=0) {
            printFizz();
            printBuzz();
        }

        if (printNumber == true) sb.append(original);

        return sb.toString();
    }
}

**************************************
TestFizzBuzz.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestFizzBuzz {
    
    @Test
    public void FizzBuzz() {
        int expected = 0;
        assertEquals("0", FizzBuzz.convert(0));
        assertEquals("1", FizzBuzz.convert(1));
        assertEquals("2", FizzBuzz.convert(2));
        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("4", FizzBuzz.convert(4));
        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("7", FizzBuzz.convert(7));
        assertEquals("8", FizzBuzz.convert(8));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("FizzBuzz", FizzBuzz.convert(15));      

        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("Fizz", FizzBuzz.convert(18));
        assertEquals("Fizz", FizzBuzz.convert(21));
        assertEquals("Fizz", FizzBuzz.convert(24));
        assertEquals("Fizz", FizzBuzz.convert(27));

        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(20));
        assertEquals("Buzz", FizzBuzz.convert(25));
        assertEquals("Buzz", FizzBuzz.convert(35));
        assertEquals("Buzz", FizzBuzz.convert(40));
        assertEquals("Buzz", FizzBuzz.convert(50));
        assertEquals("Buzz", FizzBuzz.convert(55));
        assertEquals("Buzz", FizzBuzz.convert(65));
        assertEquals("Buzz", FizzBuzz.convert(70));
        assertEquals("Buzz", FizzBuzz.convert(75));
        assertEquals("Buzz", FizzBuzz.convert(80));
        assertEquals("Buzz", FizzBuzz.convert(85));
        assertEquals("Buzz", FizzBuzz.convert(95));

        assertEquals("FizzBuzz", FizzBuzz.convert(15));
        assertEquals("FizzBuzz", FizzBuzz.convert(30));
        assertEquals("FizzBuzz", FizzBuzz.convert(45));
        assertEquals("FizzBuzz", FizzBuzz.convert(60));
        assertEquals("FizzBuzz", FizzBuzz.convert(75));
        assertEquals("FizzBuzz", FizzBuzz.convert(90));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {

    private static StringBuilder sb;    
    private static int original;    
    private static boolean printNumber;

    private static void printFizz() {
        if (original%3==0) 
        {
            sb.append("Fizz");
            printNumber = false;
        }
    }

    private static void printBuzz() {
        if (original%5==0) 
        {
            sb.append("Buzz");
            printNumber = false;
        }
    }

    public static String convert(int input) {
        sb = new StringBuilder();
        original = input;
        printNumber = true;
    
        if (original!=0) {
            printFizz();
            printBuzz();
        }

        if (printNumber == true) sb.append(original);

        return sb.toString();
    }
}

**************************************
TestFizzBuzz.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestFizzBuzz {
    
    @Test
    public void FizzBuzz() {
        int expected = 0;
        assertEquals("0", FizzBuzz.convert(0));
        assertEquals("1", FizzBuzz.convert(1));
        assertEquals("2", FizzBuzz.convert(2));
        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("4", FizzBuzz.convert(4));
        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("7", FizzBuzz.convert(7));
        assertEquals("8", FizzBuzz.convert(8));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("FizzBuzz", FizzBuzz.convert(15));      

        assertEquals("Fizz", FizzBuzz.convert(3));
        assertEquals("Fizz", FizzBuzz.convert(6));
        assertEquals("Fizz", FizzBuzz.convert(9));
        assertEquals("Fizz", FizzBuzz.convert(12));
        assertEquals("Fizz", FizzBuzz.convert(18));
        assertEquals("Fizz", FizzBuzz.convert(21));
        assertEquals("Fizz", FizzBuzz.convert(24));
        assertEquals("Fizz", FizzBuzz.convert(27));

        assertEquals("Buzz", FizzBuzz.convert(5));
        assertEquals("Buzz", FizzBuzz.convert(10));
        assertEquals("Buzz", FizzBuzz.convert(20));
        assertEquals("Buzz", FizzBuzz.convert(25));
        assertEquals("Buzz", FizzBuzz.convert(35));
        assertEquals("Buzz", FizzBuzz.convert(40));
        assertEquals("Buzz", FizzBuzz.convert(50));
        assertEquals("Buzz", FizzBuzz.convert(55));
        assertEquals("Buzz", FizzBuzz.convert(65));
        assertEquals("Buzz", FizzBuzz.convert(70));
        assertEquals("Buzz", FizzBuzz.convert(80));
        assertEquals("Buzz", FizzBuzz.convert(85));
        assertEquals("Buzz", FizzBuzz.convert(95));

        assertEquals("FizzBuzz", FizzBuzz.convert(15));
        assertEquals("FizzBuzz", FizzBuzz.convert(30));
        assertEquals("FizzBuzz", FizzBuzz.convert(45));
        assertEquals("FizzBuzz", FizzBuzz.convert(60));
        assertEquals("FizzBuzz", FizzBuzz.convert(75));
        assertEquals("FizzBuzz", FizzBuzz.convert(90));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: F073DE0232 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Sequence.java
**************************************
import java.util.List;
import java.util.Collections;
public class Sequence{
    
    public static int getMaximunValue(final List<Integer> list) {
        return Collections.max(list);
    }
     public static int getMinimunValue(final List<Integer> list) {
        return Collections.min(list);
    }
    public static double getAverageValue(final List<Integer> list){
        if (list.size() != 0){
            double sum = 0; 
            for (Integer value : list){
            sum += value;
            }
            return sum / list.size();
        }else {
            return 0;
    }
    }
}

**************************************
SequenceTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;
import java.util.NoSuchElementException;

public class SequenceTest{
    
    @Test
    public void test_minimun_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(-1);
        list.add(0);
        list.add(1);
        assertEquals(-1, Sequence.getMinimunValue(list));
    }
    @Test(expected=NoSuchElementException.class)
    public void test_minimun_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
        Sequence.getMinimunValue(list);
    }
    @Test(expected=NullPointerException.class)
    public void test_minimun_value_null_list() {
       Sequence.getMinimunValue(null);
    }
    @Test
    public void test_maximun_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(-1);
        list.add(0);
        list.add(1);
        assertEquals(1, Sequence.getMaximunValue(list));
    }
    @Test(expected=NoSuchElementException.class)
    public void test_maximun_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
        Sequence.getMaximunValue(list);
    }
    @Test(expected=NullPointerException.class)
    public void test_maximun_value_null_list() {
       Sequence.getMaximunValue(null);
    }
    @Test
    public void test_average_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(6);
        list.add(9);
        list.add(15);
        list.add(-2);
        list.add(92);
        list.add(11);
        assertEquals(21.833333, Sequence.getAverageValue(list),6);
    }
    @Test
    public void test_average_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
           assertEquals(0, Sequence.getAverageValue(list),6);
    }
    @Test
    public void test_average_value_null_list() {
        
           assertEquals(0, Sequence.getAverageValue(null));
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Sequence.java
**************************************
import java.util.List;
import java.util.Collections;
public class Sequence{
    
    public static int getMaximunValue(final List<Integer> list) {
        return Collections.max(list);
    }
     public static int getMinimunValue(final List<Integer> list) {
        return Collections.min(list);
    }
    public static double getAverageValue(final List<Integer> list){
        if (list.size() != 0){
            double sum = 0; 
            for (Integer value : list){
            sum += value;
            }
            return sum / list.size();
        }else {
            return 0;
    }
    }
}

**************************************
SequenceTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;
import java.util.NoSuchElementException;

public class SequenceTest{
    
    @Test
    public void test_minimun_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(-1);
        list.add(0);
        list.add(1);
        assertEquals(-1, Sequence.getMinimunValue(list));
    }
    @Test(expected=NoSuchElementException.class)
    public void test_minimun_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
        Sequence.getMinimunValue(list);
    }
    @Test(expected=NullPointerException.class)
    public void test_minimun_value_null_list() {
       Sequence.getMinimunValue(null);
    }
    @Test
    public void test_maximun_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(-1);
        list.add(0);
        list.add(1);
        assertEquals(1, Sequence.getMaximunValue(list));
    }
    @Test(expected=NoSuchElementException.class)
    public void test_maximun_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
        Sequence.getMaximunValue(list);
    }
    @Test(expected=NullPointerException.class)
    public void test_maximun_value_null_list() {
       Sequence.getMaximunValue(null);
    }
    @Test
    public void test_average_value() {
        final List<Integer> list = new ArrayList<Integer>();
        list.add(6);
        list.add(9);
        list.add(15);
        list.add(-2);
        list.add(92);
        list.add(11);
        assertEquals(21.833333, Sequence.getAverageValue(list),6);
    }
    @Test
    public void test_average_value_empty_list() {
        final List<Integer> list = new ArrayList<Integer>();
           assertEquals(0, Sequence.getAverageValue(list),6);
    }
    @Test(expected=NullPointerException.class)
    public void test_average_value_null_list() {
        
          Sequence.getAverageValue(null);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: EFD0018044 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LCD.java
**************************************
import java.util.*;

public class LCD {
    
    private List<String> displayData = null;

    public LCD(){
        displayData = new ArrayList<String>(3);
        displayData.add("");
        displayData.add("");
        displayData.add("");
    }


    public void addDigit(int digit){
        if(digit == 0){
        displayData.set(0, displayData.get(0) + "._.");
        displayData.set(1, displayData.get(1) + "|.|");
        displayData.set(2, displayData.get(2) + "|_|");
        }
        if(digit == 1){
        displayData.set(0, displayData.get(0) + "...");
        displayData.set(1, displayData.get(1) + "..|");
        displayData.set(2, displayData.get(2) + "..|");
        }
    }

    public List<String> display(){
        return displayData;
    }
}

**************************************
WalkingSkeletonTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WalkingSkeletonTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    @Test
    public void iShoudSee777() {
        //assertEquals("._.._.._.", lcd.show(777).get(0));
        //assertEquals("..|..|..|", lcd.show(777).get(1));
        //assertEquals("..|..|..|", lcd.show(777).get(2));
    }

    //@Test
    public void iShoudSee177() {
        assertEquals("...._.._.", lcd.show(177).get(0));
        assertEquals("..|..|..|", lcd.show(177).get(1));
        assertEquals("..|..|..|", lcd.show(177).get(2));
    }
}

**************************************
SingleDigitsUnitTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class SingleDigitsUnitTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    
    @Test
    public void iCanAddZeroToDispalay() {
        lcd.addDigit(0);
        assertEquals("._.", lcd.display().get(0));
        assertEquals("|.|", lcd.display().get(1));
        assertEquals("|_|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneToDispalay() {
        lcd.addDigit(1);
        assertEquals("...", lcd.display().get(0));
        assertEquals("..|", lcd.display().get(1));
        assertEquals("..|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneAndOneToDispalay() {
        lcd.addDigit(1);
        lcd.addDigit(1);
        assertEquals("......", lcd.display().get(0));
        assertEquals("..|..|", lcd.display().get(1));
        assertEquals("..|..|", lcd.display().get(2));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LCD.java
**************************************
import java.util.*;

public class LCD {
    
    private List<String> displayData = null;

    public LCD(){
        displayData = new ArrayList<String>(3);
        displayData.add("");
        displayData.add("");
        displayData.add("");
    }


    public void addDigit(int digit){
        if(digit == 0){
        displayData.set(0, displayData.get(0) + "._.");
        displayData.set(1, displayData.get(1) + "|.|");
        displayData.set(2, displayData.get(2) + "|_|");
        }
        if(digit == 1){
        displayData.set(0, displayData.get(0) + "...");
        displayData.set(1, displayData.get(1) + "..|");
        displayData.set(2, displayData.get(2) + "..|");
        }
    }

    public List<String> display(){
        return displayData;
    }
}

**************************************
WalkingSkeletonTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WalkingSkeletonTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    @Test
    public void iShoudSee777() {
        //assertEquals("._.._.._.", lcd.show(777).get(0));
        //assertEquals("..|..|..|", lcd.show(777).get(1));
        //assertEquals("..|..|..|", lcd.show(777).get(2));
    }

    @Test
    public void iShoudSee177() {
        //assertEquals("...._.._.", lcd.show(177).get(0));
        //assertEquals("..|..|..|", lcd.show(177).get(1));
        //assertEquals("..|..|..|", lcd.show(177).get(2));
    }
}

**************************************
SingleDigitsUnitTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class SingleDigitsUnitTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    
    @Test
    public void iCanAddZeroToDispalay() {
        lcd.addDigit(0);
        assertEquals("._.", lcd.display().get(0));
        assertEquals("|.|", lcd.display().get(1));
        assertEquals("|_|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneToDispalay() {
        lcd.addDigit(1);
        assertEquals("...", lcd.display().get(0));
        assertEquals("..|", lcd.display().get(1));
        assertEquals("..|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneAndOneToDispalay() {
        lcd.addDigit(1);
        lcd.addDigit(1);
        assertEquals("......", lcd.display().get(0));
        assertEquals("..|..|", lcd.display().get(1));
        assertEquals("..|..|", lcd.display().get(2));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: EDF0FF8E7E raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
    public static String answer(int number) {
        if (number == 3)
          return "Fizz";

        if (number == 5) return "Buzz";

        return new Integer(number).toString();
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void shouldBe1For1() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBe2For2() {
        String expected = "2";
        String actual = FizzBuzz.answer(2);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeFizzFor3() {
        String expected = "Fizz";
        String actual = FizzBuzz.answer(3);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeBuzzFor5() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeFizzFor6() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeBuzzFor5() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
    public static String answer(int number) {
        if (number == 3)
          return "Fizz";

        if (number == 5) return "Buzz";

        return new Integer(number).toString();
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void shouldBe1For1() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBe2For2() {
        String expected = "2";
        String actual = FizzBuzz.answer(2);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeFizzFor3() {
        String expected = "Fizz";
        String actual = FizzBuzz.answer(3);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeBuzzFor5() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }

    @Test
    public void shouldBeFizzFor6() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: EDB0983BA7 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************

public class PrimeFactor{
    
    public static int[] compute(int i) {
        int[] Result = new int[1];
        if (i == 3) Result = {3};
        //if (i == 4) return {2,2};
        return Result;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void should_return_2() {
        assertEquals(2,PrimeFactor.compute(2));
    }
    @Test
    public void should_return_3() {
        assertEquals(3,PrimeFactor.compute(3));
    }
    @Test
    public void should_return_[2,2]() {
        assertEquals([2,2],PrimeFactor.compute(4));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************
public class PrimeFactor{
    
    public static int compute(int i) {
        if (i == 3) return 3;
        return 2;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void should_return_2() {
        assertEquals(2,PrimeFactor.compute(2));
    }
    @Test
    public void should_return_3() {
        assertEquals(3,PrimeFactor.compute(3));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ED9C74660B raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Game.java
**************************************
public class Game {

public int score() {
    return 0;
}

}

**************************************
GameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GameTest {
    
    @Test
    public void scoreIsZero() {
        int expected = 0;
        int actual = new Game().score();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************
public class Game {

public int score() {
    return 0;
}

}

**************************************
GameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GameTest {
    
    @Test
    public void scoreIsZero() {
        int expected = 0;
        int actual = new Game().score();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ED13E0B345 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String answer(int number) {
        
        if(number==1){
    
        return "1";

        }
        
         if(number==2){
    
        return "2";

        }
        
         if(number==3){
    
        return "Fizz";

        }

       
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void test1() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }
    @Test
    public void test2() {
        String expected = "2";
        String actual = FizzBuzz.answer(2);
        assertEquals(expected, actual);
    }
    @Test
    public void test3() {
        String expected = "Fizz";
        String actual = FizzBuzz.answer(3);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String answer(int number) {
        return "1";
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void hitch_hiker() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ED03DA9DDD buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
UnicodeFileToHtmlTextConverter.java
**************************************
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class UnicodeFileToHtmlTextConverter
{
    private String fullFilenameWithPath;

    public UnicodeFileToHtmlTextConverter(String fullFilenameWithPath)
    {
        this.fullFilenameWithPath = fullFilenameWithPath;
    }

    public String convertToHtml() throws IOException{
    
	    BufferedReader reader = new BufferedReader(new FileReader(fullFilenameWithPath));
	    
	    String line = reader.readLine();
	    String html = "";
	    while (line != null)
	    {
                html += HttpUtility.htmlEncode(line);	            
                html += "<br />";
	        line = reader.readLine();
	    }
	    return html;

    }
}

**************************************
HttpUtility.java
**************************************
class HttpUtility {
    public static String htmlEncode(String text) {
        text = text.replace("<", "&gt");
        text = text.replace(">", "&lt");
        text = text.replace("\"", "&quot");
        
        return text;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
UnicodeConverterTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UnicodeConverterTest {
    
    @Test
    public void hitch_hiker() {
        
    }
}

**************************************
UnicodeFileToHtmlTextConverter.java
**************************************
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class UnicodeFileToHtmlTextConverter
{
    private String fullFilenameWithPath;

    public UnicodeFileToHtmlTextConverter(String fullFilenameWithPath)
    {
        this.fullFilenameWithPath = fullFilenameWithPath;
    }

    public String convertToHtml() throws IOException{
    
	    BufferedReader reader = new BufferedReader(new FileReader(fullFilenameWithPath));
	    
	    String line = reader.readLine();
	    String html = "";
	    while (line != null)
	    {
                html += HttpUtility.htmlEncode(line);	            
                html += "<br />";
	        line = reader.readLine();
	    }
	    return html;

    }
}

**************************************
HttpUtility.java
**************************************
class HttpUtility {
    public static String htmlEncode(String text) {
        text = text.replace("<", "&gt");
        text = text.replace(">", "&lt");
        text = text.replace("\"", "&quot");
        
        return text;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ECA5CFEF19 deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GreatesDivider.java
**************************************

public class GreatesDivider{
    
    public static int gd(int num,int div) {
        if (num % div == 0) {
            return div;
        }else if (div > 2) {
            return gd(num,div-1);
        } else {
            return 1;
        }
    }
}

**************************************
GreatesDividerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GreatesDividerTest {
    
    @Test
    public void dividerTest() {
        assertEquals(1, GreatesDivider.gd(2,2/2));
        assertEquals(2, GreatesDivider.gd(4,4/2));
        assertEquals(5, GreatesDivider.gd(15,15/2));
        assertEquals(1, GreatesDivider.gd(11,11/2));
        assertEquals(1, GreatesDivider.gd(13,13/2));
        assertEquals(1, GreatesDivider.gd(17,17/2));
    }
}

**************************************
FactorialTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FactorialTest {
    
//    @Test
    public void factorialOfPrimeTest() {
        assertArrayEquals(new int[]{2},Factorial.fac(2));
        assertArrayEquals(new int[]{3},Factorial.fac(3));
        assertArrayEquals(new int[]{5},Factorial.fac(5));
        assertArrayEquals(new int[]{7},Factorial.fac(7));
        assertArrayEquals(new int[]{11},Factorial.fac(11));
        assertArrayEquals(new int[]{13},Factorial.fac(13));
        assertArrayEquals(new int[]{17},Factorial.fac(17));
    }

/*
	 2 -> [2]
	 3 -> [3]
	 4 -> [2,2]
	 6 -> [2,3]
	 9 -> [3,3]
	12 -> [2,2,3]
	15 -> [3,5]

    @Test
    public void factorialOfNonPrimeTest() {
        assertArrayEquals(new int[]{2},Factorial.fac(4));
        assertArrayEquals(new int[]{2},Factorial.fac(6));
        assertArrayEquals(new int[]{2},Factorial.fac(9));
        assertArrayEquals(new int[]{2},Factorial.fac(12));
        assertArrayEquals(new int[]{2},Factorial.fac(15));
    }
*/
}

**************************************
Factorial.java
**************************************
public class Factorial{
    public static int[] fac (int fac) {
        int div = GreatesDivider.gd(fac,fac/2);
        if (div < 0) {
            return new int[]{fac};
        }
        return new int[0];
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GreatesDivider.java
**************************************

public class GreatesDivider{
    
    public static int gd(int num,int div) {
        if (num % div == 0) {
            return div;
        }else if (div > 2) {
            return gd(num,div-1);
        } else {
            return 1;
        }
    }
}

**************************************
GreatesDividerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GreatesDividerTest {
    
    @Test
    public void dividerTest() {
        assertEquals(1, GreatesDivider.gd(2,2/2));
        assertEquals(2, GreatesDivider.gd(4,4/2));
        assertEquals(5, GreatesDivider.gd(15,15/2));
        assertEquals(1, GreatesDivider.gd(11,11/2));
        assertEquals(1, GreatesDivider.gd(13,13/2));
        assertEquals(1, GreatesDivider.gd(17,17/2));
    }
}

**************************************
FactorialTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FactorialTest {
    
    @Test
    public void factorialOfPrimeTest() {
/*        assertArrayEquals(new int[]{2},Factorial.fac(2));
        assertArrayEquals(new int[]{3},Factorial.fac(3));
        assertArrayEquals(new int[]{5},Factorial.fac(5));
        assertArrayEquals(new int[]{7},Factorial.fac(7));
        assertArrayEquals(new int[]{11},Factorial.fac(11));
        assertArrayEquals(new int[]{13},Factorial.fac(13));
        assertArrayEquals(new int[]{17},Factorial.fac(17));
*/
    }

/*
	 2 -> [2]
	 3 -> [3]
	 4 -> [2,2]
	 6 -> [2,3]
	 9 -> [3,3]
	12 -> [2,2,3]
	15 -> [3,5]

    @Test
    public void factorialOfNonPrimeTest() {
        assertArrayEquals(new int[]{2},Factorial.fac(4));
        assertArrayEquals(new int[]{2},Factorial.fac(6));
        assertArrayEquals(new int[]{2},Factorial.fac(9));
        assertArrayEquals(new int[]{2},Factorial.fac(12));
        assertArrayEquals(new int[]{2},Factorial.fac(15));
    }
*/
}

**************************************
Factorial.java
**************************************
public class Factorial{
    public static int[] fac (int fac) {
        int div = GreatesDivider.gd(fac,fac/2);
        if (div < 0) {
            return new int[]{fac};
        }
        return new int[0];
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: EB472BA1C2 deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 31
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled
 {
    
    public static String answer(int i)
     {
        for (i=1;i<=100;i++)
          {
            if(i%3 ==0)
                 {
                System.out.println("Fizz");
                return "Fizz" ;
                  }
            
            else if (i % 5 == 0)
                 
                {
                System.out.println("Buzz");
                return "Buzz" ;
                }
           
            else  if (i % 3 ==0 && i % 5 ==0)
                  {
                 System.out.println("FizzBuzz");
                  return "FizzBuzz" ;
                   }
             
                 


          }
     
         
       return String.valueOf ("i") ;
    }
  
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest
 {
    
    @Test
    public void hitch_hiker() 
    {
        String expected = "2" ;
        String actual = Untitled.answer(2);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 31
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled
 {
    
    public static String answer(int i)
     {
        for (i=1;i<=100;i++)
          {
            if(i%3 ==0)
                 {
                System.out.println("Fizz");
                return "Fizz" ;
                  }
            
            else if (i % 5 == 0)
                 
                {
                System.out.println("Buzz");
                return "Buzz" ;
                }
           
            else  if (i % 3 ==0 && i % 5 ==0)
                  {
                 System.out.println("FizzBuzz");
                  return "FizzBuzz" ;
                   }
             
                 


          }
     
         
       return String.valueOf ("i") ;
    }
  
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest
 {
    
    @Test
    public void hitch_hiker() 
    {
       // String expected = "2" ;
        //String actual = Untitled.answer(2);
       // assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: EB3C5A6A8D wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.ArrayList;

public class Untitled{
    
    public static ArrayList<Integer> findPrimeFactors(int rank) { 
        ArrayList<Integer> result = new ArrayList<>();
        if (rank <= 3) {
            result.add(rank);
        }
        else {
            int middleRank = rank/2; 
            for (int i=2; i<=middleRank; i++){ 
                if (rank%i == 0){ 
                    result.add(i);
                    if((rank/i)%i == 0){
                        result.addAll(findPrimeFactors(middleRank));
                    }
                }
            }
        }      
        return result;
    }
}


**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;

public class UntitledTest{
    
    @Test
    public void should_return_2_for_rank_2() {
        assertEquals(Arrays.asList(2), Untitled.findPrimeFactors(2));
    }
    @Test
    public void should_return_3_for_rank_3() {
        assertEquals(Arrays.asList(3), Untitled.findPrimeFactors(3));
    }
    @Test
    public void should_return_2_3_for_rank_6() {
        assertEquals(Arrays.asList(2, 3), Untitled.findPrimeFactors(6));
    }
    @Test
    public void should_return_3_5_for_rank_15() {
        assertEquals(Arrays.asList(3, 5), Untitled.findPrimeFactors(15));
    }
    @Test
    public void should_return_2_2_for_rank_4() {
        assertEquals(Arrays.asList(2, 2), Untitled.findPrimeFactors(4));
    }
    @Test
    public void should_return_3_3_for_rank_9() {
        assertEquals(Arrays.asList(3, 3), Untitled.findPrimeFactors(9));
    }
    @Test
    public void should_return_2_2_2_for_rank_12() {
        assertEquals(Arrays.asList(2, 2, 2), Untitled.findPrimeFactors(12));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.ArrayList;

public class Untitled{
    
    public static ArrayList<Integer> findPrimeFactors(int rank) { 
        ArrayList<Integer> result = new ArrayList<>();
        if (rank <= 3) {
            result.add(rank);
        }
        else {
            int middleRank = rank/2; 
            for (int i=2; i<=middleRank; i++){ 
                if (rank%i == 0){ 
                    result.add(i);
                    if((rank/i)%i == 0){
                        result.addAll(findPrimeFactors(rank/i));
                    }
                }
            }
        }      
        return result;
    }
}


**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;

public class UntitledTest{
    
    @Test
    public void should_return_2_for_rank_2() {
        assertEquals(Arrays.asList(2), Untitled.findPrimeFactors(2));
    }
    @Test
    public void should_return_3_for_rank_3() {
        assertEquals(Arrays.asList(3), Untitled.findPrimeFactors(3));
    }
    @Test
    public void should_return_2_3_for_rank_6() {
        assertEquals(Arrays.asList(2, 3), Untitled.findPrimeFactors(6));
    }
    @Test
    public void should_return_3_5_for_rank_15() {
        assertEquals(Arrays.asList(3, 5), Untitled.findPrimeFactors(15));
    }
    @Test
    public void should_return_2_2_for_rank_4() {
        assertEquals(Arrays.asList(2, 2), Untitled.findPrimeFactors(4));
    }
    @Test
    public void should_return_3_3_for_rank_9() {
        assertEquals(Arrays.asList(3, 3), Untitled.findPrimeFactors(9));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E8FBA0FACC gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
 

public class HikerTest {

    int[] listNumbers;
    double[] listNumbersForAvg;
    
    @Test
    public void minTest() {
        listNumbers = new int[]{100,11,4,-16,-75};
        
        int expected = -75;
        int actual = Hiker.getMin(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void maxTest() {
        listNumbers = new int[]{65,98,64,234,87,47};

        int expected = 234;
        int actual = Hiker.getMax(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void sizeTest() {
        listNumbers = new int[]{4,234,76,31,9,-7,1};

        int expected = 7;
        int actual = Hiker.getSize(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void avgTest() {
        listNumbersForAvg = new double[]{1,2,3,4,5};

        double expected = 3;
        double actual = Hiker.getAvg(listNumbersForAvg);
        assertEquals(expected, actual,0.001);

    }
    @Test
    public void emptyArrayTest() {
        listNumbers = new int[]{};

        int actual = Hiker.getMin(listNumbers);
        assertEquals(0,actual);
        
        int actual = Hiker.getMax(listNumbers);
        assertEquals(0,actual);
        
        
        int actual = Hiker.getMax(listNumbers);
        assertEquals(0,actual);

    }
   

}

**************************************
Hiker.java
**************************************


import java.util.ArrayList;
 
public class Hiker {


    public static int getMin(int[] listNumbers) {
        if (listNumbers.length == 0) return 0;  
        int tempMin = listNumbers[0];
        for (int i=1; i<listNumbers.length;i++){
              if (listNumbers[i] < tempMin) { 
                tempMin = listNumbers[i]; 
              }
        }
        return tempMin;
    }
     public static int getMax(int[] listNumbers) {
        if (listNumbers.length == 0) return 0;
        int tempMax = listNumbers[0];
        for (int i=1; i<listNumbers.length;i++){
              if (listNumbers[i] > tempMax) { 
                tempMax = listNumbers[i]; 
              }
        }
        return tempMax;
    }
    public static int getSize(int[] listNumbers) {
        return listNumbers.length;  
    }
    public static double getAvg(double[] listNumbers) {
        if (listNumbers.length == 0) return 0;
        double sum = 0;
        for (int i=0; i<listNumbers.length;i++){
              sum = sum + listNumbers[i];
        }
        return  sum / listNumbers.length;
    }
    

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
 

public class HikerTest {

    int[] listNumbers;
    double[] listNumbersForAvg;
    
    @Test
    public void minTest() {
        listNumbers = new int[]{100,11,4,-16,-75};
        
        int expected = -75;
        int actual = Hiker.getMin(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void maxTest() {
        listNumbers = new int[]{65,98,64,234,87,47};

        int expected = 234;
        int actual = Hiker.getMax(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void sizeTest() {
        listNumbers = new int[]{4,234,76,31,9,-7,1};

        int expected = 7;
        int actual = Hiker.getSize(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void avgTest() {
        listNumbersForAvg = new double[]{1,2,3,4,5};

        double expected = 3;
        double actual = Hiker.getAvg(listNumbersForAvg);
        assertEquals(expected, actual,0.001);

    }
    @Test
    public void emptyArrayTest() {
        listNumbers = new int[]{};

        int actual = Hiker.getMin(listNumbers);
        assertEquals(0,actual);

    }
   

}

**************************************
Hiker.java
**************************************


import java.util.ArrayList;
 
public class Hiker {


    public static int getMin(int[] listNumbers) {
        if (listNumbers.length == 0) return 0;  
        int tempMin = listNumbers[0];
        for (int i=1; i<listNumbers.length;i++){
              if (listNumbers[i] < tempMin) { 
                tempMin = listNumbers[i]; 
              }
        }
        return tempMin;
    }
     public static int getMax(int[] listNumbers) {
        if (listNumbers.length == 0) return 0;
        int tempMax = listNumbers[0];
        for (int i=1; i<listNumbers.length;i++){
              if (listNumbers[i] > tempMax) { 
                tempMax = listNumbers[i]; 
              }
        }
        return tempMax;
    }
    public static int getSize(int[] listNumbers) {
        return listNumbers.length;  
    }
    public static double getAvg(double[] listNumbers) {
        if (listNumbers.length == 0) return 0;
        double sum = 0;
        for (int i=0; i<listNumbers.length;i++){
              sum = sum + listNumbers[i];
        }
        return  sum / listNumbers.length;
    }
    

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E83B223223 wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.*;

public class Untitled
{
    
    public List findSummingPairs (List<Integer> data, Integer target)
    {
        List<Pair> answer = new ArrayList<Pair> ();

        // parsing
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer val: data)
        {
            if (map.get (val) == null)
                map.put (val, 1);
            else
                map.put (val, map.get (val) + 1);
        }

        // search
        for (Integer val: data)
        {
            Integer searchItem = target - val;
            if (searchItem > 0)
                if (map.get (searchItem) != null)
                    answer.add ((searchItem < val) ? new Pair (searchItem, val) : new Pair (val, searchItem));
        }

        // returning answer
        return answer;
    } 

    public static int answer() 
    {
        return 42;
    }
}

class Pair
{
    public int first, second;
    public Pair ()
    {
        first = 0;
        second = 0;
    }

    public Pair (Integer f, Integer s)
    {
        first = f;
        second = s;
    }

    public String toString() {
        return "[" + first + "," + second + "]";
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.*;

public class Untitled
{
    
    public static List findSummingPairs (List<Integer> data, Integer target)
    {
        List<Pair> answer = new ArrayList<Pair> ();

        // parsing
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer val: data)
        {
            if (map.get (val) == null)
                map.put (val, 1);
            else
                map.put (val, map.get (val) + 1);
        }

        // search
        for (Integer val: data)
        {
            Integer searchItem = target - val;
            if (searchItem > 0)
                if (map.get (searchItem) != null)
                    answer.add ((searchItem < val) ? new Pair (searchItem, val) : new Pair (val, searchItem));
        }

        // returning answer
        return answer;
    } 

    public static int answer() 
    {
        return 42;
    }
}

class Pair
{
    public int first, second;
    public Pair ()
    {
        first = 0;
        second = 0;
    }

    public Pair (Integer f, Integer s)
    {
        first = f;
        second = s;
    }

    public String toString() {
        return "[" + first + "," + second + "]";
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        List<Integer> data = new ArrayList<Integer>();
        data.add(8);
        data.add(3);
        data.add(2);
        data.add(7);
        data.add(1);
        data.add(5);
        
        System.out.println(Untitled.findSummingPairs(data, 10));
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E474FEB3F1 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HundredDoorsTest {
    
   @Test
    public void testHundredPass() {
        HundredDoors doors = new HundredDoors();
        for (int i=1; i<=100; i++) {
            doors.pass(i);
        }
        doors.showState();
    }
}

**************************************
HundredDoors.java
**************************************

public class HundredDoors {

    private boolean[] doorState = new boolean[100];

    public void HundredDoors() {
        for (int i=0; i<100; i++) {
            this.doorState[i] = false;
        }
            
    }

    public void pass(int step) {
        for (int i=step-1; i<100; i+=step) {
            if (doorState[i]==false) {
                doorState[i]=true;
            } else {
                doorState[i]=false;
            }
        }

    }

    public void showState() {
        for (int i=1; i<=100; i++) {
            if (this.doorState[i-1]) {
                System.out.println("Door " + i + " is open" );
            }
        }

    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E3906412D5 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatzyTest {
    
    @Test
    public void chanseTest() {
        int [] dice = {1,2,3,4,5};
        int expected = 15;
        int actual = Yatzy.calculateChance(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isYatzy() {
        int [] dice = {1,1,1,1,1};
        int expected = 50;
        int actual = Yatzy.calculateYatzy(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isNotYatzy() {
        int [] dice = {2,1,1,1,1};
        int expected = 0;
        int actual = Yatzy.calculateYatzy(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isPair() {
        int [] dice = {2,2,3,1,1};
        int expected = 4;
        int actual = Yatzy.calculatePair(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isNotPair() {
        int [] dice = {2,4,3,5,1};
        int expected = 0;
        int actual = Yatzy.calculatePair(dice);
        assertEquals(expected, actual);
    }

    @Test
@Ignore
    public void isTwoPair() {
        int [] dice = {2,2,3,1,1};
        int expected = 6;
        int actual = Yatzy.calculateTwoPair(dice);
        assertEquals(expected, actual);
    }

}

**************************************
Yatzy.java
**************************************
public class Yatzy {
    
    public static int calculateChance(int [] dice) {
        
        int sum =0;

        for(int i:dice) {
            sum +=i;
        }

        return sum;
    }

    public static int calculateYatzy(int [] dice) {
        
        int currentDie =dice[0];

        for(int i:dice) {
            if(i!=currentDie) {
                return 0;
            }
        }

        return 50;
    }

    public static int calculatePair(int [] dice) {
        
        int bestSum = 0;

        for(int i=0; i<4; i++) {
            for(int j=i+1; j<4; j++) {
                if(dice[i]==dice[j]) {
                    if (dice[i]+dice[j] > bestSum) {
                        bestSum = dice[i]+dice[j];
                    }
                }
            }
        }

        return bestSum;
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatzyTest {
    
    @Test
    public void chanseTest() {
        int [] dice = {1,2,3,4,5};
        int expected = 15;
        int actual = Yatzy.calculateChance(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isYatzy() {
        int [] dice = {1,1,1,1,1};
        int expected = 50;
        int actual = Yatzy.calculateYatzy(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isNotYatzy() {
        int [] dice = {2,1,1,1,1};
        int expected = 0;
        int actual = Yatzy.calculateYatzy(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isPair() {
        int [] dice = {2,2,3,1,1};
        int expected = 4;
        int actual = Yatzy.calculatePair(dice);
        assertEquals(expected, actual);
    }

    @Test
    public void isNotPair() {
        int [] dice = {2,4,3,5,1};
        int expected = 0;
        int actual = Yatzy.calculatePair(dice);
        assertEquals(expected, actual);
    }



}

**************************************
Yatzy.java
**************************************
public class Yatzy {
    
    public static int calculateChance(int [] dice) {
        
        int sum =0;

        for(int i:dice) {
            sum +=i;
        }

        return sum;
    }

    public static int calculateYatzy(int [] dice) {
        
        int currentDie =dice[0];

        for(int i:dice) {
            if(i!=currentDie) {
                return 0;
            }
        }

        return 50;
    }

    public static int calculatePair(int [] dice) {
        
        int bestSum = 0;

        for(int i=0; i<4; i++) {
            for(int j=i+1; j<4; j++) {
                if(dice[i]==dice[j]) {
                    if (dice[i]+dice[j] > bestSum) {
                        bestSum = dice[i]+dice[j];
                    }
                }
            }
        }

        return bestSum;
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E1D2A31062 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

**************************************
FizzBuzz.java
**************************************
public class FizzBuzz{

}

**************************************
FizzBuzzTest.java
**************************************
import static org.junit.Assert.*;
import org.junit.*;

public class FizzBuzzTest{

@Test
public void helloWorld(){
    assertTrue(true);
}

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************
public class FizzBuzz{

}

**************************************
FizzBuzzTest.java
**************************************
import static org.junit.Assert.*;
import org.junit.*;

public class FizzBuzzTest{

@Test
public void helloWorld(){
    assertTrue(true);
}

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: E08E3B0978 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
AnagramTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class AnagramTest {

    @Test
    public void test_anagram1A() {
        String[] expected = new String[]{"A"};
        String[] actual = Anagramer.generate("A");
        assertEquals(expected, actual);
    }

    @Test
    public void test_anagram1B() {
        String[] expected = new String[]{"B"};
        String[] actual = Anagramer.generate("B");
        assertEquals(expected, actual);
    }

    @Test
    public void test_anagram2AB() {
        String[] expected = new String[]{"AB","BA"};
        String[] actual = Anagramer.generate("AB");
        assertEquals(expected, actual);
    }

    @Test
    @Ignore
    public void test_anagram3ABC() {
        String[] expected = new String[]{"ABC","ACB","BAC","BCA","CBA","CAB"};
        List<String> actual = Arrays.asList(Anagramer.generate("ABC"));

        for(String s: expected)
            assertTrue(actual.contains(s));
    }


    @Test
    public void test_anagram4ABCD() {
        String[] expected = new String[]{"ABCD","ABDC","ACBD","ACDB","ADBC","ADCB","BACD","BADC","BCAD","BCDA","BDAC","BDCA","CABD","CADB","CBAD","CBDA","CDAB","CDBA","DABC","DACB","DBAC","DBCA","DCAB","DCBA"};
        List<String> actual = Arrays.asList(Anagramer.generate("ABCD"));

        for(String s: expected) {
            if(!actual.contains(s))
                System.out.println("ERROR: "+s);
            assertTrue(actual.contains(s));
        }
    }



    @Test
    public void test_anagram5ABCDE() {
        String[] expected = new String[]{"ABCD","ABDC","ACBD","ACDB","ADBC","ADCB","BACD","BADC","BCAD","BCDA","BDAC","BDCA","CABD","CADB","CBAD","CBDA","CDAB","CDBA","DABC","DACB","DBAC","DBCA","DCAB","DCBA"};
        List<String> actual = Arrays.asList(Anagramer.generate("ABCDE"));

        for(String s: expected) {
            if(!actual.contains(s))
                System.out.println("ERROR: "+s);
            assertTrue(actual.contains(s));
        }
    }
}

**************************************
Anagramer.java
**************************************
import java.util.*;

public class Anagramer{

    public static String[] generate(String input) {        
        if(input.length()==1)
            return new String[]{input};
        else if(input.length()==2)
            return new String[]{input, new String(new char[]{input.charAt(1),input.charAt(0)})};
        else if(input.length()>=3) {            
            List<String> perms=new ArrayList<String>();
            for(int i=0; i<input.length();i++) {
              char prefix=input.charAt(i);
              String suffix=new StringBuffer(input).deleteCharAt(i).toString();

              String[] suffixPerms=generate(suffix);                    
              for(String s: suffixPerms) {
                 perms.add(new StringBuffer().append(prefix).append(s).toString());                        
              }
            }
    
            for(String s:perms){
                System.out.println(s);
                if(s.length()!=input.length())
                    perms.remove(s);
            }
            return perms.toArray(new String[factorial(input.length())]);
        }
            
        return null;
    }

    private static int factorial(int input) {
        int fact=1;
        for (int i=1;i<=input;i++)
            fact*=i;
        return fact;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
AnagramTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class AnagramTest {

    @Test
    public void test_anagram1A() {
        String[] expected = new String[]{"A"};
        String[] actual = Anagramer.generate("A");
        assertEquals(expected, actual);
    }

    @Test
    public void test_anagram1B() {
        String[] expected = new String[]{"B"};
        String[] actual = Anagramer.generate("B");
        assertEquals(expected, actual);
    }

    @Test
    public void test_anagram2AB() {
        String[] expected = new String[]{"AB","BA"};
        String[] actual = Anagramer.generate("AB");
        assertEquals(expected, actual);
    }

    @Test
    @Ignore
    public void test_anagram3ABC() {
        String[] expected = new String[]{"ABC","ACB","BAC","BCA","CBA","CAB"};
        List<String> actual = Arrays.asList(Anagramer.generate("ABC"));

        for(String s: expected)
            assertTrue(actual.contains(s));
    }


    @Test
    public void test_anagram4ABCD() {
        String[] expected = new String[]{"ABCD","ABDC","ACBD","ACDB","ADBC","ADCB","BACD","BADC","BCAD","BCDA","BDAC","BDCA","CABD","CADB","CBAD","CBDA","CDAB","CDBA","DABC","DACB","DBAC","DBCA","DCAB","DCBA"};
        List<String> actual = Arrays.asList(Anagramer.generate("ABCD"));

        for(String s: expected) {
            if(!actual.contains(s))
                System.out.println("ERROR: "+s);
            assertTrue(actual.contains(s));
        }
    }
}

**************************************
Anagramer.java
**************************************
import java.util.*;

public class Anagramer{

    public static String[] generate(String input) {        
        if(input.length()==1)
            return new String[]{input};
        else if(input.length()==2)
            return new String[]{input, new String(new char[]{input.charAt(1),input.charAt(0)})};
        else if(input.length()>=3) {            
            List<String> perms=new ArrayList<String>();
            for(int i=0; i<input.length();i++) {
              char prefix=input.charAt(i);
              String suffix=new StringBuffer(input).deleteCharAt(i).toString();

              String[] suffixPerms=generate(suffix);                    
              for(String s: suffixPerms) {
                 perms.add(new StringBuffer().append(prefix).append(s).toString());                        
              }
            }
    
            for(String s:perms){
                System.out.println(s);
                if(s.length()!=input.length())
                    perms.remove(s);
            }
            return perms.toArray(new String[factorial(input.length())]);
        }
            
        return null;
    }

    private static int factorial(int input) {
        int fact=1;
        for (int i=1;i<=input;i++)
            fact*=i;
        return fact;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DE09A4844D hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 1;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void expectedIs1() {
        assertEquals(1, Untitled.answer());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 1;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
   

    @Test
    public void expectedIs1() {
        assertEquals(1, Untitled.answer());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DDAF3ABFE3 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Doors.java
**************************************

public class Doors {
    static private boolean state = false;

    public static void make_pass()
    {
        Doors.state = true;
    }

    public static boolean is_open(int door) {
        return Doors.state;
    }
}

**************************************
DoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorsTest {
    @Test
    public void test_doors_initialize_closed()
    {
        for (int i = 0; i < 100; ++i)
        {
            assertEquals(false, Doors.is_open(i));
        }
    }

    @Test
    public void test_first_pass()
    {
        Doors.make_pass();
        for (int i = 0; i < 100; ++i)
        {
            assertEquals(true, Doors.is_open(i));
        }
    }

    @Test
    public void test_second_pass()
    {
        Doors.make_pass();
        Doors.make_pass();
        for (int i = 0; i < 50; ++i)
        {
            assertEquals(false, Doors.is_open(2 * i));
            assertEquals(false, Doors.is_open(2 * i + 1));
        }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Doors.java
**************************************

public class Doors {
    static private boolean state = false;

    public static void make_pass()
    {
        Doors.state = true;
    }

    public static boolean is_open(int door) {
        return Doors.state;
    }
}

**************************************
DoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorsTest {
    @Test
    public void test_doors_initialize_closed()
    {
        for (int i = 0; i < 100; ++i)
        {
            assertEquals(false, Doors.is_open(i));
        }
    }

    @Test
    public void test_first_pass_all_open()
    {
        Doors.make_pass();
        for (int i = 0; i < 100; ++i)
        {
            assertEquals(true, Doors.is_open(i));
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DCF0E4B60B raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

**************************************
Fizzbuzz.java
**************************************
public class Fizzbuzz {


}

**************************************
FizzbuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzbuzzTest {

    @Test
    public void printNumber1() {
        Fizzbuzz fizzbuzz = new Fizzbuzz();
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Fizzbuzz.java
**************************************
public class Fizzbuzz {


}

**************************************
FizzbuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzbuzzTest {

    @Test
    public void printNumber1() {
        Fizzbuzz fizzbuzz = new Fizzbuzz();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DAE9999E1D moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Stack.java
**************************************


public class Stack {
	// Implements a simple bounded (to 10 entries) stack of type float

	private int index; // pointer to the next free entry
	private float entries[] = new float[10]; // the stack entries

	public Stack() {
		// constructor -- initializes the stack to an empty state
		index = 0;
	}

         public static int answer() {
        return 42;
        }

	public boolean isEmpty() {
		return (index == 0);
	}

	public float pop() {
		// removes the top entry if pop was successful; returns the value, NaN
		// otherwise (empty)
		if (index > 0) {
			index--;
			return entries[index];
		} else {
			return Float.NaN;
		}
	}

	public boolean push(float entry) {
		// add entry to the top and returns true if successful, false otherwise
		// (stack full)
		if (index < 10) {
			entries[index] = entry;
			index++;
			return true;
		} else {
			return false;
		}
	}

	public float top() {
		// returns the number if stack is not empty, NaN otherwise
		if (index > 0)
			return entries[index - 1];
		else
			return Float.NaN;
	}
}

**************************************
StackTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StackTest {
    

    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    } 
    @Test
    public void testemptystack() {
        Stack st = new Stack();
        st.push(1);
        assertEquals(st.pop(),1);

    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Stack.java
**************************************


public class Stack {
	// Implements a simple bounded (to 10 entries) stack of type float

	private int index; // pointer to the next free entry
	private float entries[] = new float[10]; // the stack entries

	public Stack() {
		// constructor -- initializes the stack to an empty state
		index = 0;
	}

         public static int answer() {
        return 42;
        }

	public boolean isEmpty() {
		return (index == 0);
	}

	public float pop() {
		// removes the top entry if pop was successful; returns the value, NaN
		// otherwise (empty)
		if (index > 0) {
			index--;
			return entries[index];
		} else {
			return Float.NaN;
		}
	}

	public boolean push(float entry) {
		// add entry to the top and returns true if successful, false otherwise
		// (stack full)
		if (index < 10) {
			entries[index] = entry;
			index++;
			return true;
		} else {
			return false;
		}
	}

	public float top() {
		// returns the number if stack is not empty, NaN otherwise
		if (index > 0)
			return entries[index - 1];
		else
			return Float.NaN;
	}
}

**************************************
StackTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StackTest {
    

    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    } 
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DABFE6E34F alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 159
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
MoneyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class MoneyTest {
    @Test
    public void testMultiplication() { 
        Money five = Money.dollar(5); 
        assertEquals(Money.dollar(10), five.times(2));
        assertEquals(Money.dollar(15), five.times(3));
    }

    @Test
    public void testEquality() {
        assertTrue(Money.dollar(5).equals(Money.dollar(5)));
        assertFalse(Money.dollar(5).equals(Money.dollar(6)));
        assertFalse(Money.franc(5).equals(Money.dollar(5)));
    } 

    @Test
    public void testCurrency() {
        assertEquals("USD", Money.dollar(1).currency());
        assertEquals("CHF", Money.franc(1).currency());
    }

    @Test
    public void testSimpleAddition() {
        //Money sum = Money.dollar(5).plus(Money.dollar(5));
        //assertEquals(Money.dollar(10), sum);
        Money five = Money.dollar(5);
        Expression sum = five.plus(five);
        Bank bank = new Bank();
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(10), reduced);
    }

    @Test
    public void testPlusReturnsSum() {
        Money five = Money.dollar(5);
        Expression result = five.plus(five);
        Sum sum = (Sum) result;
        assertEquals(five, sum.augend);
        assertEquals(five, sum.addend);
    }

    @Test
    public void testReduceSum() {
        Expression sum = new Sum (Money.dollar(4), Money.dollar(3));
        Bank bank = new Bank();
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(7), result);
    }

    @Test
    public void testReduceMoney() {
        Bank bank = new Bank();
        Money result = bank.reduce(Money.dollar(1), "USD");
        assertEquals(Money.dollar(1), result); 
    }

    @Test
    public void testReduceMoneyDifferentCurrency() {
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Money result = bank.reduce(Money.franc(2), "USD");
        assertEquals(Money.dollar(1), result);
    }

    @Test
    public void testIdentityRate() {
        assertEquals(1, new Bank().rate("USD", "USD"));
    }

    @Test
    public void testMixedAddition() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");
        assertEquals(Money.dollar(10), result);
    }

    @Test
    public void testSumPlusMoney() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Expression sum = new Sum(fiveBucks, tenFrancs).plus(fiveBucks);
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(15), result);
    }

    @Test
    public void testSumTimes() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Expression sum = new Sum(fiveBucks, tenFrancs).times(2);
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(20), result);
    }

    @Test
    public void testPlusSameCurrencyReturnsMoney() {
        Expression sum = Money.dollar(1).plus(Money.dollar(1));
        assertTrue (sum instanceof Money);
    }
}

**************************************
Money.java
**************************************
class Money implements Expression {
    protected int amount;
    protected String currency;

    Money(int amount, String currency) {
        this.amount = amount;
        this.currency = currency; 
    }

    public Expression times(int multiplier) {
        return new Money(amount * multiplier, currency); 
    }

    public Expression plus(Expression addend) {
        return new Sum(this, addend);
    }
   
    public boolean equals(Object object) {
        Money money = (Money) object;
        return this.amount == money.amount && currency.equals(money.currency());
    }

    static Money dollar(int amount) {
        return new Money(amount, "USD");
    }

    static Money franc(int amount) {
        return new Money(amount, "CHF");
    }

    String currency() {
        return this.currency;
    }

    public Money reduce(Bank bank, String to) {
        int rate = bank.rate(currency, to);
        return new Money(amount/rate, to);
    }

    public String toString() {
        return amount + " " + currency;
    }

}

**************************************
Expression.java
**************************************
interface Expression {

    Money reduce(Bank bank, String to);
    Expression plus(Expression addend);
    Expression times(int multiplier);
}

**************************************
Bank.java
**************************************
import java.util.Hashtable;

class Bank {

    private Hashtable rates = new Hashtable();

    Money reduce(Expression source, String to) {
        return source.reduce(this, to);
    }

    int rate(String from, String to) {
        if (from.equals(to)) return 1;
        Integer rate = (Integer) rates.get(new Pair(from, to));
        return rate.intValue();
    }

    void addRate(String from, String to, int rate) {
        rates.put(new Pair(from, to), new Integer(rate));
    }

    private class Pair {
        private String from;
        private String to;
    
        Pair(String from, String to) {
            this.from = from;
            this.to = to;
        }
    
        public boolean equals(Object object) {
            Pair pair = (Pair) object;
            return from.equals(pair.from) && to.equals(pair.to);
        }
    
        public int hashCode() {
            return 0;
        }
    }
}

**************************************
Sum.java
**************************************

class Sum implements Expression {
    Expression augend;
    Expression addend;

    Sum (Expression augend, Expression addend) {
        this.augend = augend;
        this.addend = addend;
    }

    public Expression plus(Expression addend) {
        return new Sum(this, addend);
    }

    public Expression times(int multiplier) {
        return new Sum(augend.times(multiplier), addend.times(multiplier)); 
    }

    public Money reduce(Bank bank, String to) {
        int amount = augend.reduce(bank, to).amount + addend.reduce(bank, to).amount;
        return new Money(amount, to);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 159
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
MoneyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class MoneyTest {
    @Test
    public void testMultiplication() { 
        Money five = Money.dollar(5); 
        assertEquals(Money.dollar(10), five.times(2));
        assertEquals(Money.dollar(15), five.times(3));
    }

    @Test
    public void testEquality() {
        assertTrue(Money.dollar(5).equals(Money.dollar(5)));
        assertFalse(Money.dollar(5).equals(Money.dollar(6)));
        assertFalse(Money.franc(5).equals(Money.dollar(5)));
    } 

    @Test
    public void testCurrency() {
        assertEquals("USD", Money.dollar(1).currency());
        assertEquals("CHF", Money.franc(1).currency());
    }

    @Test
    public void testSimpleAddition() {
        //Money sum = Money.dollar(5).plus(Money.dollar(5));
        //assertEquals(Money.dollar(10), sum);
        Money five = Money.dollar(5);
        Expression sum = five.plus(five);
        Bank bank = new Bank();
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(10), reduced);
    }

    @Test
    public void testPlusReturnsSum() {
        Money five = Money.dollar(5);
        Expression result = five.plus(five);
        Sum sum = (Sum) result;
        assertEquals(five, sum.augend);
        assertEquals(five, sum.addend);
    }

    @Test
    public void testReduceSum() {
        Expression sum = new Sum (Money.dollar(4), Money.dollar(3));
        Bank bank = new Bank();
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(7), result);
    }

    @Test
    public void testReduceMoney() {
        Bank bank = new Bank();
        Money result = bank.reduce(Money.dollar(1), "USD");
        assertEquals(Money.dollar(1), result); 
    }

    @Test
    public void testReduceMoneyDifferentCurrency() {
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Money result = bank.reduce(Money.franc(2), "USD");
        assertEquals(Money.dollar(1), result);
    }

    @Test
    public void testIdentityRate() {
        assertEquals(1, new Bank().rate("USD", "USD"));
    }

    @Test
    public void testMixedAddition() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");
        assertEquals(Money.dollar(10), result);
    }

    @Test
    public void testSumPlusMoney() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Expression sum = new Sum(fiveBucks, tenFrancs).plus(fiveBucks);
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(15), result);
    }

    @Test
    public void testSumTimes() {
        Expression fiveBucks = Money.dollar(5);
        Expression tenFrancs = Money.franc(10);
        Bank bank = new Bank();
        bank.addRate("CHF", "USD", 2);
        Expression sum = new Sum(fiveBucks, tenFrancs).times(2);
        Money result = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(20), result);
    }

}

**************************************
Money.java
**************************************
class Money implements Expression {
    protected int amount;
    protected String currency;

    Money(int amount, String currency) {
        this.amount = amount;
        this.currency = currency; 
    }

    public Expression times(int multiplier) {
        return new Money(amount * multiplier, currency); 
    }

    public Expression plus(Expression addend) {
        return new Sum(this, addend);
    }
   
    public boolean equals(Object object) {
        Money money = (Money) object;
        return this.amount == money.amount && currency.equals(money.currency());
    }

    static Money dollar(int amount) {
        return new Money(amount, "USD");
    }

    static Money franc(int amount) {
        return new Money(amount, "CHF");
    }

    String currency() {
        return this.currency;
    }

    public Money reduce(Bank bank, String to) {
        int rate = bank.rate(currency, to);
        return new Money(amount/rate, to);
    }

    public String toString() {
        return amount + " " + currency;
    }

}

**************************************
Expression.java
**************************************
interface Expression {

    Money reduce(Bank bank, String to);
    Expression plus(Expression addend);
    Expression times(int multiplier);
}

**************************************
Bank.java
**************************************
import java.util.Hashtable;

class Bank {

    private Hashtable rates = new Hashtable();

    Money reduce(Expression source, String to) {
        return source.reduce(this, to);
    }

    int rate(String from, String to) {
        if (from.equals(to)) return 1;
        Integer rate = (Integer) rates.get(new Pair(from, to));
        return rate.intValue();
    }

    void addRate(String from, String to, int rate) {
        rates.put(new Pair(from, to), new Integer(rate));
    }

    private class Pair {
        private String from;
        private String to;
    
        Pair(String from, String to) {
            this.from = from;
            this.to = to;
        }
    
        public boolean equals(Object object) {
            Pair pair = (Pair) object;
            return from.equals(pair.from) && to.equals(pair.to);
        }
    
        public int hashCode() {
            return 0;
        }
    }
}

**************************************
Sum.java
**************************************

class Sum implements Expression {
    Expression augend;
    Expression addend;

    Sum (Expression augend, Expression addend) {
        this.augend = augend;
        this.addend = addend;
    }

    public Expression plus(Expression addend) {
        return new Sum(this, addend);
    }

    public Expression times(int multiplier) {
        return new Sum(augend.times(multiplier), addend.times(multiplier)); 
    }

    public Money reduce(Bank bank, String to) {
        int amount = augend.reduce(bank, to).amount + addend.reduce(bank, to).amount;
        return new Money(amount, to);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DA2F14ADDD zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 65
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int expected) {
        
        Roman r = new Roman();
        String answer = "";
        int length = String.valueOf(expected).length();
        if(expected<= 0)
        {
            System.out.println("Please enter a positive number");
            
        }
       else if ( expected > Integer.MAX_VALUE)
        {
            System.out.println("Integer Limit Exceeded");
        }
        else
        {
        while(length > 0)
        {
            if(expected ==0)
            {
                break;
            }
            int divisor = (int) Math.pow(10, (length-1));
            int  d = expected % divisor;
            int number = expected - d;
            if(number >= 5000)
            {
                answer = answer + Roman.decideNumber(number);
                
            }
            else
            {
                answer = answer + r.getRoman(number);
            }
            expected = d;
            length = String.valueOf(expected).length();
        }
       }
        System.out.println(answer);
        return answer;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

/* In Roman numerals there is no representation for numbers less than or
equals to zero. Similarly, the program cannot provide Roman representation 
for numbers greator than the capacity of "int" (2^31 - 1). So when the input
is one of these number, the program displays a message to enter the valid 
number and returns a empty string which is compared to the same.

When the number is the range of [1,2^31-1], the program returns its roman
representation.

There is a Standard representation for representing roman numerals upto 
4999, whereas from 5000 to larger number, the number is represented as 
multiples of 1000
        eg: 5000 = 5 * 1000   => "V" times 1000
            100000 = 100 * 1000 => "C" times 1000
The 1000 multiple can be denoted as "upper bar", "lower bar" or by 
"brackets". The notation being used in this Program is "bracket".
        eg: 5000 = 5 * 1000 = "(V)"
            100000 = 100 * 1000 = "(C)" etc


Similarly, there are many ways of representing numbers:like
           4 can be represented as "IV" or "IIII"
           3 can be represented as "IIV" or "III"
           9 can be represented as "IX" or "VIIII"
           8 can be represented as "IIX" or "VIII"
Those representations are called as "subtractive form " and "additive form"
respectively.

In this program, both additive form and subtractive form are used.

Additive form is used for : 1,2,3 after multiple of 10
                          : 6,7,8 after multiple of 5
Subtractive form is used for : 4 after multiple of 10 (before multiple 5)
                             : 9 after multiple of 5(before multiple 10)

*/


public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        // Integer is -5 No representation.Expected String is empty
        String expected = "";
        String actual = Untitled.answer(-5);
        assertEquals(expected, actual);
        System.out.println("Less than 0 case is tested");

        // Integer = 0. No representation. Expected String is Empty
        expected = "";
        actual = Untitled.answer(0);
        assertEquals(expected,actual);
        System.out.println("= 0 case is tested");

        /* Integer = 400055(> 0 but less than (2^31 - 1)). 
        Expected String is " (CD)LV */

        expected = "(CD)LV";
        actual = Untitled.answer(400055);
        assertEquals(expected,actual);
        System.out.println("= 400055 case is tested");
        
        /* Integer = Integer.MAX_VALUE.  
        Expected String is "((MM))((C))((XL))((VII))(CD)(LXXX)MMMDCXLVII"
        */

        expected = "((MM))((C))((XL))((VII))(CD)(LXXX)MMMDCXLVII";
        actual = Untitled.answer(Integer.MAX_VALUE );
        assertEquals(expected,actual);
        System.out.println(" Mx int capacity case is tested");

        /* Integer > Integer.MAX_VALUE 
        Expected String is ""
        */
        System.out.println("As the program cannot take the value greater than Integer.MAX_VALUE the test case would fail for the next example ");
        
        expected  = "";
        actual = Untitled.answer(2147483648);
        assertEquals(expected, actual);
        System.out.println(" > max int capacity case is tested");    
    
        
    }
}

**************************************
Roman.java
**************************************
import java.util.*;
public class Roman
{
    static HashMap<Integer, String> roman_mapping = new HashMap<Integer, String>();
    public Roman()
    {
        roman_mapping.put(1,"I");
        roman_mapping.put(2, "II");
        roman_mapping.put(3, "III");
        roman_mapping.put(4, "IV");
        roman_mapping.put(5, "V");
        roman_mapping.put(6, "VI");
        roman_mapping.put(7, "VII");
        roman_mapping.put(8, "VIII");
        roman_mapping.put(9, "IX");
        roman_mapping.put(10, "X");
        roman_mapping.put(20, "XX");
        roman_mapping.put(30, "XXX");
        roman_mapping.put(40, "XL");
        roman_mapping.put(50, "L");
        roman_mapping.put(60, "LX");
        roman_mapping.put(70, "LXX");
        roman_mapping.put(80, "LXXX");
        roman_mapping.put(90, "XC");
        roman_mapping.put(100, "C");
        roman_mapping.put(200, "CC");
        roman_mapping.put(300, "CCC");
        roman_mapping.put(400, "CD");
        roman_mapping.put(500, "D");
        roman_mapping.put(600, "DC");
        roman_mapping.put(700, "DCC");
        roman_mapping.put(800, "DCCC");
        roman_mapping.put(900, "CM");
        roman_mapping.put(1000, "M");        
        roman_mapping.put(2000, "MM");
        roman_mapping.put(3000, "MMM");
        roman_mapping.put(4000, "MMMM");
    }
    public String getRoman(int number)
    {
        return roman_mapping.get(number);
    }
    public static String decideNumber(int number)
    {
                String answer = "";
                if(number == 5000)
                {
                    answer =  "(V)";
                }
                else if(number< 5000)
                {
                    answer = roman_mapping.get(number);
                }
                else
                {
                    int temp = number/1000;
                    answer = answer + ("(" + Roman.decideNumber(temp) + ")");
                   
                }
                return answer;
                
    }
}
        




        
    


%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 65
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int expected) {
        
        Roman r = new Roman();
        String answer = "";
        int length = String.valueOf(expected).length();
        if(expected<= 0)
        {
            System.out.println("Please enter a positive number");
            
        }
       else if ( expected > Integer.MAX_VALUE)
        {
            System.out.println("Integer Limit Exceeded");
        }
        else
        {
        while(length > 0)
        {
            if(expected ==0)
            {
                break;
            }
            int divisor = (int) Math.pow(10, (length-1));
            int  d = expected % divisor;
            int number = expected - d;
            if(number >= 5000)
            {
                answer = answer + Roman.decideNumber(number);
                
            }
            else
            {
                answer = answer + r.getRoman(number);
            }
            expected = d;
            length = String.valueOf(expected).length();
        }
       }
        System.out.println(answer);
        return answer;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

/* In Roman numerals there is no representation for numbers less than or
equals to zero. Similarly, the program cannot provide Roman representation 
for numbers greator than the capacity of "int" (2^31 - 1). So when the input
is one of these number, the program displays a message to enter the valid 
number and returns a empty string which is compared to the same.

When the number is the range of [1,2^31-1], the program returns its roman
representation.

There is a Standard representation for representing roman numerals upto 
4999, whereas from 5000 to larger number, the number is represented as 
multiples of 1000
        eg: 5000 = 5 * 1000   => "V" times 1000
            100000 = 100 * 1000 => "C" times 1000
The 1000 multiple can be denoted as "upper bar", "lower bar" or by 
"brackets". The notation being used in this Program is "bracket".
        eg: 5000 = 5 * 1000 = "(V)"
            100000 = 100 * 1000 = "(C)" etc


Similarly, there are many ways of representing numbers:like
           4 can be represented as "IV" or "IIII"
           3 can be represented as "IIV" or "III"
           9 can be represented as "IX" or "VIIII"
           8 can be represented as "IIX" or "VIII"
Those representations are called as "subtractive form " and "additive form"
respectively.

In this program, both additive form and subtractive form are used.

Additive form is used for : 1,2,3 after multiple of 10
                          : 6,7,8 after multiple of 5
Subtractive form is used for : 4 after multiple of 10 (before multiple 5)
                             : 9 after multiple of 5(before multiple 10)

*/


public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        // Integer is -5 No representation.Expected String is empty
        String expected = "";
        String actual = Untitled.answer(-5);
        assertEquals(expected, actual);
        System.out.println("Less than 0 case is tested");

        // Integer = 0. No representation. Expected String is Empty
        expected = "";
        actual = Untitled.answer(0);
        assertEquals(expected,actual);
        System.out.println("= 0 case is tested");

        /* Integer = 400055(> 0 but less than (2^31 - 1)). 
        Expected String is " (CD)LV */

        expected = "(CD)LV";
        actual = Untitled.answer(400055);
        assertEquals(expected,actual);
        System.out.println("= 400055 case is tested");
        
        /* Integer = Integer.MAX_VALUE.  
        Expected String is "((MM))((C))((XL))((VII))(CD)(LXXX)MMMDCXLVII"
        */

        expected = "((MM))((C))((XL))((VII))(CD)(LXXX)MMMDCXLVII";
        actual = Untitled.answer(Integer.MAX_VALUE );
        assertEquals(expected,actual);
        System.out.println(" Mx int capacity case is tested");

        
        
    }
}

**************************************
Roman.java
**************************************
import java.util.*;
public class Roman
{
    static HashMap<Integer, String> roman_mapping = new HashMap<Integer, String>();
    public Roman()
    {
        roman_mapping.put(1,"I");
        roman_mapping.put(2, "II");
        roman_mapping.put(3, "III");
        roman_mapping.put(4, "IV");
        roman_mapping.put(5, "V");
        roman_mapping.put(6, "VI");
        roman_mapping.put(7, "VII");
        roman_mapping.put(8, "VIII");
        roman_mapping.put(9, "IX");
        roman_mapping.put(10, "X");
        roman_mapping.put(20, "XX");
        roman_mapping.put(30, "XXX");
        roman_mapping.put(40, "XL");
        roman_mapping.put(50, "L");
        roman_mapping.put(60, "LX");
        roman_mapping.put(70, "LXX");
        roman_mapping.put(80, "LXXX");
        roman_mapping.put(90, "XC");
        roman_mapping.put(100, "C");
        roman_mapping.put(200, "CC");
        roman_mapping.put(300, "CCC");
        roman_mapping.put(400, "CD");
        roman_mapping.put(500, "D");
        roman_mapping.put(600, "DC");
        roman_mapping.put(700, "DCC");
        roman_mapping.put(800, "DCCC");
        roman_mapping.put(900, "CM");
        roman_mapping.put(1000, "M");        
        roman_mapping.put(2000, "MM");
        roman_mapping.put(3000, "MMM");
        roman_mapping.put(4000, "MMMM");
    }
    public String getRoman(int number)
    {
        return roman_mapping.get(number);
    }
    public static String decideNumber(int number)
    {
                String answer = "";
                if(number == 5000)
                {
                    answer =  "(V)";
                }
                else if(number< 5000)
                {
                    answer = roman_mapping.get(number);
                }
                else
                {
                    int temp = number/1000;
                    answer = answer + ("(" + Roman.decideNumber(temp) + ")");
                   
                }
                return answer;
                
    }
}
        




        
    




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: DA06D25A36 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
        
    
    @Test
    public void hitch_hiker() {
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
        
    
    @Test
    public void testOne() {
        FizzBuzz fizzBuzz = new FizzBuzz();
        //assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D8D16576A2 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stuff.java
**************************************

public class Stuff {
    
    public static int answer() {
        return 42;
    }
}

**************************************
StuffTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StuffTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
    @Test
     public void stuff() {
        int expected = 42;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
        
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stuff.java
**************************************

public class Stuff {
    
    public static int answer() {
        return 42;
    }
}

**************************************
StuffTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StuffTest {
    
    @Test
    public void stuff() {
        int expected = 42;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
        
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D66AFF3388 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game {
    
    
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void TestGutterGame() {
        Game g = new Game();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D66AFF3388 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 19
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game {
    private int score = 0;

    public void roll(int pins) {
        score+=pins;        
    }

    public int score() {
        return score;
    }
    
}

**************************************
BowlingTest.java
**************************************
import junit.framework.TestCase;

public class BowlingTest extends TestCase {
    private Game g;

    protected void setUp() {
        g = new Game();
    }
    
    public void testGutterGame() {
        rollMany(20, 0);
        assertEquals(0, g.score());
    }

    public void testAllOnes() throws Exception {
        rollMany(20, 1);
        assertEquals(20, g.score());
    }

    private void rollMany(int n, int pins) {
        for (int i = 0; i < n; i++)
        g.roll(pins);
    }

    public void testOneSpare() throws Exception {
        g.roll(5);
        g.roll(5); //spare
        g.roll(3);
        rollMany(17,0);
        assertEquals(16, g.score());
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 19
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game {
    private int score = 0;

    public void roll(int pins) {
        score+=pins;        
    }

    public int score() {
        return score;
    }
    
}

**************************************
BowlingTest.java
**************************************
import junit.framework.TestCase;

public class BowlingTest extends TestCase {
    private Game g;

    protected void setUp() {
        g = new Game();
    }
    
    public void testGutterGame() {
        rollMany(20, 0);
        assertEquals(0, g.score());
    }

    public void testAllOnes() throws Exception {
        rollMany(20, 1);
        assertEquals(20, g.score());
    }

    private void rollMany(int n, int pins) {
        for (int i = 0; i < n; i++)
        g.roll(pins);
    }

    //public void testOneSpare() throws Exception {
    //    g.roll(5);
    //    g.roll(5); //spare
    //    g.roll(3);
    //    rollMany(17,0);
    //    assertEquals(16, g.score());
    //}

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D66AFF3388 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game {
    private int score = 0;
    private int rolls[] = new int[21];
    private int currentRoll = 0;

    public void roll(int pins) {
        score+=pins;  
        rolls[currentRoll++] = pins;    
    }

    public int score() {
        int score = 0;
        for (int i=0; i<rolls.length; i++) {
            score += rolls[i];
        }
        return score;
    }
    
}

**************************************
BowlingTest.java
**************************************
import junit.framework.TestCase;

public class BowlingTest extends TestCase {
    private Game g;

    protected void setUp() {
        g = new Game();
    }
    
    public void testGutterGame() {
        rollMany(20, 0);
        assertEquals(0, g.score());
    }

    public void testAllOnes() throws Exception {
        rollMany(20, 1);
        assertEquals(20, g.score());
    }

    private void rollMany(int n, int pins) {
        for (int i = 0; i < n; i++)
        g.roll(pins);
    }

    public void testOneSpare() throws Exception {
        g.roll(5);
        g.roll(5); //spare
        g.roll(3);
        rollMany(17,0);
        assertEquals(16, g.score());
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game {
    private int score = 0;
    private int rolls[] = new int[21];
    private int currentRoll = 0;

    public void roll(int pins) {
        score+=pins;  
        rolls[currentRoll++] = pins;    
    }

    public int score() {
        int score = 0;
        for (int i=0; i<rolls.length; i++) {
            score += rolls[i];
        }
        return score;
    }
    
}

**************************************
BowlingTest.java
**************************************
import junit.framework.TestCase;

public class BowlingTest extends TestCase {
    private Game g;

    protected void setUp() {
        g = new Game();
    }
    
    public void testGutterGame() {
        rollMany(20, 0);
        assertEquals(0, g.score());
    }

    public void testAllOnes() throws Exception {
        rollMany(20, 1);
        assertEquals(20, g.score());
    }

    private void rollMany(int n, int pins) {
        for (int i = 0; i < n; i++)
        g.roll(pins);
    }

    //public void testOneSpare() throws Exception {
    //    g.roll(5);
    //    g.roll(5); //spare
    //    g.roll(3);
    //    rollMany(17,0);
    //    assertEquals(16, g.score());
    //}

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D55DE16201 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
BowlingGame.java
**************************************

public class BowlingGame {
    
    public static int[] points = new int[21];
    public static void tenNines()
    {
        for(int i = 0; i < 20; i+=2)
        {
            points[i] = 9;
        }
    }
    public static void tenFives_n_split()
    {
        tenFives();
        points[20] = 5;
        tenSplits();
    }
    public static void tenFives()
    {
        for(int i = 0; i < 20; i+=2)
        {
            points[i] = 5;
        }
    }
    public static void tenSplits()
    {
        for(int i = 1; i < 20; i+=2)
        {
            points[i] = 10 - points[i-1] + points[i+1];
        }
       
    }

    public static int get_total()
    {
        int total_points = 0;
        for(int i =0; i< 21; i++)
        {
            total_points += points[i];
        }
        return total_points; 
    }
    
}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {
    
    @Test
    public void all_nines() {
       BowlingGame newGame1 = new BowlingGame();  
       BowlingGame.tenNines();
       int tot_points = BowlingGame.get_total();
        assertEquals(tot_points, 90);
    }
    @Test
    public void all_five_n_splits() {
       BowlingGame newGame2 = new BowlingGame();  
       BowlingGame.tenFives_n_split();
       int tot_points = BowlingGame.get_total();
    //    assertEquals(tot_points, 150);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
BowlingGame.java
**************************************

public class BowlingGame {
    
    public static int[] points = new int[21];
    public static void tenNines()
    {
        for(int i = 0; i < 20; i+=2)
        {
            points[i] = 9;
        }
    }
    public static void tenFives_n_split()
    {
        tenFives();
        points[20] = 5;
        tenSplits();
    }
    public static void tenFives()
    {
        for(int i = 0; i < 20; i+=2)
        {
            points[i] = 5;
        }
    }
    public static void tenSplits()
    {
        for(int i = 1; i < 20; i+=2)
        {
            points[i] = 10 - points[i-1] + points[i+1];
        }
       
    }

    public static int get_total()
    {
        int total_points = 0;
        for(int i =0; i< 21; i++)
        {
            total_points += points[i];
        }
        return total_points; 
    }
    
}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {
    
    @Test
    public void all_nines() {
       BowlingGame newGame1 = new BowlingGame();  
       BowlingGame.tenNines();
       int tot_points = BowlingGame.get_total();
     //   assertEquals(tot_points, 90);
    }
    @Test
    public void all_five_n_splits() {
       BowlingGame newGame2 = new BowlingGame();  
       BowlingGame.tenFives_n_split();
       int tot_points = BowlingGame.get_total();
    //    assertEquals(tot_points, 150);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D239AC9A0B hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
CellTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class CellTest {
    @Test
    public void testNextState() {
        Cell myCell = new DeadCell();
        Cell[] neighbours = new Cell[8];
        for(int i = 0; i < 8; i++) {
            neighbours[i] = new AliveCell();
        }
        Cell nextCell = myCell.getNextIteration(neighbours);
    }
}

interface Cell {
    public Cell getNextIteration(Cell[] neighbours);
}

class DeadCell implements Cell {
    public Cell getNextIteration(Cell[] neighbours) {
        return this;
    }
}

class AliveCell implements Cell {
    public Cell getNextIteration(Cell[] neighbours) {
        return this;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D239AC9A0B raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
CellTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class CellTest {
    
    @Test
    public void hitch_hiker() {
        
    }

    public void isAlive() {
    
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: D02C240C50 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ReverseRoman.java
**************************************
import java.util.*;

public class ReverseRoman {
    
    public static int Reverse(String s) {
        HashMap<String, Integer> RomanMap = new HashMap<String, Integer>();
        
        RomanMap.put("I",1);
        RomanMap.put("V",5);

        int result = 0;

        for(int i = 0; i < s.length(); i++){
            String test = String.valueOf(s.charAt(i));
            result = RomanMap.get(test) + result;
        }
        return result;
    }
}

**************************************
TestReverseRoman.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestReverseRoman {
    
    @Test
    public void test() {
        assertEquals(1, ReverseRoman.Reverse("I"));
        assertEquals(2, ReverseRoman.Reverse("II"));
        assertEquals(3, ReverseRoman.Reverse("III"));
        assertEquals(3, ReverseRoman.Reverse("IV"));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ReverseRoman.java
**************************************
import java.util.*;

public class ReverseRoman {
    
    public static int Reverse(String s) {
        HashMap<String, Integer> RomanMap = new HashMap<String, Integer>();
        
        RomanMap.put("I",1);
        RomanMap.put("V",5);

        int result = 0;

        for(int i = 0; i < s.length(); i++){
            String test = String.valueOf(s.charAt(i));
            result = RomanMap.get(test) + result;
        }
        return result;
    }
}

**************************************
TestReverseRoman.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestReverseRoman {
    
    @Test
    public void test() {
        assertEquals(1, ReverseRoman.Reverse("I"));
        assertEquals(2, ReverseRoman.Reverse("II"));
        assertEquals(3, ReverseRoman.Reverse("III"));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CFBD9738B7 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        if (input % 5 == 0) {
            return "Buzz";
        }

        if (input % 3 == 0) {
            return "Fizz";
        }

        return Integer.valueOf(input).toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testReturnsInput() {
        int input = 1;
        String actual = Untitled.answer(input);
        String expected = "1";

        assertEquals(expected, actual);
    }

    @Test
    public void testThreeReturnsFizz() {
        int input = 3;
        String actual = Untitled.answer(input);
        String expected = "Fizz";

        assertEquals(expected, actual);
    }

    @Test
    public void testFiveReturnsBuzz() {
        int input = 5;
        String actual = Untitled.answer(input);
        String expected = "Buzz";

        assertEquals(expected, actual);
    }


    @Test
    public void testFifteenReturnsFizz() {
        int input = 15;
        String actual = Untitled.answer(input);
        String expected = "FizzBuzz";

        assertEquals(expected, actual);
    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {

        if (input % 5 == 0) {
            return "Buzz";
        }

        if (input % 3 == 0) {
            return "Fizz";
        }

        return Integer.valueOf(input).toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testReturnsInput() {
        int input = 1;
        String actual = Untitled.answer(input);
        String expected = "1";

        assertEquals(expected, actual);
    }

    @Test
    public void testThreeReturnsFizz() {
        int input = 3;
        String actual = Untitled.answer(input);
        String expected = "Fizz";

        assertEquals(expected, actual);
    }

    @Test
    public void testFiveReturnsBuzz() {
        int input = 5;
        String actual = Untitled.answer(input);
        String expected = "Buzz";

        assertEquals(expected, actual);
    }


//    @Test
//    public void testFifteenReturnsFizz() {
//        int input = 15;
//        String actual = Untitled.answer(input);
//        String expected = "FizzBuzz";
//
//        assertEquals(expected, actual);
//    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CF6C4300F1 raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 29
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    private int round;

    public String status() {
        return "";
    }

    public boolean isClose(int number) {
        if(number < 1 || number > 100)
            throw new ArithmeticException();

        if(round == 1 && number == 2)
            return false;
        return true;
    }

    public void pass(int round) {
        this.round = round;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class OneHundredDoorsTest {
    
    OneHundredDoors oneHundredDoors = new OneHundredDoors();

    @Test
    public void initiallyAllIsClosed() {
        assertEquals("", oneHundredDoors.status());
    }
    
    @Test
    public void initiallyAllDoorNumberIsClosed() {
        for(int doorNumber = 1; doorNumber <= 100; doorNumber++)
            assertTrue(oneHundredDoors.isClose(doorNumber));
    }
    
    @Test(expected=ArithmeticException.class)
    public void checkDoorNumberLessThan1ThrowsException() {
        oneHundredDoors.isClose(-1);
    }
    
    @Test(expected=ArithmeticException.class)
    public void checkDoorNumberMoreThan100ThrowsException() {
        oneHundredDoors.isClose(102);
    }
    
    @Test
    public void pass1DoorNumber1IsClosed() {
        oneHundredDoors.pass(1);
        assertTrue(oneHundredDoors.isClose(1));
    }
    
    @Test
    public void pass1DoorNumber2IsOpen() {
        oneHundredDoors.pass(1);
        assertFalse(oneHundredDoors.isClose(2));
    }
    
    @Test
    public void pass1DoorNumber3IsClosed() {
        oneHundredDoors.pass(1);
        assertTrue(oneHundredDoors.isClose(3));
    }
    
    @Test
    public void pass1DoorNumber4IsOpen() {
        oneHundredDoors.pass(1);
        assertFalse(oneHundredDoors.isClose(4));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 29
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    public String status() {
        return "";
    }

    public boolean isClose(int number) {
        if(number < 1 || number > 100)
            throw new ArithmeticException();

        return true;
    }

    public void pass(int round) {
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class OneHundredDoorsTest {
    
    OneHundredDoors oneHundredDoors = new OneHundredDoors();

    @Test
    public void initiallyAllIsClosed() {
        assertEquals("", oneHundredDoors.status());
    }
    
    @Test
    public void initiallyAllDoorNumberIsClosed() {
        for(int doorNumber = 1; doorNumber <= 100; doorNumber++)
            assertTrue(oneHundredDoors.isClose(doorNumber));
    }
    
    @Test(expected=ArithmeticException.class)
    public void checkDoorNumberLessThan1ThrowsException() {
        oneHundredDoors.isClose(-1);
    }
    
    @Test(expected=ArithmeticException.class)
    public void checkDoorNumberMoreThan100ThrowsException() {
        oneHundredDoors.isClose(102);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CC98045919 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static int answer() {
        return 42;
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void getRepresetantion_1() {
        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CBDA5FA30B moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static void fizzBuzz() {
        for (int i=0; i<= 100; i++) {
            if (i % 3 ==0 && i % 5 ==0) {
                System.out.println("FizzBuzz");
            }
            else if (i % 3 == 0) {
                System.out.println("Fizz");
            }
            else if (i % 5 ==0) {
                System.out.println("Buzz");
            }
            else {
                System.out.println(i);
            }
        }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        //int expected = 6 * 9;
        //int actual = Untitled.fizzBuzz();
        //assertEquals(expected, actual);
        Untitled.fizzBuzz();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CBDA5FA30B zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        StringBuffer sb = new StringBuffer("");
        if (input % 3 == 0 && input % 5 == 0){
            sb = sb.append("FizzBuzz");
        } else if (input % 3 == 0){
            sb = sb.append("Fizz");
        }else if (input % 5 == 0){
            sb = sb.append("Buzz");
        }
        return sb.toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class UntitledTest {
    
    @Test
    public void testFizz() {
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("Fizz", Untitled.answer(6));
        assertEquals("Fizz", Untitled.answer(9));
        assertThat("Fizz", not(Untitled.answer(1)));
    }

    
    @Test
    public void testBuzz() {
        assertEquals("Buzz", Untitled.answer(5));
        assertEquals("Buzz", Untitled.answer(10));
        assertEquals("Buzz", Untitled.answer(20));
    }

    
    @Test
    public void testFizzBuzz() {
        assertEquals("FizzBuzz", Untitled.answer(15));
        assertEquals("FizzBuzz", Untitled.answer(30));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        StringBuffer sb = new StringBuffer("");
        if (input % 3 == 0 && input % 5 == 0){
            sb = sb.append("FizzBuzz");
        } else if (input % 3 == 0){
            sb = sb.append("Fizz");
        }else if (input % 5 == 0){
            sb = sb.append("Buzz");
        }
        return sb.toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testFizz() {
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("Fizz", Untitled.answer(6));
        assertEquals("Fizz", Untitled.answer(9));
    }

    
    @Test
    public void testBuzz() {
        assertEquals("Buzz", Untitled.answer(5));
        assertEquals("Buzz", Untitled.answer(10));
        assertEquals("Buzz", Untitled.answer(20));
    }

    
    @Test
    public void testFizzBuzz() {
        assertEquals("FizzBuzz", Untitled.answer(15));
        assertEquals("FizzBuzz", Untitled.answer(30));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CBDA5FA30B zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        StringBuffer sb = new StringBuffer("");
        if (input % 3 == 0 && input % 5 == 0){
            sb = sb.append("FizzBuzz");
        } else if (input % 3 == 0){
            sb = sb.append("Fizz");
        }else if (input % 5 == 0){
            sb = sb.append("Buzz");
        }else{
            sb = sb.append(Integer.toString(input));
        }
        return sb.toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testFizz() {
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("Fizz", Untitled.answer(6));
        assertEquals("Fizz", Untitled.answer(9));
    }

    
    @Test
    public void testBuzz() {
        assertEquals("Buzz", Untitled.answer(5));
        assertEquals("Buzz", Untitled.answer(10));
        assertEquals("Buzz", Untitled.answer(20));
    }

    
    @Test
    public void testFizzBuzz() {
        assertEquals("FizzBuzz", Untitled.answer(15));
        assertEquals("FizzBuzz", Untitled.answer(30));
    }

    @Test
    public void testNeither() {
        assertEquals("1", Untitled.answer(1));
        assertEquals("2", Untitled.answer(2));
        assertEquals("4", Untitled.answer(4));
        assertEquals("6", Untitled.answer(6));
        assertEquals("7", Untitled.answer(7));
        assertEquals("8", Untitled.answer(8));

    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        StringBuffer sb = new StringBuffer("");
        if (input % 3 == 0 && input % 5 == 0){
            sb = sb.append("FizzBuzz");
        } else if (input % 3 == 0){
            sb = sb.append("Fizz");
        }else if (input % 5 == 0){
            sb = sb.append("Buzz");
        }else{
            sb = sb.append(Integer.toString(input));
        }
        return sb.toString();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testFizz() {
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("Fizz", Untitled.answer(6));
        assertEquals("Fizz", Untitled.answer(9));
    }

    
    @Test
    public void testBuzz() {
        assertEquals("Buzz", Untitled.answer(5));
        assertEquals("Buzz", Untitled.answer(10));
        assertEquals("Buzz", Untitled.answer(20));
    }

    
    @Test
    public void testFizzBuzz() {
        assertEquals("FizzBuzz", Untitled.answer(15));
        assertEquals("FizzBuzz", Untitled.answer(30));
    }

    @Test
    public void testNeither() {
        assertEquals("1", Untitled.answer(1));
        assertEquals("2", Untitled.answer(2));
        assertEquals("4", Untitled.answer(4));
        assertEquals("7", Untitled.answer(7));
        assertEquals("8", Untitled.answer(8));

    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CB38800C9E deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
public class FizzBuzzer {
    public static String says(int num) {
        return new String(Integer.toString(num));
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void katafizzBuzz_testWithUsualNum_ReturnsNumberStr(){
      String expectedStr = "1";
      String actualStr   = FizzBuzzer.says(1);
      assertEquals(expectedStr, actualStr);
    }
    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
public class Untitled {
    public static String says(int num) {
        return new String(Integer.toString(num));
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
   
    @Test
    public void katafizzBuzz_testWithUsualNum_ReturnsNumberStr(){
      String expectedStr = "1";
      String actualStr   = Untitled.says(1);
      assertEquals(expectedStr, actualStr);
    }
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: CA4B74A6E6 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 24
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************

public class PrimeFactor {
    
    public static int[] getFactors(int i) {
        if (i <= 0) {
            throw new IllegalArgumentException("argument must be greater than 0");
        }
        int[] result = new int[i];
        if (i == 1) {
            result[0] = 1;
        } else {      
            int currentNumber = i;
            int idx = 0;
            for (int d = 2; d <= i; d++) {
                while (currentNumber % d == 0) {
                    result[idx++] = d;
                    currentNumber = currentNumber / d;
                }
            }     
        }
        return result;
    }
}

**************************************
PrimeFactorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PrimeFactorTest {
    
    @Test
    public void test2gives2() {
        int[] expected = new int[]{2};
        int [] actual = PrimeFactor.getFactors(2);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    public void test3gives3() {
        int[] expected = new int[]{3};
        int [] actual = PrimeFactor.getFactors(3);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    public void test4gives2x2() {
        int[] expected = new int[]{2,2};
        int [] actual = PrimeFactor.getFactors(4);
        assertEquals("premier facteur", expected[0], actual[0]);
        assertEquals("second facteur", expected[1], actual[1]);
    }

    @Test
    public void test1gives1() {
        int[] expected = new int[]{1};
        int [] actual = PrimeFactor.getFactors(1);
        assertEquals("premier facteur", expected[0], actual[0]);
    }

    @Test
    public void testBelow1givesError_0() {
        try {
            int [] actual = PrimeFactor.getFactors(0);
            fail("IllegalArgumentException should occur");
        } catch (Exception e) {
            assertTrue(e.getClass().toString() + e.getMessage(), 
                        e instanceof IllegalArgumentException);
        }
    }

    @Test
    public void testBelow1givesError_Negative() {
        try {
            int [] actual = PrimeFactor.getFactors(-1);
            fail("IllegalArgumentException should occur");
        } catch (Exception e) {
            assertTrue(e.getClass().toString() + e.getMessage(), 
                        e instanceof IllegalArgumentException);
        }
    }

    @Test
    public void testAcceptance2x2x2x5x5x13x17x17() {
        int[] expected = new int[]{2,2,2,5,5,13,17,17};
        int [] actual = PrimeFactor.getFactors(2*2*2*5*5*13*17*17);
        assertEquals("1er facteur", expected[0], actual[0]);
        assertEquals("2d facteur", expected[1], actual[1]);
        assertEquals("3ieme facteur", expected[2], actual[2]);
        assertEquals("4ieme facteur", expected[3], actual[3]);
        assertEquals("5ieme facteur", expected[4], actual[4]);
        assertEquals("6ieme facteur", expected[5], actual[5]);
        assertEquals("7ieme facteur", expected[6], actual[6]);
        assertEquals("8ieme facteur", expected[7], actual[7]);
        assertEquals("9ieme facteur", expected[8], actual[8]);
    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 24
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************

public class PrimeFactor {
    
    public static int[] getFactors(int i) {
        if (i <= 0) {
            throw new IllegalArgumentException("argument must be greater than 0");
        }
        int[] result = new int[i];
        if (i == 1) {
            result[0] = 1;
        } else {      
            int currentNumber = i;
            int idx = 0;
            for (int d = 2; d <= i; d++) {
                while (currentNumber % d == 0) {
                    result[idx++] = d;
                    currentNumber = currentNumber / d;
                }
            }     
        }
        return result;
    }
}

**************************************
PrimeFactorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PrimeFactorTest {
    
    @Test
    public void test2gives2() {
        int[] expected = new int[]{2};
        int [] actual = PrimeFactor.getFactors(2);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    public void test3gives3() {
        int[] expected = new int[]{3};
        int [] actual = PrimeFactor.getFactors(3);
        assertEquals(expected[0], actual[0]);
    }

    @Test
    public void test4gives2x2() {
        int[] expected = new int[]{2,2};
        int [] actual = PrimeFactor.getFactors(4);
        assertEquals("premier facteur", expected[0], actual[0]);
        assertEquals("second facteur", expected[1], actual[1]);
    }

    @Test
    public void test1gives1() {
        int[] expected = new int[]{1};
        int [] actual = PrimeFactor.getFactors(1);
        assertEquals("premier facteur", expected[0], actual[0]);
    }

    @Test
    public void testBelow1givesError_0() {
        try {
            int [] actual = PrimeFactor.getFactors(0);
            fail("IllegalArgumentException should occur");
        } catch (Exception e) {
            assertTrue(e.getClass().toString() + e.getMessage(), 
                        e instanceof IllegalArgumentException);
        }
    }

    @Test
    public void testBelow1givesError_Negative() {
        try {
            int [] actual = PrimeFactor.getFactors(-1);
            fail("IllegalArgumentException should occur");
        } catch (Exception e) {
            assertTrue(e.getClass().toString() + e.getMessage(), 
                        e instanceof IllegalArgumentException);
        }
    }

    @Test
    public void testAcceptance2x2x2x5x5x13x17x17() {
        int[] expected = new int[]{2,2,2,5,5,13,17,17};
        int [] actual = PrimeFactor.getFactors(2*2*2*5*5*13*17*17);
        assertEquals("1er facteur", expected[0], actual[0]);
        assertEquals("2d facteur", expected[1], actual[1]);
        assertEquals("3ieme facteur", expected[2], actual[2]);
        assertEquals("4ieme facteur", expected[3], actual[3]);
        assertEquals("5ieme facteur", expected[4], actual[4]);
        assertEquals("6ieme facteur", expected[5], actual[5]);
        assertEquals("7ieme facteur", expected[6], actual[6]);
        assertEquals("8ieme facteur", expected[7], actual[7]);
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C93F82938C gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Field.java
**************************************

public class Field {
    
}

**************************************
FieldTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FieldTest {
    
    @Test
    public void testIfFieldCanExist() {
        Field field = new Field();

        assertNotNull(field);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C7F0807D0B frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 54;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

public class MoneyTest {
    @Test
    public void checkValues(){
        int testQuarters = 25;
        int testDimes = 10;
        int testNickels = 5;
        int testPennies = 1;
        
        int quarters = 25;
        int dimes = 10;
        int nickels = 5;
        int pennies = 1;

        String assert0 = "Az ertek stimmel";

        assertEquals(assert0, quarters, testQuarters);
        assertEquals(assert0, dimes, testDimes);
        assertEquals(assert0, nickels, testNickels);
        assertEquals(assert0, pennies, testPennies);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

public class Money {

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
MoneyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

//public class HikerTest {
//
//    @Test
//    public void life_the_universe_and_everything() {
//        int expected = 54;
//        int actual = Hiker.answer();
//        assertEquals(expected, actual);
//    }
//}

public class MoneyTest {
    @Test
    public void checkValues(){
        int testQuarters = 25;
        int testDimes = 10;
        int testNickels = 5;
        int testPennies = 1;
        
        int quarters = 25;
        int dimes = 10;
        int nickels = 5;
        int pennies = 1;

        String assert0 = "Az ertek stimmel";

        assertEquals(assert0, quarters, testQuarters);
        assertEquals(assert0, dimes, testDimes);
        assertEquals(assert0, nickels, testNickels);
        assertEquals(assert0, pennies, testPennies);
    }
}

**************************************
Money.java
**************************************

//public class Hiker {
//
//    public static int answer() {
//        return 6 * 9;
//    }
//}
//

public class Money {

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C7E09AEAD2 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, 45);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
       // assertEquals(expected, 45);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C564E69037 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
BowlingGame.java
**************************************

public class BowlingGame{

}

**************************************
BowlingGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingGameTest{
    
    @Test
    public void canCreateBowlingGame() {
        
        BowlingGame game;
        game = new BowlingGame();        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C22F306A0F alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Sequencer.java
**************************************

public class Sequencer{
    private Integer[] numSequnce;

    public Integer[] getSequence(){

        return this.numSequnce;
    }


    public void setSequence(Integer [] numSequence){

        this.numSequnce = numSequence;
    }

    public static int answer() {
        return 42;
    }
}

**************************************
SequencerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import static org.junit.Assert.assertNotNull;

public class SequencerTest {
    
    Sequencer sequencer ;

    @Before
    public void init(){

        this.sequencer = new Sequencer();
        
        this.sequencer.setSequence(new Integer[]{2,4,6,8,10});
    }


    @Test
    public void testSetGet(){

       assertNotNull(this.sequencer.getSequence());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: C19C85A1FB raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
GildedRoseTest.java
**************************************
import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

    @Test
    public void foo() {
        Item[] items = new Item[] { new Item("foo", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("fixme", app.items[0].name);
    }

}

**************************************
Item.java
**************************************
public class Item {

    public String name;

    public int sellIn;

    public int quality;

    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }

    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

**************************************
TexttestFixture.java
**************************************
public class TexttestFixture {
    public static void main(String[] args) {
        System.out.println("OMGHAI!");

        Item[] items = new Item[] {
                new Item("+5 Dexterity Vest", 10, 20), //
                new Item("Aged Brie", 2, 0), //
                new Item("Elixir of the Mongoose", 5, 7), //
                new Item("Sulfuras, Hand of Ragnaros", 0, 80), //
                new Item("Sulfuras, Hand of Ragnaros", -1, 80),
                new Item("Backstage passes to a TAFKAL80ETC concert", 15, 20),
                new Item("Backstage passes to a TAFKAL80ETC concert", 10, 49),
                new Item("Backstage passes to a TAFKAL80ETC concert", 5, 49),
                // this conjured item does not work properly yet
                new Item("Conjured Mana Cake", 3, 6) };

        GildedRose app = new GildedRose(items);

        int days = 2;
        if (args.length > 0) {
            days = Integer.parseInt(args[0]) + 1;
        }

        for (int i = 0; i < days; i++) {
            System.out.println("-------- day " + i + " --------");
            System.out.println("name, sellIn, quality");
            for (Item item : items) {
                System.out.println(item);
            }
            System.out.println();
            app.updateQuality();
        }
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************
import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

    @Test
    public void foo() {
        Item[] items = new Item[] { new Item("foo", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("foo", app.items[0].name);
    }

}

**************************************
Item.java
**************************************
public class Item {

    public String name;

    public int sellIn;

    public int quality;

    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }

    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

**************************************
TexttestFixture.java
**************************************
public class TexttestFixture {
    public static void main(String[] args) {
        System.out.println("OMGHAI!");

        Item[] items = new Item[] {
                new Item("+5 Dexterity Vest", 10, 20), //
                new Item("Aged Brie", 2, 0), //
                new Item("Elixir of the Mongoose", 5, 7), //
                new Item("Sulfuras, Hand of Ragnaros", 0, 80), //
                new Item("Sulfuras, Hand of Ragnaros", -1, 80),
                new Item("Backstage passes to a TAFKAL80ETC concert", 15, 20),
                new Item("Backstage passes to a TAFKAL80ETC concert", 10, 49),
                new Item("Backstage passes to a TAFKAL80ETC concert", 5, 49),
                // this conjured item does not work properly yet
                new Item("Conjured Mana Cake", 3, 6) };

        GildedRose app = new GildedRose(items);

        int days = 2;
        if (args.length > 0) {
            days = Integer.parseInt(args[0]) + 1;
        }

        for (int i = 0; i < days; i++) {
            System.out.println("-------- day " + i + " --------");
            System.out.println("name, sellIn, quality");
            for (Item item : items) {
                System.out.println(item);
            }
            System.out.println();
            app.updateQuality();
        }
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BDEB6AD3CB hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Statistics.java
**************************************

public class Statistics {
    
    public int findMinimum(int[] numbers) {
        return 0;
    }
}

**************************************
StatisticsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatisticsTest {
    
    @Test
    public void minimum() {
        Statistics stats = new Statistics();
        int[] numbers = {0, 0, 0};
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BDC047963C buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 52
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {
  
    @Test
    public void testNoPair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("QC");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertFalse(actual);
    }


    @Test
    public void testOnePair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertTrue(actual);
    }

     @Test
    public void testTwoPairs() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isTwoPairs();
        assertTrue(actual);
    }

  @Test
    public void testDrill() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("5D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isDrill();
        assertTrue(actual);
    }
   
    

}

**************************************
Card.java
**************************************
public class Card {

    String value, suit;    
        
    public Card(String card){
        this.value = String.valueOf(card.charAt(0));
        this.suit = String.valueOf(card.charAt(1));
        
        if (value.equals("J")) value = "10";
        else if (value.equals("Q")) value = "11";
        else if (value.equals("K")) value = "12";
        else if (value.equals("A")) value = "13";
    }
  
}

    

**************************************
Hand.java
**************************************

public class Hand {

    Card c1,c2,c3,c4,c5;    
    int v1,v2,v3,v4,v5;
        
    public Hand(Card c1, Card c2, Card c3, Card c4, Card c5){
       
        this.c1=c1;this.c2=c2;this.c3=c3;this.c4=c4;this.c5=c5;
        v1 =  Integer.parseInt(c1.value);
        v2 =  Integer.parseInt(c2.value);
        v3 =  Integer.parseInt(c3.value);
        v4 =  Integer.parseInt(c4.value);
        v5 =  Integer.parseInt(c5.value);

    }

    public boolean isOnePair(){
        
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                    return true;
                   } 
              
                 }
        }
        return false;        

    }


  public boolean isTwoPairs(){
        
        int pairCounter=0;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                   pairCounter++;
                   } 
              
                 }
        }
        if (pairCounter==4) return true; 
        return false;        

    }

       public boolean isDrill(){
        
        int hit=0;
        int temp;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
           temp = valuesArray[i];
             for(int j =0 ; j<valuesArray.length;j++){
                   if(temp == valuesArray[j] && i!=j){
                   hit++;
                   } 
              
                 }
        if (hit==3)  return true; 
        hit =0;
        }
       
        return false;        

    }

  
    private  int maxValue(int[] chars) {
	int max = chars[0];
	for (int ktr = 0; ktr < chars.length; ktr++) {
		if (chars[ktr] > max) {
			max = chars[ktr];
		}
	}
	return max;
}


    
}

    

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 52
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {
  
    @Test
    public void testNoPair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("QC");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertFalse(actual);
    }


    @Test
    public void testOnePair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertTrue(actual);
    }

     @Test
    public void testTwoPairs() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isTwoPairs();
        assertTrue(actual);
    }

  /*@Test
    public void testDrill() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("5D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isDrill();
        assertTrue(actual);
    }*/
   
    

}

**************************************
Card.java
**************************************
public class Card {

    String value, suit;    
        
    public Card(String card){
        this.value = String.valueOf(card.charAt(0));
        this.suit = String.valueOf(card.charAt(1));
        
        if (value.equals("J")) value = "10";
        else if (value.equals("Q")) value = "11";
        else if (value.equals("K")) value = "12";
        else if (value.equals("A")) value = "13";
    }
  
}

    

**************************************
Hand.java
**************************************

public class Hand {

    Card c1,c2,c3,c4,c5;    
    int v1,v2,v3,v4,v5;
        
    public Hand(Card c1, Card c2, Card c3, Card c4, Card c5){
       
        this.c1=c1;this.c2=c2;this.c3=c3;this.c4=c4;this.c5=c5;
        v1 =  Integer.parseInt(c1.value);
        v2 =  Integer.parseInt(c2.value);
        v3 =  Integer.parseInt(c3.value);
        v4 =  Integer.parseInt(c4.value);
        v5 =  Integer.parseInt(c5.value);

    }

    public boolean isOnePair(){
        
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                    return true;
                   } 
              
                 }
        }
        return false;        

    }


  public boolean isTwoPairs(){
        
        int pairCounter=0;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                   pairCounter++;
                   } 
              
                 }
        }
        if (pairCounter==4) return true; 
        return false;        

    }

       public boolean isDrill(){
        
        int hit=0;
        int temp;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
           temp = valuesArray[i];
             for(int j =0 ; j<valuesArray.length;j++){
                   if(temp == valuesArray[j] && i!=j){
                   hit++;
                   } 
              
                 }
        if (hit==3)  return true; 
        hit = 0;
        }
       
        return false;        

    }

  
    private  int maxValue(int[] chars) {
	int max = chars[0];
	for (int ktr = 0; ktr < chars.length; ktr++) {
		if (chars[ktr] > max) {
			max = chars[ktr];
		}
	}
	return max;
}


    
}

    



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BDC047963C buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 54
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {
  
    @Test
    public void testNoPair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("QC");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertFalse(actual);
    }


    @Test
    public void testOnePair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertTrue(actual);
    }

     @Test
    public void testTwoPairs() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isTwoPairs();
        assertTrue(actual);
    }

  @Test
    public void testDrill() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("5D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isDrill();
        assertTrue(actual);
    }
   
    

}

**************************************
Card.java
**************************************
public class Card {

    String value, suit;    
        
    public Card(String card){
        this.value = String.valueOf(card.charAt(0));
        this.suit = String.valueOf(card.charAt(1));
        
        if (value.equals("J")) value = "10";
        else if (value.equals("Q")) value = "11";
        else if (value.equals("K")) value = "12";
        else if (value.equals("A")) value = "13";
    }
  
}

    

**************************************
Hand.java
**************************************

public class Hand {

    Card c1,c2,c3,c4,c5;    
    int v1,v2,v3,v4,v5;
        
    public Hand(Card c1, Card c2, Card c3, Card c4, Card c5){
       
        this.c1=c1;this.c2=c2;this.c3=c3;this.c4=c4;this.c5=c5;
        v1 =  Integer.parseInt(c1.value);
        v2 =  Integer.parseInt(c2.value);
        v3 =  Integer.parseInt(c3.value);
        v4 =  Integer.parseInt(c4.value);
        v5 =  Integer.parseInt(c5.value);

    }

    public boolean isOnePair(){
        
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                    return true;
                   } 
              
                 }
        }
        return false;        

    }


  public boolean isTwoPairs(){
        
        int pairCounter=0;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                   pairCounter++;
                   } 
              
                 }
        }
        if (pairCounter==4) return true; 
        return false;        

    }

       public boolean isDrill(){
        
        int hit=0;
        int temp;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
           temp = valuesArray[i];
             for(int j =0 ; j<valuesArray.length;j++){
                   if(temp == valuesArray[j] && i!=j){
                   hit++;
                   } 
              
                 }
        if (hit>3)  return true; 
        hit = 0;
        }
       
        return false;        

    }

  
    private  int maxValue(int[] chars) {
	int max = chars[0];
	for (int ktr = 0; ktr < chars.length; ktr++) {
		if (chars[ktr] > max) {
			max = chars[ktr];
		}
	}
	return max;
}


    
}

    

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 54
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {
  
    @Test
    public void testNoPair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("QC");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertFalse(actual);
    }


    @Test
    public void testOnePair() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("8C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isOnePair();
        assertTrue(actual);
    }

     @Test
    public void testTwoPairs() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("7D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isTwoPairs();
        assertTrue(actual);
    }

  /*@Test
    public void testDrill() {

        Card c1 = new Card("5C");  
        Card c2 = new Card("5C"); 
        Card c3 = new Card("5D"); 
        Card c4 = new Card("KD"); 
        Card c5 = new Card("7C");   

        Hand h1 = new Hand(c1,c2,c3,c4,c5);
        boolean actual = h1.isDrill();
        assertTrue(actual);
    }*/
   
    

}

**************************************
Card.java
**************************************
public class Card {

    String value, suit;    
        
    public Card(String card){
        this.value = String.valueOf(card.charAt(0));
        this.suit = String.valueOf(card.charAt(1));
        
        if (value.equals("J")) value = "10";
        else if (value.equals("Q")) value = "11";
        else if (value.equals("K")) value = "12";
        else if (value.equals("A")) value = "13";
    }
  
}

    

**************************************
Hand.java
**************************************

public class Hand {

    Card c1,c2,c3,c4,c5;    
    int v1,v2,v3,v4,v5;
        
    public Hand(Card c1, Card c2, Card c3, Card c4, Card c5){
       
        this.c1=c1;this.c2=c2;this.c3=c3;this.c4=c4;this.c5=c5;
        v1 =  Integer.parseInt(c1.value);
        v2 =  Integer.parseInt(c2.value);
        v3 =  Integer.parseInt(c3.value);
        v4 =  Integer.parseInt(c4.value);
        v5 =  Integer.parseInt(c5.value);

    }

    public boolean isOnePair(){
        
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                    return true;
                   } 
              
                 }
        }
        return false;        

    }


  public boolean isTwoPairs(){
        
        int pairCounter=0;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
            for(int j =0 ; j<valuesArray.length;j++){
                if(valuesArray[i] == valuesArray[j] && i!=j){
                   pairCounter++;
                   } 
              
                 }
        }
        if (pairCounter==4) return true; 
        return false;        

    }

       public boolean isDrill(){
        
        int hit=0;
        int temp;
        int[] valuesArray = new int[]{v1,v2,v3,v4,v5};
        for (int i =0 ; i< valuesArray.length;i++){
           temp = valuesArray[i];
             for(int j =0 ; j<valuesArray.length;j++){
                   if(temp == valuesArray[j] && i!=j){
                   hit++;
                   } 
              
                 }
        if (hit>3)  return true; 
        hit = 0;
        }
       
        return false;        

    }

  
    private  int maxValue(int[] chars) {
	int max = chars[0];
	for (int ktr = 0; ktr < chars.length; ktr++) {
		if (chars[ktr] > max) {
			max = chars[ktr];
		}
	}
	return max;
}


    
}

    



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BDC047963C cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PokerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PokerTest {

    @Test
    public void testHandHasPair() {
        String[] hand = new String[] {"2H", "2D", "5S", "9C", "KD"};
        assertTrue(Poker.handHasPair(hand));
        assertFalse(Poker.handHasTwoPairs(hand));
    }

    @Test
    public void testHandHasTwoPairs() {
        String[] hand = new String[] {"2H", "2D", "5S", "9C", "9D"};
        assertFalse(Poker.handHasPair(hand));
        assertTrue(Poker.handHasTwoPairs(hand));
    }

    @Test
    public void testHandHasFourOfAKind() {
        String[] hand = new String[] {"2H", "2D", "2S", "2C", "9D"};
        assertFalse(Poker.handHasTwoPairs(hand));
        assertTrue(Poker.handHasFourOfAKind(hand));
    }

    @Test
    public void testHandHasTwoPairsWithSameValue() {
        String[] hand = new String[] {"KH", "KD", "5S", "KC", "KS"};
        assertFalse(Poker.handHasPair(hand));
    }

    @Test
    public void testHandHasNoPair() {
        String[] hand = new String[] {"2H", "3D", "5S", "9C", "KD"};
        assertFalse(Poker.handHasPair(hand));
    }

    @Test
    public void testHandHasFullHouse() {
        String[] hand = new String[] {"2H", "2D", "5S", "5C", "5D"};
        assertTrue(Poker.handHasFullHouse(hand));
        assertTrue(Poker.handThreeOfAKind(hand));
    }

    @Test
    public void testHandHasNoFullHouse() {
        String[] hand = new String[] {"2H", "2D", "5S", "4C", "5D"};
        assertFalse(Poker.handHasFullHouse(hand));
    }
}

**************************************
Poker.java
**************************************
import java.util.*;

public class Poker {

    private static int getValue(String card) {
        char value = card.charAt(0);
        switch (value) {
            case 'T': return 10;
            case 'J': return 11;
            case 'Q': return 12;
            case 'K': return 13;
            case 'A': return 14;
            default: return Character.getNumericValue(value);
        }
    }

    private static Map<Integer, Integer> countCardsWithSameValue(String[] hand) {
        Map<Integer, Integer> result = new HashMap<Integer, Integer>();

        for (String card : hand) {
            int value = getValue(card);

            if (!result.containsKey(value)) {
                result.put(value, 0);
            }

            result.put(value, result.get(value) + 1);
        }

        return result;
    }

    private static boolean hasCertainCountOfAKind(String[] hand, int cardCount, int cardKind) {
        Map<Integer, Integer> cardCountByValue = countCardsWithSameValue(hand);

        int countSomeOfAKind = 0;

        for (int value : cardCountByValue.keySet()) {
            Integer countOfCards = cardCountByValue.get(value);
            if ((countOfCards == cardKind) && (countSomeOfAKind < cardCount)) {
                countSomeOfAKind += 1;
            } else if (countOfCards > 1) {
                return false;
            }
        }
        return countSomeOfAKind == cardCount;
    }

    public static boolean handHasPair(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 2);
    }

    public static boolean handHasTwoPairs(String[] hand) {
        return hasCertainCountOfAKind(hand, 2, 2);
    }

    public static boolean handHasThreeOfAKind(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 3);
    }

    public static boolean handHasFourOfAKind(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 4);
    }

    public static boolean handHasFullHouse(String[] hand) {
        Map<Integer, Integer> cardCountByValue = countCardsWithSameValue(hand);

        for (int value : cardCountByValue.keySet()) {
            Integer countOfCards = cardCountByValue.get(value);

            if ((countOfCards != 2) && (countOfCards != 3)) {
                return false;
            }
        }

        return true;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PokerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PokerTest {

    @Test
    public void testHandHasPair() {
        String[] hand = new String[] {"2H", "2D", "5S", "9C", "KD"};
        assertTrue(Poker.handHasPair(hand));
        assertFalse(Poker.handHasTwoPairs(hand));
    }

    @Test
    public void testHandHasTwoPairs() {
        String[] hand = new String[] {"2H", "2D", "5S", "9C", "9D"};
        assertFalse(Poker.handHasPair(hand));
        assertTrue(Poker.handHasTwoPairs(hand));
    }

    @Test
    public void testHandHasFourOfAKind() {
        String[] hand = new String[] {"2H", "2D", "2S", "2C", "9D"};
        assertFalse(Poker.handHasTwoPairs(hand));
        assertTrue(Poker.handHasFourOfAKind(hand));
    }

    @Test
    public void testHandHasTwoPairsWithSameValue() {
        String[] hand = new String[] {"KH", "KD", "5S", "KC", "KS"};
        assertFalse(Poker.handHasPair(hand));
    }

    @Test
    public void testHandHasNoPair() {
        String[] hand = new String[] {"2H", "3D", "5S", "9C", "KD"};
        assertFalse(Poker.handHasPair(hand));
    }

    @Test
    public void testHandHasFullHouse() {
        String[] hand = new String[] {"2H", "2D", "5S", "5C", "5D"};
        assertTrue(Poker.handHasFullHouse(hand));
    }

    @Test
    public void testHandHasNoFullHouse() {
        String[] hand = new String[] {"2H", "2D", "5S", "4C", "5D"};
        assertFalse(Poker.handHasFullHouse(hand));
    }
}

**************************************
Poker.java
**************************************
import java.util.*;

public class Poker {

    private static int getValue(String card) {
        char value = card.charAt(0);
        switch (value) {
            case 'T': return 10;
            case 'J': return 11;
            case 'Q': return 12;
            case 'K': return 13;
            case 'A': return 14;
            default: return Character.getNumericValue(value);
        }
    }

    private static Map<Integer, Integer> countCardsWithSameValue(String[] hand) {
        Map<Integer, Integer> result = new HashMap<Integer, Integer>();

        for (String card : hand) {
            int value = getValue(card);

            if (!result.containsKey(value)) {
                result.put(value, 0);
            }

            result.put(value, result.get(value) + 1);
        }

        return result;
    }

    private static boolean hasCertainCountOfAKind(String[] hand, int cardCount, int cardKind) {
        Map<Integer, Integer> cardCountByValue = countCardsWithSameValue(hand);

        int countSomeOfAKind = 0;

        for (int value : cardCountByValue.keySet()) {
            Integer countOfCards = cardCountByValue.get(value);
            if ((countOfCards == cardKind) && (countSomeOfAKind < cardCount)) {
                countSomeOfAKind += 1;
            } else if (countOfCards > 1) {
                return false;
            }
        }
        return countSomeOfAKind == cardCount;
    }

    public static boolean handHasPair(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 2);
    }

    public static boolean handHasTwoPairs(String[] hand) {
        return hasCertainCountOfAKind(hand, 2, 2);
    }

    public static boolean handHasThreeOfAKind(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 3);
    }

    public static boolean handHasFourOfAKind(String[] hand) {
        return hasCertainCountOfAKind(hand, 1, 4);
    }

    public static boolean handHasFullHouse(String[] hand) {
        Map<Integer, Integer> cardCountByValue = countCardsWithSameValue(hand);

        for (int value : cardCountByValue.keySet()) {
            Integer countOfCards = cardCountByValue.get(value);

            if ((countOfCards != 2) && (countOfCards != 3)) {
                return false;
            }
        }

        return true;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BDC047963C lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 48
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PokerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PokerTest{

    @Test
    public void onePair() {
        int expected = 1;
        int actual = Poker.pairTest("2C3H4S8CAH","2C2C4S8CAH");
        assertEquals(expected, actual);
    }
    @Test
    public void noPair() {
        int expected = 0;
        int actual = Poker.pairTest("2C3H4S8CAH","2C3H4S8CAH");
        assertEquals(expected, actual);
    }
    @Test
    public void twoPair() {
        int expected = 2;
        int actual = Poker.pairTest("2C3H4S8CAH","2C2C4S4SAH");
        assertEquals(expected, actual);
    }
    @Test
    public void drill() {
        int expected = 3;
        int actual = Poker.pairTest("2C2H4S8CAH","2C2C2S4SAH");
        assertEquals(expected, actual);
    }
    @Test
    public void poker() {
        int expected = 4;
        int actual = Poker.pairTest("2C3H4S8CAH","2C2C2S2SAH");
        assertEquals(expected, actual);
    }
    @Test
    public void trueFlush() {
        boolean actual = Poker.flushTest("2C3H4S8CAH","2C2C4C4CAC");
        assertTrue(actual);
    }
    @Test
    public void falseFlush() {
        boolean actual = Poker.flushTest("2C3H4S8CAH","2D2C4C4CAC");
        assertFalse(actual);
    }

     @Test
    public void checkStraight() {
        int expected = 14;
        int actual = Poker.checkStraight("AC2C4S4SAH");
        assertEquals(expected, actual);
    }
}

**************************************
Poker.java
**************************************

public class Poker{

    public static int pairTest(String black,String white) {
        return checkPair(white);
    }
    public static boolean flushTest(String black,String white) {
        return checkFlush(white);
    }
    public static int checkPair(String cards)
    {
        int numberOfPairs=0;
        for (int i=0;i<10;i+=2)
        {
            for(int j=0;j<10;j+=2)
            {
                if(cards.charAt(j)==cards.charAt(i) && i != j && j > i )
                {
                    numberOfPairs++;
                }
                
            }
            
        }
        return numberOfPairs;  
    }
    public static boolean checkFlush(String cards)
    {
        char color = cards.charAt(1);
        for (int i=3;i<10;i+=2)
        {
                if(cards.charAt(i)!= color)
                {
                     return false;
                }
                    
        }  
         return true;
    }
    public static int checkStraight(String cards)
    {
             return charToInt(cards.charAt(0));
    }
    
     public static int charToInt(char card)
    {
         int number = Character.getNumericValue(card); 
        switch(card)
        {
                case 'A' : return 14;
                case 'K' : return 13;
                case 'Q' : return 12;
                case 'J' : return 11;
                default : return number; 
        }
        



    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 48
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PokerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PokerTest{

    @Test
    public void onePair() {
        int expected = 1;
        int actual = Poker.pairTest("2C3H4S8CAH","2C2C4S8CAH");
        assertEquals(expected, actual);
    }
    @Test
    public void noPair() {
        int expected = 0;
        int actual = Poker.pairTest("2C3H4S8CAH","2C3H4S8CAH");
        assertEquals(expected, actual);
    }
    @Test
    public void twoPair() {
        int expected = 2;
        int actual = Poker.pairTest("2C3H4S8CAH","2C2C4S4SAH");
        assertEquals(expected, actual);
    }
    @Test
    public void drill() {
        int expected = 3;
        int actual = Poker.pairTest("2C2H4S8CAH","2C2C2S4SAH");
        assertEquals(expected, actual);
    }
    @Test
    public void trueFlush() {
        boolean actual = Poker.flushTest("2C3H4S8CAH","2C2C4C4CAC");
        assertTrue(actual);
    }
    @Test
    public void falseFlush() {
        boolean actual = Poker.flushTest("2C3H4S8CAH","2D2C4C4CAC");
        assertFalse(actual);
    }

     @Test
    public void checkStraight() {
        int expected = 14;
        int actual = Poker.checkStraight("AC2C4S4SAH");
        assertEquals(expected, actual);
    }
}

**************************************
Poker.java
**************************************

public class Poker{

    public static int pairTest(String black,String white) {
        return checkPair(white);
    }
    public static boolean flushTest(String black,String white) {
        return checkFlush(white);
    }
    public static int checkPair(String cards)
    {
        int numberOfPairs=0;
        for (int i=0;i<10;i+=2)
        {
            for(int j=0;j<10;j+=2)
            {
                if(cards.charAt(j)==cards.charAt(i) && i != j && j > i )
                {
                    numberOfPairs++;
                }
                
            }
            
        }
        return numberOfPairs;  
    }
    public static boolean checkFlush(String cards)
    {
        char color = cards.charAt(1);
        for (int i=3;i<10;i+=2)
        {
                if(cards.charAt(i)!= color)
                {
                     return false;
                }
                    
        }  
         return true;
    }
    public static int checkStraight(String cards)
    {
             return charToInt(cards.charAt(0));
    }
    
     public static int charToInt(char card)
    {
         int number = Character.getNumericValue(card); 
        switch(card)
        {
                case 'A' : return 14;
                case 'K' : return 13;
                case 'Q' : return 12;
                case 'J' : return 11;
                default : return number; 
        }
        



    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BCEA753C81 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
BowlingGame.java
**************************************

public class BowlingGame {
    

}

**************************************
BowlingGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingGameTest {
    
    @Test
    public void gutterGame() {
        BowlingGame game = new BowlingGame();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BA5960FA76 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void nameNotAltered() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}
	@Test
	public void qualityNeverNegative() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertTrue(app.items[0].quality < 0);
	}

}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void nameNotAltered() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}
	@Test
	public void qualityNeverNegative() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		//assertTrue(app.items[0].quality < 0);
	}

}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: BA5960FA76 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 30
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie") && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

        private GildedRose setUp(String name, int sell, int qual) {
            Item[] is = new Item[] { new Item(name, sell, qual)};
	    GildedRose app = new GildedRose(is);
	    app.updateQuality();
            return app;
        }

        private void assertMethod(int sell, int qual, GildedRose app) {
            assertEquals("foo", app.items[0].name);
                assertEquals(sell, app.items[0].sellIn);
                assertEquals(qual, app.items[0].quality);
        }

	@Test
	public void updateQuality_genericName_decreases_sellIn_and_quality_by_one() {
		GildedRose app = setUp("foo", 1, 1);
                assertMethod(0, 0, app);
		
	}

@Test
	public void updateQuality_genericName_1_quality_gives_foo_0_1() {
		GildedRose app = setUp("foo", 0, 1);
		assertMethod(-1, 0, app);
	}

@Test
	public void updateQuality_genericName_1_sellin_gives_foo_0_0() {
		GildedRose app = setUp("foo", 1, 0);
		assertMethod(0, 0, app);
	}

@Test
	public void updateQuality_negative_sellin_gives_foo_n2_0() {
		GildedRose app = setUp("foo", -1, 1);
		assertMethod(-2, 0, app);
	}

@Test
	public void updateQuality_sellin_negative_quality_gives_foo_0_1() {
		GildedRose app = setUp("foo", 1, -1);
		assertMethod(0, -1, app);
	}

@Test
	public void updateQuality_negative_sellin_negative_quality_gives_foo_n2_0() {
		GildedRose app = setUp("foo", -1, -1);
		assertMethod(-2, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50() {
		GildedRose app = setUp("foo", 61, -1);
		assertMethod(60, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50_and_magic_name_is_backstage() {
		GildedRose app = setUp("Backstage passes to a TAFKAL80ETC concert", 61, -1);
		assertMethod(60, 0, app);
	}

@Test
	public void updateQuality_sellin_less_than_50_and_magic_name_is_backstage() {
		GildedRose app = setUp("Backstage passes to a TAFKAL80ETC concert", 41, -1);
		assertMethod(40, 0, app);
	}

@Test
	public void updateQuality_sellin_less_than_50_and_magic_name_is_HolyHandgranade() {
		GildedRose app = setUp("Sulfuras, Hand of Ragnaros", 41, -1);
		assertMethod(41, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50_and_magic_name_is_HolyHandgranade() {
		GildedRose app = setUp("Sulfuras, Hand of Ragnaros", 61, -1);
		assertMethod(61, -1, app);
	}


}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 30
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie") && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

        private GildedRose setUp(String name, int sell, int qual) {
            Item[] is = new Item[] { new Item(name, sell, qual)};
	    GildedRose app = new GildedRose(is);
	    app.updateQuality();
            return app;
        }

        private void assertMethod(int sell, int qual, GildedRose app) {
                assertEquals(sell, app.items[0].sellIn);
                assertEquals(qual, app.items[0].quality);
        }

	@Test
	public void updateQuality_genericName_decreases_sellIn_and_quality_by_one() {
		GildedRose app = setUp("foo", 1, 1);
                assertMethod(0, 0, app);
		
	}

@Test
	public void updateQuality_genericName_1_quality_gives_foo_0_1() {
		GildedRose app = setUp("foo", 0, 1);
		assertMethod(-1, 0, app);
	}

@Test
	public void updateQuality_genericName_1_sellin_gives_foo_0_0() {
		GildedRose app = setUp("foo", 1, 0);
		assertMethod(0, 0, app);
	}

@Test
	public void updateQuality_negative_sellin_gives_foo_n2_0() {
		GildedRose app = setUp("foo", -1, 1);
		assertMethod(-2, 0, app);
	}

@Test
	public void updateQuality_sellin_negative_quality_gives_foo_0_1() {
		GildedRose app = setUp("foo", 1, -1);
		assertMethod(0, -1, app);
	}

@Test
	public void updateQuality_negative_sellin_negative_quality_gives_foo_n2_0() {
		GildedRose app = setUp("foo", -1, -1);
		assertMethod(-2, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50() {
		GildedRose app = setUp("foo", 61, -1);
		assertMethod(60, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50_and_magic_name_is_backstage() {
		GildedRose app = setUp("Backstage passes to a TAFKAL80ETC concert", 61, -1);
		assertMethod(60, 0, app);
	}

@Test
	public void updateQuality_sellin_less_than_50_and_magic_name_is_backstage() {
		GildedRose app = setUp("Backstage passes to a TAFKAL80ETC concert", 41, -1);
		assertMethod(40, 0, app);
	}

@Test
	public void updateQuality_sellin_less_than_50_and_magic_name_is_HolyHandgranade() {
		GildedRose app = setUp("Sulfuras, Hand of Ragnaros", 41, -1);
		assertMethod(41, -1, app);
	}

@Test
	public void updateQuality_sellin_more_than_50_and_magic_name_is_HolyHandgranade() {
		GildedRose app = setUp("Sulfuras, Hand of Ragnaros", 61, -1);
		assertMethod(61, -1, app);
	}


}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B8DDC7D13C lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }

    public static String createDiamond(){
        return "A";
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void test_firstLine() {
        String diamond = Untitled.createDiamond();
        assertEquals("A", diamond);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }

    public static String createDiamond(){
        return "A";
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {

    @Test
    public void test_firstLine() {
        String diamond = Untitled.createDiamond();
        assertEquals("A", diamond);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B8DDC7D13C lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {

    public static String createDiamond(char diamondChar){   
        return "A";
    }

    public static int getCharIndex(char c) {
        int deep = (int)c  - (int)'A';
        return deep;
    }

  

}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {

    @Test
    public void test_diamond_A() {
        String diamond = Diamond.createDiamond('A');
        assertEquals("A", diamond);
    }
   
     @Test
    public void test_diamond_B() {
        String diamond = Diamond.createDiamond('B');
        assertEquals(" A \nB  B\n A", diamond);
    }

    @Test
    public void test_getCharIndex() {
        int i2 = Diamond.getCharIndex('C');
        assertEquals(2, i2);
        int i0 = Diamond.getCharIndex('A');
        assertEquals(0, i0);

    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {

    public static String createDiamond(char diamondChar){   
        return "A";
    }

    public static int getCharIndex(char c) {
        int deep = (int)c  - (int)'A';
        return deep;
    }

  

}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {

    @Test
    public void test_diamond_A() {
        String diamond = Diamond.createDiamond('A');
        assertEquals("A", diamond);
    }
   
  

    @Test
    public void test_getCharIndex() {
        int i2 = Diamond.getCharIndex('C');
        assertEquals(2, i2);
        int i0 = Diamond.getCharIndex('A');
        assertEquals(0, i0);

    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B77F662D35 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
StoreTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StoreTest {

    @Test
    public void canSellBooks() {
        
    }
}

**************************************
Store.java
**************************************

public class Store {

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B727AEAAD2 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

import java.util.List;
import java.util.ArrayList;

public class Untitled {
    
    public static int answer() {
        return 42;
    }
    
    public static boolean isPrime(int number){
        if(number == 2 || number == 3){
            return true;
        } else {
            for(int i = 3; i <= number/2; i = i + 2){
                if(i % number == 0){
                   return false;
                }
            }
            return true;
        }
    }

    public static List<Integer> primeFactors(int number) {
        List<Integer> primes = new ArrayList<Integer>();
        
        if(number % 2 == 0){
            primes.add(2);
        }        

        //get all primes
        for(int i = 3; i <= number/2; i = i + 2){
            if(i % number == 0){
                primes.add(i);
            }
        }

        int remaining = number;
        int i = 0;
        List<Integer> primeFactors = new ArrayList<Integer>();

        while(remaining != 1 && i < primes.size()){
            int currPrime = primes.get(i);

            if(remaining % currPrime == 0) {
                remaining = remaining / currPrime;
                primeFactors.add(currPrime);
            } else {
                ++i;
            }
        }
        
        return primeFactors;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

import java.util.List;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void testIsPrime(){
        boolean twoPrime = Untitled.isPrime(2);

        assertTrue(twoPrime);
    }

    @Test
    public void testPrimeFactors2(){
        List<Integer> primeFactors = Untitled.primeFactors(2);
        assertEquals(1, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
    }

    @Test
    public void testPrimeFactors4(){
        List<Integer> primeFactors = Untitled.primeFactors(4);
        assertEquals(2, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }

    @Test
    public void testPrimeFactors6(){
        List<Integer> primeFactors = Untitled.primeFactors(6);
        assertEquals(2, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
        assertEquals(3,(int)primeFactors.get(1));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

import java.util.List;
import java.util.ArrayList;

public class Untitled {
    
    public static int answer() {
        return 42;
    }
    
    public static boolean isPrime(int number){
        if(number == 2 || number == 3){
            return true;
        } else {
            for(int i = 3; i <= number/2; i = i + 2){
                if(i % number == 0){
                   return false;
                }
            }
            return true;
        }
    }

    public static List<Integer> primeFactors(int number) {
        List<Integer> primes = new ArrayList<Integer>();
        
        if(number % 2 == 0){
            primes.add(2);
        }        

        //get all primes
        for(int i = 3; i <= number/2; i = i + 2){
            if(i % number == 0){
                primes.add(i);
            }
        }

        int remaining = number;
        int i = 0;
        List<Integer> primeFactors = new ArrayList<Integer>();

        while(remaining != 1 && i < primes.size()){
            int currPrime = primes.get(i);

            if(remaining % currPrime == 0) {
                remaining = remaining / currPrime;
                primeFactors.add(currPrime);
            } else {
                ++i;
            }
        }
        
        return primeFactors;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

import java.util.List;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void testIsPrime(){
        boolean twoPrime = Untitled.isPrime(2);

        assertTrue(twoPrime);
    }

    @Test
    public void testPrimeFactors2(){
        List<Integer> primeFactors = Untitled.primeFactors(2);
        assertEquals(1, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
    }

    @Test
    public void testPrimeFactors4(){
        List<Integer> primeFactors = Untitled.primeFactors(4);
        assertEquals(2, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B727AEAAD2 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 82
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

import java.util.List;
import java.util.ArrayList;

public class Untitled {
    
    public static boolean isPrime(int number){
        if(number == 2 || number == 3){
            return true;
        } 
        else if(number % 2 == 0){
            return false;
        } else {
            for(int i = 3; i <= number/2; i = i + 2){
                if(number % i == 0){
                   return false;
                }
            }
            return true;
        }
    }

    public static List<Integer> getPrimesForNumber(int number){
        List<Integer> primes = new ArrayList<Integer>();
        
        for(int i = 2; i <= number; ++i){
            if(isPrime(i)){
                primes.add(i);
            }
        }
        return primes;
    }

    public static List<Integer> primeFactors(int number) {
        
        List<Integer> primes = getPrimesForNumber(number);

        List<Integer> primeFactors = new ArrayList<Integer>();

        for(Integer prime : primes){
            if(number % prime == 0) {
                int remaining = number / prime;
            
                List<Integer> newList = primeFactors(remaining);
        
                if(newList.size() != 0 || remaining == 1){
                    newList.add(prime);
                    return newList;
                }
            }
        }
        return new ArrayList<Integer>();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

import java.util.List;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void testIsPrime(){
        boolean twoPrime = Untitled.isPrime(2);
        boolean threePrime = Untitled.isPrime(3);
        boolean fivePrime = Untitled.isPrime(5);
        boolean sevenPrime = Untitled.isPrime(7);
        boolean eight = Untitled.isPrime(8);
        boolean fifteen = Untitled.isPrime(15);
        boolean nineteenPrime = Untitled.isPrime(19);


        assertTrue(twoPrime);
        assertTrue(threePrime );
        assertTrue(fivePrime );
        assertTrue(sevenPrime );
        assertFalse(eight );
        assertFalse(fifteen );
        assertTrue(nineteenPrime );
    }

    @Test
    public void testGetPrimes(){
        List<Integer> primes2 = Untitled.getPrimesForNumber(2);
        List<Integer> primes4 = Untitled.getPrimesForNumber(4);
        List<Integer> primes6 = Untitled.getPrimesForNumber(6);
        List<Integer> primes9 = Untitled.getPrimesForNumber(9);
        List<Integer> primes12 = Untitled.getPrimesForNumber(12);

        assertEquals(1,primes2.size());
        assertEquals(2,primes4.size());
        assertEquals(3,primes6.size());
        assertEquals(4,primes9.size());
        assertEquals(5,primes12.size());

    }

    @Test
    public void testPrimeFactors2(){
        List<Integer> primeFactors = Untitled.primeFactors(2);
        assertEquals(1, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
    }

    @Test
    public void testPrimeFactors4(){
        List<Integer> primeFactors = Untitled.primeFactors(4);
        assertEquals(2, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors6(){
        List<Integer> primeFactors = Untitled.primeFactors(6);
        assertEquals(2, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors9(){
        List<Integer> primeFactors = Untitled.primeFactors(9);
        assertEquals(2, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(3,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors12(){
        List<Integer> primeFactors = Untitled.primeFactors(12);
        assertEquals(3, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
        assertEquals(2,(int)primeFactors.get(2));
    }


   @Test
    public void testPrimeFactors15(){
        List<Integer> primeFactors = Untitled.primeFactors(15);
        assertEquals(2, primeFactors.size());
        assertEquals(5,(int)primeFactors.get(0));
        assertEquals(3,(int)primeFactors.get(1));
    }


   @Test
    public void testPrimeFactors6144(){
        List<Integer> primeFactors = Untitled.primeFactors(6144);
        assertEquals(12, primeFactors.size());
    }

  @Test
    public void testPrimeFactors253789134856(){
        List<Integer> primeFactors = Untitled.primeFactors(253789134856);
        assertEquals(5, primeFactors.size());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 82
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

import java.util.List;
import java.util.ArrayList;

public class Untitled {
    
    public static boolean isPrime(int number){
        if(number == 2 || number == 3){
            return true;
        } 
        else if(number % 2 == 0){
            return false;
        } else {
            for(int i = 3; i <= number/2; i = i + 2){
                if(number % i == 0){
                   return false;
                }
            }
            return true;
        }
    }

    public static List<Integer> getPrimesForNumber(int number){
        List<Integer> primes = new ArrayList<Integer>();
        
        for(int i = 2; i <= number; ++i){
            if(isPrime(i)){
                primes.add(i);
            }
        }
        return primes;
    }

    public static List<Integer> primeFactors(int number) {
        
        List<Integer> primes = getPrimesForNumber(number);

        List<Integer> primeFactors = new ArrayList<Integer>();

        for(Integer prime : primes){
            if(number % prime == 0) {
                int remaining = number / prime;
            
                List<Integer> newList = primeFactors(remaining);
        
                if(newList.size() != 0 || remaining == 1){
                    newList.add(prime);
                    return newList;
                }
            }
        }
        return new ArrayList<Integer>();
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

import java.util.List;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void testIsPrime(){
        boolean twoPrime = Untitled.isPrime(2);
        boolean threePrime = Untitled.isPrime(3);
        boolean fivePrime = Untitled.isPrime(5);
        boolean sevenPrime = Untitled.isPrime(7);
        boolean eight = Untitled.isPrime(8);
        boolean fifteen = Untitled.isPrime(15);
        boolean nineteenPrime = Untitled.isPrime(19);


        assertTrue(twoPrime);
        assertTrue(threePrime );
        assertTrue(fivePrime );
        assertTrue(sevenPrime );
        assertFalse(eight );
        assertFalse(fifteen );
        assertTrue(nineteenPrime );
    }

    @Test
    public void testGetPrimes(){
        List<Integer> primes2 = Untitled.getPrimesForNumber(2);
        List<Integer> primes4 = Untitled.getPrimesForNumber(4);
        List<Integer> primes6 = Untitled.getPrimesForNumber(6);
        List<Integer> primes9 = Untitled.getPrimesForNumber(9);
        List<Integer> primes12 = Untitled.getPrimesForNumber(12);

        assertEquals(1,primes2.size());
        assertEquals(2,primes4.size());
        assertEquals(3,primes6.size());
        assertEquals(4,primes9.size());
        assertEquals(5,primes12.size());

    }

    @Test
    public void testPrimeFactors2(){
        List<Integer> primeFactors = Untitled.primeFactors(2);
        assertEquals(1, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
    }

    @Test
    public void testPrimeFactors4(){
        List<Integer> primeFactors = Untitled.primeFactors(4);
        assertEquals(2, primeFactors.size());
        assertEquals(2,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors6(){
        List<Integer> primeFactors = Untitled.primeFactors(6);
        assertEquals(2, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors9(){
        List<Integer> primeFactors = Untitled.primeFactors(9);
        assertEquals(2, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(3,(int)primeFactors.get(1));
    }

   @Test
    public void testPrimeFactors12(){
        List<Integer> primeFactors = Untitled.primeFactors(12);
        assertEquals(3, primeFactors.size());
        assertEquals(3,(int)primeFactors.get(0));
        assertEquals(2,(int)primeFactors.get(1));
        assertEquals(2,(int)primeFactors.get(2));
    }


   @Test
    public void testPrimeFactors15(){
        List<Integer> primeFactors = Untitled.primeFactors(15);
        assertEquals(2, primeFactors.size());
        assertEquals(5,(int)primeFactors.get(0));
        assertEquals(3,(int)primeFactors.get(1));
    }


   @Test
    public void testPrimeFactors6144(){
        List<Integer> primeFactors = Untitled.primeFactors(6144);
        assertEquals(12, primeFactors.size());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B323203625 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
    @Test
    public void testroman(){
  
       assertEquals(expected, actual);

    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B22DCD17C3 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
TennisGameDefactored1.java
**************************************

public class TennisGameDefactored1 {
    
    private int m_score1 = 0;
    private int m_score2 = 0;
    private String player1Name;
    private String player2Name;

    public TennisGameDefactored1(String player1Name, String player2Name) {
        this.player1Name = player1Name;
        this.player2Name = player2Name;
    }

    public void wonPoint(String playerName) {
        if (playerName == "player1")
            m_score1 += 1;
        else
            m_score2 += 1;
    }

    public String getScore() {
        String score = "";
        int tempScore=0;
        if (m_score1==m_score2)
        {
            switch (m_score1)
            {
                case 0:
                        score = "Love-All";
                    break;
                case 1:
                        score = "Fifteen-All";
                    break;
                case 2:
                        score = "Thirty-All";
                    break;
                case 3:
                        score = "Forty-All";
                    break;
                default:
                        score = "Deuce";
                    break;
                
            }
        }
        else if (m_score1>=4 || m_score2>=4)
        {
            int minusResult = m_score1-m_score2;
            if (minusResult==1) score ="Advantage player1";
            else if (minusResult ==-1) score ="Advantage player2";
            else if (minusResult>=2) score = "Win for player1";
            else score ="Win for player2";
        }
        else
        {
            for (int i=1; i<3; i++)
            {
                if (i==1) tempScore = m_score1;
                else { score+="-"; tempScore = m_score2;}
                switch(tempScore)
                {
                    case 0:
                        score+="Love";
                        break;
                    case 1:
                        score+="Fifteen";
                        break;
                    case 2:
                        score+="Thirty";
                        break;
                    case 3:
                        score+="Forty";
                        break;
                }
            }
        }
        return score;
    }
}

**************************************
TennisTest.java
**************************************
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class TennisTest {

    private int player1Score;
    private int player2Score;
    private String expectedScore;

    public TennisTest(int player1Score, int player2Score, String expectedScore) {
        this.player1Score = player1Score;
        this.player2Score = player2Score;
        this.expectedScore = expectedScore;
    }
    
    @Parameters
    public static Collection<Object[]> getAllScores() {
        return Arrays.asList(new Object[][] {
                { 0, 0, "Love-All" },
                { 1, 1, "Fifteen-All" },
                { 2, 2, "Thirty-All"},
                { 3, 3, "Forty-All"},
                { 4, 4, "Deuce"},
                
                { 1, 0, "Fifteen-Love"},
                { 0, 1, "Love-Fifteen"},
                { 2, 0, "Thirty-Love"},
                { 0, 2, "Love-Thirty"},
                { 3, 0, "Forty-Love"},
                { 0, 3, "Love-Forty"},
                { 4, 0, "Win for player1"},
                { 0, 4, "Win for player2"},
                
                { 2, 1, "Thirty-Fifteen"},
                { 1, 2, "Fifteen-Thirty"},
                { 3, 1, "Forty-Fifteen"},
                { 1, 3, "Fifteen-Forty"},
                { 4, 1, "Win for player1"},
                { 1, 4, "Win for player2"},

                { 3, 2, "Forty-Thirty"},
                { 2, 3, "Thirty-Forty"},
                { 4, 2, "Win for player1"},
                { 2, 4, "Win for player2"},
                
                { 4, 3, "Advantage player1"},
                { 3, 4, "Advantage player2"},
                { 5, 4, "Advantage player1"},
                { 4, 5, "Advantage player2"},
                { 15, 14, "Advantage player1"},
                { 14, 15, "Advantage player2"},

                { 6, 4, "Win for player1"},
                { 4, 6, "Win for player2"},
                { 16, 14, "Win for player1"},
                { 14, 16, "Win for player2"},
        });
    }

    @Test
    public void checkAllScores() {
        TennisGame game = new TennisGame("player1", "player2");
        int highestScore = Math.max(this.player1Score, this.player2Score);
        for (int i = 0; i < highestScore; i++) {
            if (i < this.player1Score)
                game.wonPoint("player1");
            if (i < this.player2Score)
                game.wonPoint("player2");
        }
        assertEquals(this.expectedScore, game.getScore());
    }
    
    @Test
    public void realisticGame() {
        // NOTE: Change this TennisGame to the version you want to refactor
        TennisGameDefactored1 game = new TennisGameDefactored1("player1", "player2");
        String[] points =          {"player1", "player1", "player2", "player2", "player1", "player1"};
        String[] expected_scores = {"Fifteen-Love", "Thirty-Love", "Thirty-Fifteen", "Thirty-All", "Forty-Thirty", "Win for player1"};
        for (int i = 0; i < 6; i++) {
            game.wonPoint(points[i]);
            assertEquals(expected_scores[i], game.getScore());
        }
        
        
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
TennisGameDefactored1.java
**************************************

public class TennisGameDefactored1 {
    
    private int m_score1 = 0;
    private int m_score2 = 0;
    private String player1Name;
    private String player2Name;

    public TennisGameDefactored1(String player1Name, String player2Name) {
        this.player1Name = player1Name;
        this.player2Name = player2Name;
    }

    public void wonPoint(String playerName) {
        if (playerName == "player1")
            m_score1 += 1;
        else
            m_score2 += 1;
    }

    public String getScore() {
        String score = "";
        int tempScore=0;
        if (m_score1==m_score2)
        {
            switch (m_score1)
            {
                case 0:
                        score = "Love-All";
                    break;
                case 1:
                        score = "Fifteen-All";
                    break;
                case 2:
                        score = "Thirty-All";
                    break;
                case 3:
                        score = "Forty-All";
                    break;
                default:
                        score = "Deuce";
                    break;
                
            }
        }
        else if (m_score1>=4 || m_score2>=4)
        {
            int minusResult = m_score1-m_score2;
            if (minusResult==1) score ="Advantage player1";
            else if (minusResult ==-1) score ="Advantage player2";
            else if (minusResult>=2) score = "Win for player1";
            else score ="Win for player2";
        }
        else
        {
            for (int i=1; i<3; i++)
            {
                if (i==1) tempScore = m_score1;
                else { score+="-"; tempScore = m_score2;}
                switch(tempScore)
                {
                    case 0:
                        score+="Love";
                        break;
                    case 1:
                        score+="Fifteen";
                        break;
                    case 2:
                        score+="Thirty";
                        break;
                    case 3:
                        score+="Forty";
                        break;
                }
            }
        }
        return score;
    }
}

**************************************
TennisTest.java
**************************************
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class TennisTest {

    private int player1Score;
    private int player2Score;
    private String expectedScore;

    public TennisTest(int player1Score, int player2Score, String expectedScore) {
        this.player1Score = player1Score;
        this.player2Score = player2Score;
        this.expectedScore = expectedScore;
    }
    
    @Parameters
    public static Collection<Object[]> getAllScores() {
        return Arrays.asList(new Object[][] {
                { 0, 0, "Love-All" },
                { 1, 1, "Fifteen-All" },
                { 2, 2, "Thirty-All"},
                { 3, 3, "Forty-All"},
                { 4, 4, "Deuce"},
                
                { 1, 0, "Fifteen-Love"},
                { 0, 1, "Love-Fifteen"},
                { 2, 0, "Thirty-Love"},
                { 0, 2, "Love-Thirty"},
                { 3, 0, "Forty-Love"},
                { 0, 3, "Love-Forty"},
                { 4, 0, "Win for player1"},
                { 0, 4, "Win for player2"},
                
                { 2, 1, "Thirty-Fifteen"},
                { 1, 2, "Fifteen-Thirty"},
                { 3, 1, "Forty-Fifteen"},
                { 1, 3, "Fifteen-Forty"},
                { 4, 1, "Win for player1"},
                { 1, 4, "Win for player2"},

                { 3, 2, "Forty-Thirty"},
                { 2, 3, "Thirty-Forty"},
                { 4, 2, "Win for player1"},
                { 2, 4, "Win for player2"},
                
                { 4, 3, "Advantage player1"},
                { 3, 4, "Advantage player2"},
                { 5, 4, "Advantage player1"},
                { 4, 5, "Advantage player2"},
                { 15, 14, "Advantage player1"},
                { 14, 15, "Advantage player2"},

                { 6, 4, "Win for player1"},
                { 4, 6, "Win for player2"},
                { 16, 14, "Win for player1"},
                { 14, 16, "Win for player2"},
        });
    }

    @Test
    public void checkAllScores() {
        // NOTE: Change this TennisGame to the version you want to refactor
        TennisGameDefactored1 game = new TennisGameDefactored1("player1", "player2");
        int highestScore = Math.max(this.player1Score, this.player2Score);
        for (int i = 0; i < highestScore; i++) {
            if (i < this.player1Score)
                game.wonPoint("player1");
            if (i < this.player2Score)
                game.wonPoint("player2");
        }
        assertEquals(this.expectedScore, game.getScore());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: B0F6E9269B alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Year.java
**************************************

public class Year {

    int year = 0;

    Year(int year) {
        this.year = year;
    }
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    //@Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Year.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void year2000IsLeapYear() {

            
        assertEquals(true, new Year(2000));


    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Year.java
**************************************

public class Year {

    int year = 0;

    Year(int year) {
        this.year = year;
    }
    
    public static boolean isLeapYear() {
        return true;
    }


}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    

    @Test
    public void year2000IsLeapYear() {

            
        assertEquals(true, new Year(2000).isLeapYear());


    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AF6865730B snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void testInitialState() {
        boolean[][] grid = Hiker.getState();
        assertEquals(grid[4][8], grid);
    }
}

**************************************
Hiker.java
**************************************



public class Hiker {
    static boolean[][] simpleGrid1 = new boolean[4][8];
    static boolean[][] simpleGrid2 = new boolean[4][8];
    public static int current;
    
    public static boolean[][] getState() {
        if (current == 0) {
            current = 1;
            //simpleGrid1.setState(current);
            return simpleGrid1;
        }
        else {
            current = 0;
            return simpleGrid2;
        }
    }
}

**************************************
Cell.java
**************************************
public class Cell {

    private int state;

    public int getState() {
        return this.state;
    }

    public void setState(int state) {
        this.state = state;
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void testInitialState() {
        boolean[][] grid = Hiker.getState();
        //assertEquals(grid[4][8], grid);
    }
}

**************************************
Hiker.java
**************************************



public class Hiker {
    static boolean[][] simpleGrid1 = new boolean[4][8];
    static boolean[][] simpleGrid2 = new boolean[4][8];
    public static int current;
    
    public static boolean[][] getState() {
        if (current == 0) {
            current = 1;
            //simpleGrid1.setState(current);
            return simpleGrid1;
        }
        else {
            current = 0;
            return simpleGrid2;
        }
    }
}

**************************************
Cell.java
**************************************
public class Cell {

    private int state;

    public int getState() {
        return this.state;
    }

    public void setState(int state) {
        this.state = state;
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AE31880832 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Yatzy.java
**************************************
import java.util.*;

public class Yatzy {
    
    public static int answer(List<Integer> dices, String category) {
        int result=0;        
        
        
        if (category.equals("chance")) {
            for (Integer dice : dices) {
                result += dice;
            }
        } else if (category.equals("ones")) {
            for (Integer dice : dices) {
                if(dice == 1) {
                    result += dice;
                }
            }
        }
        return result;
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class YatzyTest {
    
    @Test
    public void correctScoreChance() {
        String category = "chance";
        Integer [] dices = {1,2,3,4,5};
        
        int expected = 1+2+3+4+5;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);
    }

    @Test
    public void correctScoreChance2() {
        String category = "chance";
        Integer [] dices = {2,3,4,5,6};

        int expected = 2+3+4+5+6;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);
    }

    @Test
    public void correctScoreOnes() {
        String category = "ones";
        Integer [] dices = {2,1,4,1,6};
       
        int expected = 2;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);

        dices =  {2,2,4,2,6};
        expected = 0;
        actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);
    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Yatzy.java
**************************************
import java.util.*;

public class Yatzy {
    
    public static int answer(List<Integer> dices, String category) {
        int result=0;        
        
        
        if (category.equals("chance")) {
            for (Integer dice : dices) {
                result += dice;
            }
        } else if (category.equals("ones")) {
            for (Integer dice : dices) {
                if(dice == 1) {
                    result += dice;
                }
            }
        }
        return result;
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class YatzyTest {
    
    @Test
    public void correctScoreChance() {
        String category = "chance";
        Integer [] dices = {1,2,3,4,5};
        
        int expected = 1+2+3+4+5;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);
    }

    @Test
    public void correctScoreChance2() {
        String category = "chance";
        Integer [] dices = {2,3,4,5,6};

        int expected = 2+3+4+5+6;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);
    }

    @Test
    public void correctScoreOnes() {
        String category = "ones";
        Integer [] dices = {2,1,4,1,6};
       
        int expected = 2;
        int actual = Yatzy.answer(Arrays.asList(dices), category);
        assertEquals(expected, actual);

      
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AE31880832 moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
YatzeeCalc.java
**************************************
public class YatzeeCalc {
    
    public static int calculateSum(int[] dices, String category) {
        return 42;
    }
}

**************************************
YatzeeCalcTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatzeeCalcTest {
    
    @Test
    public void sumOfDicesForOnesCategoryCorrect() {
        int[] dices = new int[]{1,1,1,4,5};
        int sum = YatzeeCalc.calculateSum(dices, "ONES");
        
        assert false;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ADB6490A13 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Bowling.java
**************************************

public class Bowling {
    
    private int points;
    
    public void throwBall(int pinsKnockedDown) {
       points += pinsKnockedDown;
    }


    public int points() {
        return points;
    }
}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {

    Bowling bowling;

    @Before
    public void setUp() {
        bowling = new Bowling();
    }    

    @Test
    public void gutterGame() {
        throwMany(20, 0);
        assertEquals(0, bowling.points());
    }

    @Test
    public void allSpare() {
        throwMany(21, 5);
        assertEquals(150, bowling.points());
    }

    private void throwMany(int numberOfThrows, int pinsKnockedDown) {
        for(int i = 0; i < numberOfThrows; i++) {
            bowling.throwBall(pinsKnockedDown);
        }
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Bowling.java
**************************************

public class Bowling {
    
    private int points;
    
    public void throwBall(int pinsKnockedDown) {
       points += pinsKnockedDown;
    }


    public int points() {
        return points;
    }
}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {

    Bowling bowling;

    @Before
    public void setUp() {
        bowling = new Bowling();
    }    

    @Test
    public void gutterGame() {
        throwMany(20, 0);
        assertEquals(0, bowling.points());
    }

/*
    @Test
    public void allSpare() {
        throwMany(21, 5);
        assertEquals(150, bowling.points());
    } */

    private void throwMany(int numberOfThrows, int pinsKnockedDown) {
        for(int i = 0; i < numberOfThrows; i++) {
            bowling.throwBall(pinsKnockedDown);
        }
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: ADB6490A13 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Bowling.java
**************************************

public class Bowling {
    
    private int[] pinsKnockedDownOnThrow = new int[21];
    private int throwCounter;
    
    public void throwBall(int pinsKnockedDown) {
       pinsKnockedDownOnThrow[throwCounter++] = pinsKnockedDown;
    }


    public int poeng() {
        int poengsum = 0;
        int rute = 0;
        for(int kast = 0; rute < 10; kast++) {
            if(erStrike(kast)){
                poengsum += 10 + strikeBonus(kast);
            }
            else if(erSpare(kast)){
                poengsum += 10 + spareBonus(kast);
            }
            else {
                poengsum += rutePoeng(kast);
            }
            rute++;
        }
        return poengsum;
    }

    private boolean erSpare(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] + pinsKnockedDownOnThrow[throwNumber + 1] == 10;
    }

    private int spareBonus(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber + 2];
    }

    private boolean erStrike(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] == 10;
    }

    private int strikeBonus(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber + 1] + pinsKnockedDownOnThrow[throwNumber + 2];
    }

    private int rutePoeng(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] + pinsKnockedDownOnThrow[throwNumber + 1]; 
    }

}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {

    Bowling bowling;

    @Before
    public void setUp() {
        bowling = new Bowling();
    }    

    @Test
    public void gutterGame() {
        throwMany(20, 0);
        assertEquals(0, bowling.poeng());
    }


    @Test
    public void allSpare() {
        throwMany(21, 5);
        assertEquals(150, bowling.poeng());
    } 

    @Test
    public void allStrike() {
        throwMany(12, 10);
        assertEquals(300, bowling.poeng());
    }

    @Test
    public void oneSpare() {
        throwMany(2, 5);
        throwMany(18, 1);
        assertEquals(29, bowling.poeng());
    }

    private void throwMany(int numberOfThrows, int pinsKnockedDown) {
        for(int i = 0; i < numberOfThrows; i++) {
            bowling.throwBall(pinsKnockedDown);
        }
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Bowling.java
**************************************

public class Bowling {
    
    private int[] pinsKnockedDownOnThrow = new int[21];
    private int throwCounter;
    
    public void throwBall(int pinsKnockedDown) {
       pinsKnockedDownOnThrow[throwCounter++] = pinsKnockedDown;
    }


    public int poeng() {
        int poengsum = 0;
        int rute = 0;
        for(int kast = 0; rute < 10; kast++) {
            if(erStrike(kast)){
                poengsum += 10 + strikeBonus(kast);
            }
            else if(erSpare(kast)){
                poengsum += 10 + spareBonus(kast);
            }
            else {
                poengsum += rutePoeng(kast);
            }
            rute++;
        }
        return poengsum;
    }

    private boolean erSpare(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] + pinsKnockedDownOnThrow[throwNumber + 1] == 10;
    }

    private int spareBonus(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber + 2];
    }

    private boolean erStrike(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] == 10;
    }

    private int strikeBonus(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber + 1] + pinsKnockedDownOnThrow[throwNumber + 2];
    }

    private int rutePoeng(int throwNumber) {
        return pinsKnockedDownOnThrow[throwNumber] + pinsKnockedDownOnThrow[throwNumber + 1]; 
    }

}

**************************************
BowlingTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingTest {

    Bowling bowling;

    @Before
    public void setUp() {
        bowling = new Bowling();
    }    

    @Test
    public void gutterGame() {
        throwMany(20, 0);
        assertEquals(0, bowling.poeng());
    }


    @Test
    public void allSpare() {
        throwMany(21, 5);
        assertEquals(150, bowling.poeng());
    } 

    @Test
    public void allStrike() {
        throwMany(12, 10);
        assertEquals(300, bowling.poeng());
    }

/*
    @Test
    public void oneSpare() {
        throwMany(2, 5);
        throwMany(18, 1);
        assertEquals(29, bowling.poeng());
    } */

    private void throwMany(int numberOfThrows, int pinsKnockedDown) {
        for(int i = 0; i < numberOfThrows; i++) {
            bowling.throwBall(pinsKnockedDown);
        }
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AD23906296 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void years_exactly_divisible_by_400_are_leap_years() {
        assertTrue(DateUtil.isLeapYear(1600));
        assertTrue(DateUtil.isLeapYear(2000));
        assertTrue(DateUtil.isLeapYear(2400));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
DateUtil.java
**************************************

public class DateUtil {
    
    public static boolean isLeapYear(int year) {
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void years_exactly_divisible_by_400_are_leap_years() {
        //assertTrue(DateUtil.isLeapYear(1600));
        assertTrue(DateUtil.isLeapYear(2000));
        //assertTrue(DateUtil.isLeapYear(2400));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AB5EF0FA9E zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 28
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return (54);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatzyTest {
  private Yatzy yatzy_;

  @Before
  public void setup()
  {
    yatzy_ = new Yatzy();
  }

  @Test
  public void testChance() {
    assertEquals( 15, yatzy_.score( Category.CHANCE, 1, 2, 3, 4, 5 ));
    assertEquals( 5, yatzy_.score( Category.CHANCE, 1, 1, 1, 1, 1 ));
  }

  @Test
  public void testYatzy() {
    assertEquals( 0, yatzy_.score( Category.YATZY, 1, 2, 3, 4, 5 ));
    assertEquals( 50, yatzy_.score( Category.YATZY, 1, 1, 1, 1, 1 ));
  }

  @Test
  public void test1s() {
    assertEquals( 0, yatzy_.score( Category.YATZY, 2, 2, 3, 4, 5 ));
    assertEquals( 1, yatzy_.score( Category.YATZY, 1, 2, 3, 4, 5 ));
    assertEquals( 5, yatzy_.score( Category.YATZY, 1, 1, 1, 1, 1 ));
  }
}

**************************************
Yatzy.java
**************************************
public final class Yatzy
{
  public int score( Category category, int d1, int d2, int d3, int d4, int d5 )
  {
    int score;
    switch ( category )
    {
    case CHANCE:
      score = scoreChance( d1, d2, d3, d4, d5 );
      break;
    case YATZY:
      score = scoreYatzy( d1, d2, d3, d4, d5 );
      break;
    default:
      throw new IllegalArgumentException( "Unknown category" );
    }
    return score;
  }

  private int scoreChance(int d1, int d2, int d3, int d4, int d5)
  {
    return ( d1 + d2 + d3 + d4 + d5 );
  }

  private int scoreYatzy(int d1, int d2, int d3, int d4, int d5)
  {
    if ( d1 == d2 && d2 ==d3 && d3 == d4 && d4 ==d5 )
    {
      return 50;
    }
    else
    {
      return 0;
    }
  }
}

**************************************
Category.java
**************************************
  public enum Category
  {
    CHANCE,
    YATZY;
  }

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 28
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return (54);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatzyTest {
  private Yatzy yatzy_;

  @Before
  public void setup()
  {
    yatzy_ = new Yatzy();
  }

  @Test
  public void testChance() {
    assertEquals( 15, yatzy_.score( Category.CHANCE, 1, 2, 3, 4, 5 ));
    assertEquals( 5, yatzy_.score( Category.CHANCE, 1, 1, 1, 1, 1 ));
  }

  @Test
  public void testYatzy() {
    assertEquals( 0, yatzy_.score( Category.YATZY, 1, 2, 3, 4, 5 ));
    assertEquals( 50, yatzy_.score( Category.YATZY, 1, 1, 1, 1, 1 ));
  }

  @Test
  public void test1s() {
    assertEquals( 0, yatzy_.score( Category.ONES, 2, 2, 3, 4, 5 ));
    //assertEquals( 1, yatzy_.score( Category.ONES, 1, 2, 3, 4, 5 ));
    //assertEquals( 5, yatzy_.score( Category.ONES, 1, 1, 1, 1, 1 ));
  }
}

**************************************
Yatzy.java
**************************************
public final class Yatzy
{
  public int score( Category category, int d1, int d2, int d3, int d4, int d5 )
  {
    int score;
    switch ( category )
    {
    case CHANCE:
      score = scoreChance( d1, d2, d3, d4, d5 );
      break;
    case YATZY:
      score = scoreYatzy( d1, d2, d3, d4, d5 );
      break;
    case ONES:
      score = scoreOnes( d1, d2, d3, d4, d5 );
      break;
    default:
      throw new IllegalArgumentException( "Unknown category" );
    }
    return score;
  }

  private int scoreChance(int d1, int d2, int d3, int d4, int d5)
  {
    return ( d1 + d2 + d3 + d4 + d5 );
  }

  private int scoreYatzy(int d1, int d2, int d3, int d4, int d5)
  {
    if ( d1 == d2 && d2 ==d3 && d3 == d4 && d4 ==d5 )
    {
      return 50;
    }
    else
    {
      return 0;
    }
  }

  private int scoreOnes(int d1, int d2, int d3, int d4, int d5)
  {
    int[] dices = new int[] { d1, d2, d3, d4, d5 };
    int sum = 0;
    for( int i: dices )
    {
      if ( i == 1 )
      {
        sum += i;
      }
    }
    return sum;
  }
}

**************************************
Category.java
**************************************
  public enum Category
  {
    CHANCE,
    ONES,
    TWOS,
    THREES,
    FOURS,
    FIVES,
    SIXES,
    YATZY;
  }



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: AB42BA48DD deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int min(int[] sequence){
        int length = sequence.length;
        int min = Math.min(sequence[0], sequence[1]);
        return min;  
    }

    public static int length(int[] sequence){
        return sequence.length;
    }

    public static double average(int[] sequence){
        int sum = 0;
        double average = 0;

        for (int i = 0; i<sequence.length; i++){
            sum = sum + sequence[i];
        }
        average = sum/sequence.length;
        average = (double)((int)(average*10000))/10000;
        return average;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    //@Test
    public void testLength() {
        int[] sequence = {1,2,3,4,5};
        int testLength = Untitled.length(sequence);
        int expectedLength = 5;
        assertEquals(testLength, expectedLength);
    }

    //@Test
    public void testSum() {
        int[] sequence = {1,2,3,4,5};
        double testSum = Untitled.average(sequence);
        int expectedSum = 15;
        assertEquals(testSum, expectedSum);
    }

    @Test 
    public void testAverage() {
        int[] sequence = {6,9,15,-2,92,11};
        double testAverage = Untitled.average(sequence);
        double expectedAverage = 21.83333;
        System.out.println(testAverage);
        assertEquals(testAverage, expectedAverage);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int min(int[] sequence){
        int length = sequence.length;
        int min = Math.min(sequence[0], sequence[1]);
        return min;  
    }

    public static int length(int[] sequence){
        return sequence.length;
    }

    public static double average(int[] sequence){
        int sum = 0;
        double average = 0;

        for (int i = 0; i<sequence.length; i++){
            sum = sum + sequence[i];
        }
        average = sum/sequence.length;
        average = (double)((int)(average*10000))/10000;
        return average;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    //@Test
    public void testLength() {
        int[] sequence = {1,2,3,4,5};
        int testLength = Untitled.length(sequence);
        int expectedLength = 5;
        assertEquals(testLength, expectedLength);
    }

    //@Test
    public void testSum() {
        int[] sequence = {1,2,3,4,5};
        double testSum = Untitled.average(sequence);
        int expectedSum = 15;
        assertEquals(testSum, expectedSum);
    }

    @Test 
    public void testAverage() {
        int[] sequence = {6,9,15,-2,92,11};
        double testAverage = Untitled.average(sequence);
        double expectedAverage = 21.83333;
        System.out.println(testAverage);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A81BD5BD4E buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYears.java
**************************************

public class LeapYears {
    
    public static boolean leap(int year) {
        boolean leapYear = false;
        if(year/4 == year/4.0){
            leapYear = true;
        }
        return leapYear;
    }
}

**************************************
LeapYearsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearsTest {
    
    @Test
    public void should_return_true_for_any_number(){
        assertTrue(LeapYears.leap(1));
    }

    @Test
    public void should_return_true_for_4(){
        assertTrue(LeapYears.leap(4));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYears.java
**************************************

public class LeapYears {
    
    public static boolean leap(int year) {
        boolean leapYear = false;
        if(year/4 == year/4.0){
            leapYear = true;
        }
        return leapYear;
    }
}

**************************************
LeapYearsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearsTest {
    
    @Test
    public void should_return_true_for_4(){
        assertTrue(LeapYears.leap(4));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A6FB20B8BF koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void hitch_hiker() {
    new FizzBuzz();        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A6FB20B8BF koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    void play (int arg){}
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
@RunWith(Theories.class)
public class FizzBuzzTest {
    @DataPoint public final int one = 1;
    @Theory
    public void returnitSelf(int argument){
        assertEquals(1, new FizzBuzz().play(argument));        
}
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    void play (int arg){}
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void protypeIt() {
    new FizzBuzz().play(1);        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A6FB20B8BF moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void prototype(){}
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A6BB5B287F buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

**************************************
YatziTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatziTest {

    @Test
    public void test_all_equal_numbers_and_yatzi_category_give_50_points(){
        Yatzi yatzi = new Yatzi();
        int expected = 50;
        int actual = yatzi.score(5, 5, 5, 5, 5, "yatzi");
        assertEquals(expected, actual);    
    }
}

**************************************
Yatzi.java
**************************************
class Yatzi {

    public int score(int one, int two, int three, int four, int five, String category) {
        return 50;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
YatziTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YatziTest {

    @Test
    public void test_all_equal_numbers_and_yatzi_category_give_50_points(){
        Yatzi yatzi = new Yatzi();
        int expected = 50;
        int actual = yatzi.score(5, 5, 5, 5, 5, "yatzi");
        assertEquals(expected, actual);    
    }
}

**************************************
Yatzi.java
**************************************
class Yatzi {

    public int score(int one, int two, int three, int four, int five, String category) {
        return 50;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: A56C96BB92 raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Minesweeper.java
**************************************

public class Minesweeper{
    
    public String[] parse() {
        return new String[1];
    }
}

**************************************
MinesweeperTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class MinesweeperTest {
    private String [] mineField = {
        "*...",
        "..*.",
        "...."
    };
    private Minesweeper parser = new Minesweeper();
    
    @Test
    public void testParse() {
        String[] hintField = parser.parse();
        assertTrue(hintField.length > 0);
        assertEquals("*xxx", hintField[0]);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Minesweeper.java
**************************************

public class Minesweeper{
    
    public String[] parse() {
        return new String[1];
    }
}

**************************************
MinesweeperTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class MinesweeperTest {
    private String [] mineField = {
        "*...",
        "..*.",
        "...."
    };
    private Minesweeper parser = new Minesweeper();
    
    @Test
    public void testParse() {
        String[] hintField = parser.parse();
        assertTrue(hintField.length > 0);
        //assertEquals("*xxx", hintField[0]);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9E1445C522 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
leapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class leapYearTest {
    
    @Test
    public void trueLeapYear() 
    {
        boolean expected = true;
        boolean actual = leapYear.IsLeapYear(2008);
        assertEquals(expected, actual);
    
    }
    
    @Test
    public void falseLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(2001);
        assertEquals(expected, actual);
    
    }

    @Test
    public void negativeLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(-200);
        assertEquals(expected, actual);
    
    }
@Test
    public void nullLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(null);
        assertEquals(expected, actual);
    
    }
@Test
    public void zeroLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(0);
        assertEquals(expected, actual);
    
    }

   }

**************************************
leapYear.java
**************************************
public class leapYear {
    
    public static boolean IsLeapYear(int year) {
        
       if(year % 4 ==0 && year % 100 !=0 )
           return true ;
       else if (year % 4 ==0 && year % 100 !=0 && year % 400 ==0 )
           return true ;
       else
           return false;
       
       
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
leapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class leapYearTest {
    
    @Test
    public void trueLeapYear() 
    {
        boolean expected = true;
        boolean actual = leapYear.IsLeapYear(2008);
        assertEquals(expected, actual);
    
    }
    
    @Test
    public void falseLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(2001);
        assertEquals(expected, actual);
    
    }

    @Test
    public void negativeLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(-200);
        assertEquals(expected, actual);
    
    }

  @Test
    public void zeroLeapYear() 
    {
        boolean expected = false;
        boolean actual = leapYear.IsLeapYear(0);
        assertEquals(expected, actual);
    
    }

   }

**************************************
leapYear.java
**************************************
public class leapYear {
    
    public static boolean IsLeapYear(int year) {
        
       if(year % 4 ==0 && year % 100 !=0 )
           return true ;
       else if (year % 4 ==0 && year % 100 !=0 && year % 400 ==0 )
           return true ;
       else
           return false;
       
       
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9CEC4302A3 moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Impl.java
**************************************
public class Impl {
    public static String answer(int i) {
        switch(i){
        case 0:
            return "._.\n|.|\n|_|";
        case 1:
            return "...\n..|\n..|";
        case 2:
            return "._.\n._|\n|_.";
        case 3:
            return "._.\n._|\n._|";
        case 4:
            return "...\n|_|\n..|";
        case 5:
            return "._.\n|_.\n._|";
        case 6:
            return "._.\n|_.\n|_|";
        case 7:
            return "._.\n..|\n..|";
        case 8:
            return "._.\n|_|\n|_|";
        case 9:
            return "._.\n|_|\n..|";
        default:
            return "";
        }
    }  
}

**************************************
ImplTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ImplTest {

    @Test
    public void zeroTest() {
        String zero = Impl.answer(0);
        assertEquals(zero, "._.\n|.|\n|_|");
    }
    
    @Test
    public void oneTest() {
        String s = Impl.answer(1);
        assertEquals(s, "...\n..|\n..|");
    }

    @Test
    public void twoTest() {
        String s = Impl.answer(2);
        assertEquals(s, "._.\n._|\n|_.");
    }
    
    @Test
    public void threeTest() {
        String s = Impl.answer(3);
        assertEquals(s, "._.\n._|\n._|");
    }

    @Test
    public void fourTest() {
        String s = Impl.answer(4);
        assertEquals(s, "...\n|_|\n..|");
    }

    @Test
    public void fiveTest() {
        String s = Impl.answer(5);
        assertEquals(s, "._.\n|_.\n._|");
    }

    @Test
    public void sixTest() {
        String s = Impl.answer(6);
        assertEquals(s, "._.\n|_.\n|_|");
    }

    @Test
    public void sevenTest() {
        String s = Impl.answer(7);
        assertEquals(s, "._.\n..|\n..|");
    }

    @Test
    public void eightTest() {
        String s = Impl.answer(8);
        assertEquals(s, "._.\n|_|\n|_|");
    }

    @Test
    public void nineTest() {
        String nine = Impl.answer(9);
        assertEquals(nine, "._.\n|_|\n..|");
    }

    @Test
    public void multiCharTest() {
        String big = Impl.answer(51);
        assertEquals(big,"._.\n|_.\n._|\n...\n..|\n..|");
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 25
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Impl.java
**************************************
public class Impl {
    public static String answer(int i) {
        switch(i){
        case 0:
            return "._.\n|.|\n|_|";
        case 1:
            return "...\n..|\n..|";
        case 2:
            return "._.\n._|\n|_.";
        case 3:
            return "._.\n._|\n._|";
        case 4:
            return "...\n|_|\n..|";
        case 5:
            return "._.\n|_.\n._|";
        case 6:
            return "._.\n|_.\n|_|";
        case 7:
            return "._.\n..|\n..|";
        case 8:
            return "._.\n|_|\n|_|";
        case 9:
            return "._.\n|_|\n..|";
        default:
            return "";
        }
    }  
}

**************************************
ImplTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ImplTest {

    @Test
    public void zeroTest() {
        String zero = Impl.answer(0);
        assertEquals(zero, "._.\n|.|\n|_|");
    }
    
    @Test
    public void oneTest() {
        String s = Impl.answer(1);
        assertEquals(s, "...\n..|\n..|");
    }

    @Test
    public void twoTest() {
        String s = Impl.answer(2);
        assertEquals(s, "._.\n._|\n|_.");
    }
    
    @Test
    public void threeTest() {
        String s = Impl.answer(3);
        assertEquals(s, "._.\n._|\n._|");
    }

    @Test
    public void fourTest() {
        String s = Impl.answer(4);
        assertEquals(s, "...\n|_|\n..|");
    }

    @Test
    public void fiveTest() {
        String s = Impl.answer(5);
        assertEquals(s, "._.\n|_.\n._|");
    }

    @Test
    public void sixTest() {
        String s = Impl.answer(6);
        assertEquals(s, "._.\n|_.\n|_|");
    }

    @Test
    public void sevenTest() {
        String s = Impl.answer(7);
        assertEquals(s, "._.\n..|\n..|");
    }

    @Test
    public void eightTest() {
        String s = Impl.answer(8);
        assertEquals(s, "._.\n|_|\n|_|");
    }

    @Test
    public void nineTest() {
        String nine = Impl.answer(9);
        assertEquals(nine, "._.\n|_|\n..|");
    }
/*
    @Test
    public void multiCharTest() {
        String big = Impl.answer(51);
        assertEquals(big,"._.\n|_.\n._|\n...\n..|\n..|");
    }
*/
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9CC4B6AA04 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }
    public static boolean multipleOfThree() {
        return true;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
    @Test
    public void multipleOfThree() {
        int expected = true;
        int actual = Untitled.multipleOfThree();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9CC4B6AA04 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }

    public static boolean multipleOfThree(int num) {
        if (num % 3 == 0)
            return true;
        else
            return false;
    }
     public static boolean multipleOfFive(int num) {
        if (num % 5 == 0)
            return true;
        else
            return false;
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void multipleOfThree() {
        boolean expected = true;
        boolean actual = Untitled.multipleOfThree(3);
        assertEquals(expected, actual);
    }

    @Test
    public void notMultipleOfFive() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfFive(3);
        assertEquals(expected, actual);
    }
    @Test
    public void notMultipleOfThree() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfThree(4);
        assertEquals(expected, actual);
    }
    @Test
    public void threeReturnsFizz() {
        String expected = "Fizz";
        String actual = Untitled.threeIsFizz(3);
        assertEquals(expected, actual);        
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }

    public static boolean multipleOfThree(int num) {
        if (num % 3 == 0)
            return true;
        else
            return false;
    }
     public static boolean multipleOfFive(int num) {
        if (num % 5 == 0)
            return true;
        else
            return false;
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void multipleOfThree() {
        boolean expected = true;
        boolean actual = Untitled.multipleOfThree(3);
        assertEquals(expected, actual);
    }

    @Test
    public void notMultipleOfFive() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfFive(3);
        assertEquals(expected, actual);
    }
    @Test
    public void notMultipleOfThree() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfThree(4);
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9CC4B6AA04 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 30
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }

    public static boolean multipleOfThree(int num) {
        if (num % 3 == 0)
            return true;
        else
            return false;
    }
     public static boolean multipleOfFive(int num) {
        if (num % 5 == 0)
            return true;
        else
            return false;
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void multipleOfThree() {
        boolean expected = true;
        boolean actual = Untitled.multipleOfThree(3);
        assertEquals(expected, actual);
    }

    @Test
    public void notMultipleOfFive() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfFive(3);
        assertEquals(expected, actual);
    }
    @Test
    public void notMultipleOfThree() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfThree(4);
        assertEquals(expected, actual);
    }
    @Test
    public void equalsFizz(){
        String expected = "Fizz";
        String actual = Untitled.isFizz(3);
        assertEquals(actual, expected);
}
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 30
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 6*9;
    }

    public static boolean multipleOfThree(int num) {
        if (num % 3 == 0)
            return true;
        else
            return false;
    }
     public static boolean multipleOfFive(int num) {
        if (num % 5 == 0)
            return true;
        else
            return false;
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void multipleOfThree() {
        boolean expected = true;
        boolean actual = Untitled.multipleOfThree(3);
        assertEquals(expected, actual);
    }

    @Test
    public void notMultipleOfFive() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfFive(3);
        assertEquals(expected, actual);
    }
    @Test
    public void notMultipleOfThree() {
        boolean expected = false;
        boolean actual = Untitled.multipleOfThree(4);
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 96BA230AEF frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GameOfLife.java
**************************************

public class GameOfLife {
    String state;

    public GameOfLife(String initState) {
        state = initState;
    }

    public String getState() {
        return state;
    }

    public String createNextGeneration() {
        return state;
    }
}

**************************************
GameOfLifeTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GameOfLifeTest {
    GameOfLife gof;

    @Before
    public void before() {
        gof = new GameOfLife("... .x. ...");
    }
   
    @Test
    public void testConstruction() {
        assertNotNull("Should be constructed", gof);
    }

    @Test
    public void testGetInitState() {
        assertEquals("Init state should be returned", gof.getState(),
                     "... .x. ...");
    }

    @Test
    public void testFirstGenerationState() {
        String result = gof.createNextGeneration();
        assertEquals("Correct first generation state should be returned",
                     gof.getState(),
                     "... ... ...");
    }
}

**************************************
World.java
**************************************
public class World {}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GameOfLife.java
**************************************

public class GameOfLife {
    String state;

    public GameOfLife(String initState) {
        state = initState;
    }

    public String getState() {
        return state;
    }

    public String createNextGeneration() {
        return state;
    }
}

**************************************
GameOfLifeTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GameOfLifeTest {
    GameOfLife gof;

    @Before
    public void before() {
        gof = new GameOfLife("... .x. ...");
    }
   
    @Test
    public void testConstruction() {
        assertNotNull("Should be constructed", gof);
    }

    @Test
    public void testGetInitState() {
        assertEquals("Init state should be returned", gof.getState(),
                     "... .x. ...");
    }

    @Test
    public void testFirstGenerationState() {
/*
        String result = gof.createNextGeneration();
        assertEquals("Correct first generation state should be returned",
                     gof.getState(),
                     "... ... ...");
*/
    }
}

**************************************
World.java
**************************************
public class World {}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 96777641A5 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
LeapYears.java
**************************************

public class LeapYears
{
    public static Boolean isLeapYears(int ai_year)
    {
        boolean lb_leap = false;
        if (ai_year % 100 == 0)
        {
            if (ai_year % 400 == 0)
            {
                lb_leap = true;
            }
        }
        else
        {
            if (ai_year % 4 == 0)
            {
                lb_leap = true;
            }
        }
        return lb_leap;
    }
}

**************************************
LeapYearsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearsTest {
    
    @Test
    public void hitch_hiker() {
        Boolean expected = false;
        int li_year = 1900;
        Boolean actual = LeapYears.isLeapYears(li_year);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYears.java
**************************************

public class LeapYears
{
    public static Boolean isLeapYears(int ai_year)
    {
        boolean lb_leap = false;
        if (ai_year % 100 == 0)
        {
            if (ai_year % 400 == 0)
            {
                lb_leap = true;
            }
        }
        else
        {
            if (ai_year % 4 == 0)
            {
                lb_leap = true;
            }
        }
        return lb_leap;
    }
}

**************************************
LeapYearsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearsTest {
    
    @Test
    public void hitch_hiker() {
        Boolean expected = false;
        int li_year = 1900;
        Boolean actual = LeapYears.isLeapYears(li_year);
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 94F7A6347E deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************
import java.util.ArrayList;

public class PrimeFactor{
    
    public static void main(String[] args) {
    
    }

    public static ArrayList<Integer> answer(int number) {
     ArrayList<Integer> factor = new ArrayList<Integer>();
        for (int i = 2; number > 1; i++)
          for (; number %i == 0; number /=i)
            factor.add(i);
     return factor;
    }
}


/*TODO LIST 
*
*	 9 -> [3,3]
*	12 -> [2,2,3]
*	15 -> [3,5]
*       25 -> [5,5]
*       57 -> [3,19]
*       41 -> [41]
*        0 ->  ?
*        1 ->  ?
*/

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void should_return_2_for_rank_2() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        actual = PrimeFactor.answer(2);
        assertEquals(expected, actual);
    }

        @Test
    public void should_return_3_for_rank_3() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(3);
        actual = PrimeFactor.answer(3);
        assertEquals(expected, actual);
    }
    
      @Test
    public void should_return_2_2_for_rank_4() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        expected.add(2);
        actual = PrimeFactor.answer(4);
        assertEquals(expected, actual);
    }

      @Test
    public void should_return_2_3_for_rank_6() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        expected.add(3);
        actual = PrimeFactor.answer(6);
        assertEquals(expected, actual);
    }
      @Test
    public void should_return_3_3_for_rank_9() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(3);
        expected.add(3);
        actual = PrimeFactor.answer(9);
        assertEquals(expected, actual);
    }

          @Test
    public void should_return_3_3_for_rank_9() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(3);
        expected.add(3);
        actual = PrimeFactor.answer(9);
        assertEquals(expected, actual);
    }

              @Test
    public void should_return_2143_for_rank_2143() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2143);
        actual = PrimeFactor.answer(2143);
        assertEquals(expected, actual);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactor.java
**************************************
import java.util.ArrayList;

public class PrimeFactor{
    
    public static void main(String[] args) {
    
    }

    public static ArrayList<Integer> answer(int number) {
     ArrayList<Integer> factor = new ArrayList<Integer>();
        for (int i = 2; number > 1; i++)
          for (; number %i == 0; number /=i)
            factor.add(i);
     return factor;
    }
}


/*TODO LIST 
*
*	 9 -> [3,3]
*	12 -> [2,2,3]
*	15 -> [3,5]
*       25 -> [5,5]
*       57 -> [3,19]
*       41 -> [41]
*        0 ->  ?
*        1 ->  ?
*/

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;

public class UntitledTest {
    
    @Test
    public void should_return_2_for_rank_2() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        actual = PrimeFactor.answer(2);
        assertEquals(expected, actual);
    }

        @Test
    public void should_return_3_for_rank_3() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(3);
        actual = PrimeFactor.answer(3);
        assertEquals(expected, actual);
    }
    
      @Test
    public void should_return_2_2_for_rank_4() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        expected.add(2);
        actual = PrimeFactor.answer(4);
        assertEquals(expected, actual);
    }

      @Test
    public void should_return_2_3_for_rank_6() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2);
        expected.add(3);
        actual = PrimeFactor.answer(6);
        assertEquals(expected, actual);
    }
      @Test
    public void should_return_3_3_for_rank_9() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(3);
        expected.add(3);
        actual = PrimeFactor.answer(9);
        assertEquals(expected, actual);
    }

              @Test
    public void should_return_2143_for_rank_2143() {
        ArrayList<Integer> expected = new ArrayList<Integer>();
        ArrayList<Integer> actual = new ArrayList<Integer>();
        expected.add(2143);
        actual = PrimeFactor.answer(2143);
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 944DF4D2DE frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 29
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    static final int FIRST_IS_THE_LESS  = -1;
    static final int SECOND_IS_THE_LESS = 1;
    static final int STRINGS_ARE_EQUAL  = 0;

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void check_mo_names_are_null() {
        String moName1 = null;
        String moName2 = null;
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(STRINGS_ARE_EQUAL, answer);
    }

    @Test
    public void check_first_mo_name_is_null()
    {
        String firstMoName = null;
        String secondMoName = "moName";
        int answer = Hiker.compareMoNames(firstMoName, secondMoName);
        assertEquals(FIRST_IS_THE_LESS, answer);
    }

    @Test
    public void check_second_mo_name_is_null()
    {
        int expected = 1;
        String firstMoName = "moName";
        String secondMoName = null;
        int answer = Hiker.compareMoNames(firstMoName, secondMoName);
        assertEquals(expected, answer);
    }

    @Test
    public void check_mo_names_are_equal_case_sensitive() {
        int expected = 0;
        String moName1 = "alma1";
        String moName2 = "alma1";
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(expected, answer);
    }

    @Test
    public void check_mo_names_has_simple_difference_case_sensitive() {
        int expected = -1;
        String moName1 = "alma1";
        String moName2 = "alma2";
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(expected, answer);
    }

    @Test
    public void check_mo_names_has_complicate_difference_case_sensitive() {
        int expected = 1;
        String moName1 = "alma10";
        String moName2 = "alma2";
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(expected, answer);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 7;
    }

    public static int compareMoNames(String left, String right) {
        if (left == null && right == null) {
            return 0;
        } else if (left == null) {
            return -1;
        } else if (right == null) {
            return 1;
        }

        int minLength = Math.min(left.length(), right.length());
        for (int index = 0; index < minLength; ++index ) {
            char leftChar = left.charAt(index);
            char rightChar = right.charAt(index);
            if (leftChar != rightChar) {
                return (leftChar < rightChar) ? -1 : 1;
            }
        }
        if (left.length() > minLength) {
            return 1;
        } else if (right.length() > minLength) {
            return -1;
        }
        return 0;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 29
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    static final int FIRST_IS_THE_LESS  = -1;
    static final int SECOND_IS_THE_LESS = 1;
    static final int STRINGS_ARE_EQUAL  = 0;

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void check_mo_names_are_null() {
        String moName1 = null;
        String moName2 = null;
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(STRINGS_ARE_EQUAL, answer);
    }

    @Test
    public void check_first_mo_name_is_null()
    {
        String firstMoName = null;
        String secondMoName = "moName";
        int answer = Hiker.compareMoNames(firstMoName, secondMoName);
        assertEquals(FIRST_IS_THE_LESS, answer);
    }

    @Test
    public void check_second_mo_name_is_null()
    {
        String firstMoName = "moName";
        String secondMoName = null;
        int answer = Hiker.compareMoNames(firstMoName, secondMoName);
        assertEquals(SECOND_IS_THE_LESS, answer);
    }

    @Test
    public void check_mo_names_are_equal_case_sensitive() {
        String moName1 = "alma1";
        String moName2 = "alma1";
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(STRINGS_ARE_EQUAL, answer);
    }

    @Test
    public void check_mo_names_has_simple_difference_case_sensitive() {
        String moName1 = "alma1";
        String moName2 = "alma2";
        int answer = Hiker.compareMoNames(moName1, moName2);
        assertEquals(FIRST_IS_THE_LESS, answer);
    }

//    @Test
//    public void check_mo_names_has_complicate_difference_case_sensitive() {
//        String moName1 = "alma10";
//        String moName2 = "alma2";
//        int answer = Hiker.compareMoNames(moName1, moName2);
//        assertEquals(SECOND_IS_THE_LESS, answer);
//    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 7;
    }

    public static int compareMoNames(String left, String right) {
        if (left == null && right == null) {
            return 0;
        } else if (left == null) {
            return -1;
        } else if (right == null) {
            return 1;
        }

        int minLength = Math.min(left.length(), right.length());
        for (int index = 0; index < minLength; ++index ) {
            char leftChar = left.charAt(index);
            char rightChar = right.charAt(index);
            if (leftChar != rightChar) {
                return (leftChar < rightChar) ? -1 : 1;
            }
        }
        if (left.length() > minLength) {
            return 1;
        } else if (right.length() > minLength) {
            return -1;
        }
        return 0;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 92A19267EE frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzyBuzzer.java
**************************************

public class FizzyBuzzer {
    
    public static int answer(int given) {
        return given;
    }
}

**************************************
FizzyBuzzerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzyBuzzerTest {
    
    @Test
    public void hitch_hiker() {

        int expected = 6 * 9;

        int actual = FizzyBuzzer.answer();

        assertEquals(expected, actual);
    }

    @Test
    public void OneAndTwoWork() {

    int answer = FizzyBuzzer.answer(1);

    assertEquals(1,answer);

    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzyBuzzer.java
**************************************

public class FizzyBuzzer {
    
    public static int answer(int given) {
        return given;
    }
}

**************************************
FizzyBuzzerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzyBuzzerTest {
    
    @Test
    public void OneAndTwoWork() {

    int answer = FizzyBuzzer.answer(1);

    assertEquals(1,answer);

    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 9102504448 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYear.java
**************************************

public class LeapYear{
    
    public static boolean isLeapYear(int theYear) {
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest{
    
    @Test
    public void isValidLeapYear() {
        int trueLeapYear = 2000;
        int nonLeapYear = 2001;
 
        assertTrue(LeapYear.isLeapYear(trueLeapYear) );
        assertFalse(LeapYear.isLeapYear(nonLeapYear) );
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYear.java
**************************************

public class LeapYear{
    
    public static boolean isLeapYear(int theYear) {
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest{
    
    @Test
    public void isValidLeapYear() {
        int trueLeapYear = 2000;
        int nonLeapYear = 2001;
 
        assertTrue(LeapYear.isLeapYear(trueLeapYear) );
       // assertFalse(LeapYear.isLeapYear(nonLeapYear) );
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 90293612E9 moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GOF.java
**************************************

public class GOF {
    Boolean[][] life;

    public static int countLivingNeighbours(int x, int y) {
        return 0;
}


}

**************************************
GOFTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GOFTest {    
  
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = GOF.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void test_neighbours1() {
        assertEquals(GOF.countLivingNeighbours(0,0), 0);
        
    }

    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GOF.java
**************************************

public class GOF {
    Boolean[][] life;

    public static int countLivingNeighbours(int x, int y) {
        return 0;
}


}

**************************************
GOFTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GOFTest {    
  
    @Test
    public void test_neighbours1() {
        assertEquals(GOF.countLivingNeighbours(0,0), 0);
        
    }

    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 8D372AE12C gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void test_empty() {
        boolean[][] grid = new boolean[4][8];

        System.out.println(grid[0][0]); 
        

    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 8D372AE12C snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Board.java
**************************************
public class Board
{
    boolean[][] grid;
    int width;
    int height;

    public Board(int height, int width) 
    {
        this.width = width;
        this.height = height;
        grid = new boolean[height][width];        
    }

//    private Board(boolean[][] grid)
//    {
//        boolean[][] newGrid = new 
//    }

    public Board next()
    {
        // TODO make this not suck

        return this;
    }

    public String toString()
    {
        StringBuilder buffer = new StringBuilder(height+" "+width+"\n");
        for(boolean[] row: grid)
        {
            for(boolean cell: row)
            {
                buffer.append(cell? "*" : ".");
            }
            buffer.append("\n");
        }
        return buffer.toString();
    }
}

**************************************
BoardTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BoardTest
{
    @Test
    public void testEmptyBoardCreation()
    {
        Board empty = new Board(2, 3);
        String expected = "2 3\n...\n...\n";
        assertEquals(expected, empty.toString());
    }

    @Test
    public void testStepEmptyBoard()
    {
        Board empty = new Board(2, 3);
        String expected = "2 3\n...\n...\n";
        assertEquals(expected, empty.next().toString());
    }

    @Test
    public void thisGridIsNotThatGrid()
    {
        Board thisBoard = new Board(2, 3);
        Board thatBoard = this.next();
        assertTrue("New board is the same board", !(thisBoard == thatBoard);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Board.java
**************************************
public class Board
{
    boolean[][] grid;
    int width;
    int height;

    public Board(int height, int width) 
    {
        this.width = width;
        this.height = height;
        grid = new boolean[height][width];        
    }

//    private Board(boolean[][] grid)
//    {
//        boolean[][] newGrid = new 
//    }

    public Board next()
    {
        // TODO make this not suck

        return this;
    }

    public String toString()
    {
        StringBuilder buffer = new StringBuilder(height+" "+width+"\n");
        for(boolean[] row: grid)
        {
            for(boolean cell: row)
            {
                buffer.append(cell? "*" : ".");
            }
            buffer.append("\n");
        }
        return buffer.toString();
    }
}

**************************************
BoardTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BoardTest
{
    @Test
    public void testEmptyBoardCreation()
    {
        Board empty = new Board(2, 3);
        String expected = "2 3\n...\n...\n";
        assertEquals(expected, empty.toString());
    }

    @Test
    public void testStepEmptyBoard()
    {
        Board empty = new Board(2, 3);
        String expected = "2 3\n...\n...\n";
        assertEquals(expected, empty.next().toString());
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 8B7360F4EA moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void super_test() {
        assertTrue(true);
        assertFalse(true);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    //@Test
    //public void hitch_hiker() {
    //    int expected = 6 * 9;
    //    int actual = Untitled.answer();
    //    assertEquals(expected, actual);
    //}

    @Test
    public void super_test() {
        assertTrue(true);
        assertFalse(false);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 8B7360F4EA moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 28
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public String calculateFizzBuzz(int inputNumber)
    {
        String returnValue = "";
        if(inputNumber % 3 == 0)
        {
            returnValue = returnValue + "Fizz";
        }
        else if(inputNumber % 5 == 0)
        {
            returnValue = returnValue + "Buzz";
        }
       
        return returnValue;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    private Untitled systemUnderTest;

    @Before
    public void setUp()
    {
        this.systemUnderTest = new Untitled();
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnTheNumber() 
    {
        int numberToBeSent = 1;
        String expectedResult = "1";
        assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));       
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzWhenThreeIsInputed() 
    {
        int numberToBeSent = 3;
        String expectedResult = "Fizz";
        assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnBuzzWhenFiveIsInputed()
    {
        int numberToBeSent = 5;
        String expectedResult = "Buzz";
        assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnBuzzWhenAMultipleOfFiveIsInputed()
    {
        int[] numbersToBeSent = {5, 10, 20, 25};
        
        String expectedResult = "Buzz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzWhenAMultipleOfThreeIsInputed()
    {
        int[] numbersToBeSent = {3, 9, 12, 18};
        
        String expectedResult = "Fizz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzBuzzWhenAMultipleOfBoth5and3isInputted()
    {
        int[] numbersToBeSent = {15, 30, 45, 60};
        
        String expectedResult = "FizzBuzz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 28
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public String calculateFizzBuzz(int inputNumber)
    {
        String returnValue = "";
        if(inputNumber % 3 == 0)
        {
            returnValue = returnValue + "Fizz";
        }
        if(inputNumber % 5 == 0)
        {
            returnValue = returnValue + "Buzz";
        }
       
        return returnValue;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    private Untitled systemUnderTest;

    @Before
    public void setUp()
    {
        this.systemUnderTest = new Untitled();
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnTheNumber() 
    {
        int numberToBeSent = 1;
        String expectedResult = "1";
        //assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));       
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzWhenThreeIsInputed() 
    {
        int numberToBeSent = 3;
        String expectedResult = "Fizz";
        assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnBuzzWhenFiveIsInputed()
    {
        int numberToBeSent = 5;
        String expectedResult = "Buzz";
        assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnBuzzWhenAMultipleOfFiveIsInputed()
    {
        int[] numbersToBeSent = {5, 10, 20, 25};
        
        String expectedResult = "Buzz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzWhenAMultipleOfThreeIsInputed()
    {
        int[] numbersToBeSent = {3, 9, 12, 18};
        
        String expectedResult = "Fizz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }

    @Test
    public void fizzBuzzCalculatorShouldReturnFizzBuzzWhenAMultipleOfBoth5and3isInputted()
    {
        int[] numbersToBeSent = {15, 30, 45, 60};
        
        String expectedResult = "FizzBuzz";
        for(int i = 0; i < numbersToBeSent.length; i++)
        {
            int numberToBeSent = numbersToBeSent[i];

            assertEquals(expectedResult, this.systemUnderTest.calculateFizzBuzz(numberToBeSent));
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 8852FF577B wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return adder();
    }

    private static int adder() {
        return 10 + 10 + 10 + 2;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************


**************************************
FizzBuzzTest.java
**************************************




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 87C793D1F4 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanNumbers.java
**************************************

public class RomanNumbers{
    
    public static int answer() {
        return 42;
    }
}

**************************************
RomanNumbersTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumbersTest{
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanNumbers.java
**************************************

public class RomanNumbers{
    
    public static int answer() {
        return 42;
    }
}

**************************************
RomanNumbersTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumbersTest{
    
    @Test
    public void input() {
        assertNotNull(RomanNumbers.answer());
       
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 873773632B hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LCD.java
**************************************
import java.util.*;

public class LCD {
    
    private List<String> displayData = null;

    public LCD(){
        displayData = new ArrayList<String>(3);
        displayData.add("");
        displayData.add("");
        displayData.add("");
    }

    public List<String> show(int[] number){
        for(int i : number)
            addDigit(i);
        return displayData;
    }

    public void addDigit(int digit){
        if(digit == 0){
        displayData.set(0, displayData.get(0) + "._.");
        displayData.set(1, displayData.get(1) + "|.|");
        displayData.set(2, displayData.get(2) + "|_|");
        }
        if(digit == 1){
        displayData.set(0, displayData.get(0) + "...");
        displayData.set(1, displayData.get(1) + "..|");
        displayData.set(2, displayData.get(2) + "..|");
        }
    }

    public List<String> display(){
        return displayData;
    }
}

**************************************
WalkingSkeletonTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WalkingSkeletonTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    //@Test
    public void iShoudSee777() {
        assertEquals("._.._.._.", lcd.show(new int[]{7,7,7}).get(0));
        assertEquals("..|..|..|", lcd.show(new int[]{7,7,7}).get(1));
        assertEquals("..|..|..|", lcd.show(new int[]{7,7,7}).get(2));
    }

    //@Test
    public void iShoudSee177() {
        assertEquals("...._.._.", lcd.show(new int[]{1,7,7}).get(0));
        assertEquals("..|..|..|", lcd.show(new int[]{1,7,7}).get(1));
        assertEquals("..|..|..|", lcd.show(new int[]{1,7,7}).get(2));
    }
}

**************************************
SingleDigitsUnitTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class SingleDigitsUnitTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    
    @Test
    public void iCanAddZeroToDispalay() {
        lcd.addDigit(0);
        assertEquals("._.", lcd.display().get(0));
        assertEquals("|.|", lcd.display().get(1));
        assertEquals("|_|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneToDispalay() {
        lcd.addDigit(1);
        assertEquals("...", lcd.display().get(0));
        assertEquals("..|", lcd.display().get(1));
        assertEquals("..|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneAndOneToDispalay() {
        lcd.addDigit(1);
        lcd.addDigit(1);
        assertEquals("......", lcd.display().get(0));
        assertEquals("..|..|", lcd.display().get(1));
        assertEquals("..|..|", lcd.display().get(2));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LCD.java
**************************************
import java.util.*;

public class LCD {
    
    private List<String> displayData = null;

    public LCD(){
        displayData = new ArrayList<String>(3);
        displayData.add("");
        displayData.add("");
        displayData.add("");
    }

    public List<String> show(int[] number){
        for(int i : number)
            addDigit(i);
        return displayData;
    }

    public void addDigit(int digit){
        if(digit == 0){
        displayData.set(0, displayData.get(0) + "._.");
        displayData.set(1, displayData.get(1) + "|.|");
        displayData.set(2, displayData.get(2) + "|_|");
        }
        if(digit == 1){
        displayData.set(0, displayData.get(0) + "...");
        displayData.set(1, displayData.get(1) + "..|");
        displayData.set(2, displayData.get(2) + "..|");
        }
    }

    public List<String> display(){
        return displayData;
    }
}

**************************************
WalkingSkeletonTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WalkingSkeletonTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    @Test
    public void iShoudSee777() {
        //assertEquals("._.._.._.", lcd.show(new int[]{7,7,7}).get(0));
        //assertEquals("..|..|..|", lcd.show(new int[]{7,7,7}).get(1));
        //assertEquals("..|..|..|", lcd.show(new int[]{7,7,7}).get(2));
    }

    @Test
    public void iShoudSee177() {
        //assertEquals("...._.._.", lcd.show(new int[]{1,7,7}).get(0));
        //assertEquals("..|..|..|", lcd.show(new int[]{1,7,7}).get(1));
        //assertEquals("..|..|..|", lcd.show(new int[]{1,7,7}).get(2));
    }
}

**************************************
SingleDigitsUnitTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class SingleDigitsUnitTest {

    private LCD lcd = null;
        
    @Before
    public void setup(){
        lcd = new LCD();
    }

    
    @Test
    public void iCanAddZeroToDispalay() {
        lcd.addDigit(0);
        assertEquals("._.", lcd.display().get(0));
        assertEquals("|.|", lcd.display().get(1));
        assertEquals("|_|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneToDispalay() {
        lcd.addDigit(1);
        assertEquals("...", lcd.display().get(0));
        assertEquals("..|", lcd.display().get(1));
        assertEquals("..|", lcd.display().get(2));
    }

    @Test
    public void iCanAddOneAndOneToDispalay() {
        lcd.addDigit(1);
        lcd.addDigit(1);
        assertEquals("......", lcd.display().get(0));
        assertEquals("..|..|", lcd.display().get(1));
        assertEquals("..|..|", lcd.display().get(2));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 85FBDA0E59 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    private char widest;

    public Diamond(char widest) {
        this.widest = widest;
    }

    public String[] getLines() {
        return new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        };
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void diamond_c() {

        assertArrayEquals(
            new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
            },
            new Diamond('C').getLines());
    }

    @Test
    public void widestChar(){

     String[] actual=  new Diamond('C').getLines();
    int largest = 0;
    String widestChar="C";
    for(String str:actual){
        if(str.length() > largest) {
                largest = str.length();
              widestChar=str;
            }
      }

    assertEquals("C",widestChar);
    }

  @Test
 public void startEndCharTest(){
    
    String[] actual = new Diamond('C').getLines();
    
    System.out.println(actual[actual.length-1]);
        assertTrue(actual[0].equals(actual[actual.length-1]));
      
    


    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    private char widest;

    public Diamond(char widest) {
        this.widest = widest;
    }

    public String[] getLines() {
        return new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        };
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void diamond_c() {

        assertArrayEquals(
            new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
            },
            new Diamond('C').getLines());
    }

    @Test
    public void widestChar(){

     String[] actual=  new Diamond('C').getLines();
    int largest = 0;
    String widestChar="C";
    for(String str:actual){
        if(str.length() > largest) {
                largest = str.length();
              widestChar=str;
            }
      }

   // assertEquals("C",widestChar);
    }

  @Test
 public void startEndCharTest(){
    
    String[] actual = new Diamond('C').getLines();
    
    System.out.println(actual[actual.length-1]);
        assertTrue(actual[0].equals(actual[actual.length-1]));
      
    


    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 85FBDA0E59 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    private char widest;

    public Diamond(char widest) {
        this.widest = widest;
    }

    public String[] getLines() {
        return new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        };
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void diamond_c() {

        assertArrayEquals(
            new String[] { 
                "  A  ",
                " B B ",
                "C...C",
                " B B ",
                "  A  "
            },
            new Diamond('C').getLines());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    private char widest;

    public Diamond(char widest) {
        this.widest = widest;
    }

    public String[] getLines() {
        return new String[] { 
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        };
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void diamond_c() {

        diamondArrayCompare(
            new String[] { 
                "  A  ",
                " B B ",
                "C...C",
                " B B ",
                "  A  "
            },
            new Diamond('C').getLines());

    }

    private void diamondArrayCompare(String[] expected, String[] actual) {
        System.out.println("Comparing arrays");
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 84D8B7BDB2 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzzGenerator.java
**************************************

public class FizzBuzzGenerator {
    

    public static int answer() {
        return 42;
    }
    
    public String getNumberOutputMessage(int num) {
    
        return String.valueOf(num); 
    }


}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void numberOneOutputTest() {
        FizzBuzzGenerator fizzFuzz= new FizzBuzzGenerator();
        String output = fizzFuzz.getNumberOutputMessage(1);

        assertEquals("1",output);
    }

    @Test
    public void numberThreeOutputTest() {
    }

    @Test
    public void numberFiveOutputTest() {
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzzGenerator.java
**************************************

public class FizzBuzzGenerator {
    

    public static int answer() {
        return 42;
    }
    
    public String getNumberOutputMessage(int num) {
    
        return String.valueOf(num); 
    }


}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
   
    @Test
    public void numberOneOutputTest() {
        FizzBuzzGenerator fizzFuzz= new FizzBuzzGenerator();
        String output = fizzFuzz.getNumberOutputMessage(1);

        assertEquals("1",output);
    }

    @Test
    public void numberThreeOutputTest() {
    }

    @Test
    public void numberFiveOutputTest() {
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 826A1406DF lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stat.java
**************************************

public class Stat{
    
    public static int getMinVal(int seq[]) {
        return -2;
    }
}

**************************************
StatTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatTest {
    
    @Test
    public void hitch_hiker() {
        int seq[] = {-2, 3, 5, 100};
        Stat.getMinVal(seq);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 826A1406DF lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stat.java
**************************************

public class Stat{
    
    public static int getMinVal(int seq[]) {
        return -2;
    }
}

**************************************
StatTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatTest {
    
    @Test
    public void getMinimumValue() {
        int seq[] = {-2, 3, 5, 100};
        int min = Stat.getMinVal(seq);
        assertEquals(-2, min);
        seq[] = {3, 5, 100};
        min = Stat.getMinVal(seq);
        assertEquals(3, min);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stat.java
**************************************

public class Stat{
    
    public static int getMinVal(int seq[]) {
        return -2;
    }
}

**************************************
StatTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatTest {
    
    @Test
    public void getMinimumValue() {
        int seq[] = {-2, 3, 5, 100};
        int min = Stat.getMinVal(seq);
        assertEquals(-2, min);
        //seq = {3, 5, 100};
        //min = Stat.getMinVal(seq);
        //assertEquals(3, min);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 80261E664B snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
DoorStateTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorStateTest {
    
    @Test
    public void stoppingAtDoorWhenClosedShouldOpenIt() {
        Door door = Door.getInstance();
        assertFalse(door.isOpen());
        door.stop();
        assertTrue(door.isOpen());
    }
}

**************************************
Door.java
**************************************
public class Door {
   private boolean open;

   private Door(boolean open) {
       this.open = open;
   }

   private Door(){
      this.open = false;
   }

   public static Door getInstance() {
      return new Door();
   }

   public boolean isOpen() {
      return this.open;
   }

   public Door stop() {
      return new Door(this.isOpen() ? false : true);
   }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
DoorStateTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorStateTest {
    
    @Test
    public void stoppingAtDoorWhenClosedShouldOpenIt() {
        Door door = Door.getInstance();
        assertFalse(door.isOpen());
        door.stop();
        //assertTrue(door.isOpen());
    }
}

**************************************
Door.java
**************************************
public class Door {
   private boolean open;

   private Door(boolean open) {
       this.open = open;
   }

   private Door(){
      this.open = false;
   }

   public static Door getInstance() {
      return new Door();
   }

   public boolean isOpen() {
      return this.open;
   }

   public Door stop() {
      return new Door(this.isOpen() ? false : true);
   }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7F6EC6698F panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Team.java
**************************************
import java.util.*;

public class Team {
    
    public Team(String colour) {
        if (colour == null)
            throw new IllegalArgumentException();
        if ("".equals(colour))
            throw new IllegalArgumentException();
        
        this.colour = colour;
        this.trays = new ArrayList<Tray>();
    }

    public void linkUpstream(Team team) {
        this.upstream = team;
    }

    public void upstreamPortal(Tray empty) {
        trays.remove(empty);
        upstream.add(empty);
    }

    public String getColour() {
        return this.colour;
    }

    public int getTrayCount() {
        return trays.size();
    }

    public Tray getTray(int index) {
        return trays.get(index);
    }

    public Tray createTray() {
        Tray empty = new Tray(getColour());
        trays.add(empty);
        return empty;
    }
    
    public void add(Tray tray) {
        trays.add(tray);
    }

    private String colour;
    private ArrayList<Tray> trays;
    private Team upstream;
}

**************************************
OnesGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OnesGameTest {
    
    @Test
    public void green_team_passes_empty_green_tray_upstream_to_team_red() {
        Team green = new Team("green");
        Team red = new Team("red");

        green.linkUpstream(red);
        Tray empty = green.createTray();

        assertEquals(1, green.getTrayCount());
        assertEquals(0, red.getTrayCount());
        green.upstreamPortal(empty);                
        assertEquals(0, green.getTrayCount());
        assertEquals(1, red.getTrayCount());

        assertEquals("green", red.getTray(0).getColour());
    }

    @Test
    public void green_team_adds_work_item_to_empty_tray() {
        Team green = new Team("green");
        Tray tray = green.createTray();
        WorkItem work = new WorkItem(3);

        tray.add(work);
        assertFalse(tray.isEmpty());
        assertEquals(work, tray.getWorkItem());
    }
}

**************************************
Tray.java
**************************************

public class Tray {

    public Tray(String colour) {
        if (colour == null)
            throw new IllegalArgumentException();
        if ("".equals(colour))
            throw new IllegalArgumentException();

        this.colour = colour;
        this.workItem = null;
    }

    public String getColour() {
        return colour;
    }

    public boolean isEmpty() {    
        return this.workItem == null;
    }

    public WorkItem getWorkItem() {
        return this.workItem;
    }

    public void add(WorkItem workItem) {
        this.workItem = workItem;
    }

    private String colour;
    private WorkItem workItem;
}

**************************************
WorkItem.java
**************************************

public class WorkItem {

    public static int MAX_SIZE = 12;

    public WorkItem(int size) {
        if (size == 0)
            throw new IllegalArgumentException();
        if (size > MAX_SIZE) 
            throw new IllegalArgumentException();

        this.size = size;
    }

    public int getSize() {
        return this.size;
    }

    private int size;
}

**************************************
WorkItemTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WorkItemTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_work_item_with_zero_size_throws() {
        new WorkItem(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void creating_work_item_with_size_greater_than_max_throws() {
        new WorkItem(WorkItem.MAX_SIZE + 1);
    }

    @Test
    public void work_has_size_specified_at_birth() {
        for (int size = 1; size < WorkItem.MAX_SIZE; size++) {
            WorkItem target = new WorkItem(size);
            assertEquals(size, target.getSize());
        }
    }

}

**************************************
TrayTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TrayTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_tray_with_null_colour_throws() {
        new Tray(null);
    }

    @Test(expected = IllegalArgumentException.class) 
    public void creating_tray_with_empty_colour_throws() {
        new Tray("");
    }
    
    @Test
    public void tray_has_colour_specified_in_ctor() {
        Tray tray = new Tray("green");
        assertEquals("green", tray.getColour());
    }

    @Test
    public void tray_is_initially_empty_and_does_not_contain_a_work_item() {
        Tray tray = new Tray("green");
        assertTrue(tray.isEmpty());
        assertEquals(null, tray.getWorkItem());
    }
        
    @Test
    public void after_adding_work_item_to_empty_tray_its_not_empty_and_has_the_added_work_item() {
        Tray tray = new Tray("green");
        WorkItem item = new WorkItem(3);
        tray.add(item);
        assertFalse(tray.isEmpty());
        assertEquals(item, tray.getWorkItem());
    }

    @Test(expected = IllegalArgumentException.class)
    public void adding_work_item_to_non_empty_tray_throws() {
        Tray tray = new Tray("green");
        tray.add(new WorkItem(3));
        tray.add(new WorkItem(5));
    }
}

**************************************
TeamTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TeamTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_team_with_null_colour_throws() {
        new Team(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void creating_team_with_empty_colour_throws() {
        new Team("");
    }

    @Test
    public void team_has_colour_it_is_created_with() {
        Team green = new Team("green");
        assertEquals("green", green.getColour());
    }
    
    @Test
    public void team_initially_has_no_trays() {
        Team green = new Team("green");
        assertEquals(0, green.getTrayCount());
    }

    @Test
    public void tray_created_by_team_has_same_colour_as_team() {    
        Team green = new Team("green");
        Tray tray = green.createTray();
        assertEquals("green", tray.getColour());
    }

    @Test
    public void tray_created_by_team_is_in_teams_trays() {
        Team green = new Team("green");
        Tray tray = green.createTray();
        assertEquals(1, green.getTrayCount());
        assertEquals(tray, green.getTray(0));        
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Team.java
**************************************
import java.util.*;

public class Team {
    
    public Team(String colour) {
        if (colour == null)
            throw new IllegalArgumentException();
        if ("".equals(colour))
            throw new IllegalArgumentException();
        
        this.colour = colour;
        this.trays = new ArrayList<Tray>();
    }

    public void linkUpstream(Team team) {
        this.upstream = team;
    }

    public void upstreamPortal(Tray empty) {
        trays.remove(empty);
        upstream.add(empty);
    }

    public String getColour() {
        return this.colour;
    }

    public int getTrayCount() {
        return trays.size();
    }

    public Tray getTray(int index) {
        return trays.get(index);
    }

    public Tray createTray() {
        Tray empty = new Tray(getColour());
        trays.add(empty);
        return empty;
    }
    
    public void add(Tray tray) {
        trays.add(tray);
    }

    private String colour;
    private ArrayList<Tray> trays;
    private Team upstream;
}

**************************************
OnesGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OnesGameTest {
    
    @Test
    public void green_team_passes_empty_green_tray_upstream_to_team_red() {
        Team green = new Team("green");
        Team red = new Team("red");

        green.linkUpstream(red);
        Tray empty = green.createTray();

        assertEquals(1, green.getTrayCount());
        assertEquals(0, red.getTrayCount());
        green.upstreamPortal(empty);                
        assertEquals(0, green.getTrayCount());
        assertEquals(1, red.getTrayCount());

        assertEquals("green", red.getTray(0).getColour());
    }

    @Test
    public void green_team_adds_work_item_to_empty_tray() {
        Team green = new Team("green");
        Tray tray = green.createTray();
        WorkItem work = new WorkItem(3);

        tray.add(work);
        assertFalse(tray.isEmpty());
        assertEquals(work, tray.getWorkItem());
    }
}

**************************************
Tray.java
**************************************

public class Tray {

    public Tray(String colour) {
        if (colour == null)
            throw new IllegalArgumentException();
        if ("".equals(colour))
            throw new IllegalArgumentException();

        this.colour = colour;
        this.workItem = null;
    }

    public String getColour() {
        return colour;
    }

    public boolean isEmpty() {    
        return this.workItem == null;
    }

    public WorkItem getWorkItem() {
        return this.workItem;
    }

    public void add(WorkItem workItem) {
        if (!isEmpty()) {
            throw new IllegalArgumentException();
        }
        this.workItem = workItem;
    }

    private String colour;
    private WorkItem workItem;
}

**************************************
WorkItem.java
**************************************

public class WorkItem {

    public static int MAX_SIZE = 12;

    public WorkItem(int size) {
        if (size == 0)
            throw new IllegalArgumentException();
        if (size > MAX_SIZE) 
            throw new IllegalArgumentException();

        this.size = size;
    }

    public int getSize() {
        return this.size;
    }

    private int size;
}

**************************************
WorkItemTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class WorkItemTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_work_item_with_zero_size_throws() {
        new WorkItem(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void creating_work_item_with_size_greater_than_max_throws() {
        new WorkItem(WorkItem.MAX_SIZE + 1);
    }

    @Test
    public void work_has_size_specified_at_birth() {
        for (int size = 1; size < WorkItem.MAX_SIZE; size++) {
            WorkItem target = new WorkItem(size);
            assertEquals(size, target.getSize());
        }
    }

}

**************************************
TrayTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TrayTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_tray_with_null_colour_throws() {
        new Tray(null);
    }

    @Test(expected = IllegalArgumentException.class) 
    public void creating_tray_with_empty_colour_throws() {
        new Tray("");
    }
    
    @Test
    public void tray_has_colour_specified_in_ctor() {
        Tray tray = new Tray("green");
        assertEquals("green", tray.getColour());
    }

    @Test
    public void tray_is_initially_empty_and_does_not_contain_a_work_item() {
        Tray tray = new Tray("green");
        assertTrue(tray.isEmpty());
        assertEquals(null, tray.getWorkItem());
    }
        
    @Test
    public void after_adding_work_item_to_empty_tray_its_not_empty_and_has_the_added_work_item() {
        Tray tray = new Tray("green");
        WorkItem item = new WorkItem(3);
        tray.add(item);
        assertFalse(tray.isEmpty());
        assertEquals(item, tray.getWorkItem());
    }

    @Test(expected = IllegalArgumentException.class)
    public void adding_work_item_to_non_empty_tray_throws() {
        Tray tray = new Tray("green");
        tray.add(new WorkItem(3));
        tray.add(new WorkItem(5));
    }
}

**************************************
TeamTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TeamTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void creating_team_with_null_colour_throws() {
        new Team(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void creating_team_with_empty_colour_throws() {
        new Team("");
    }

    @Test
    public void team_has_colour_it_is_created_with() {
        Team green = new Team("green");
        assertEquals("green", green.getColour());
    }
    
    @Test
    public void team_initially_has_no_trays() {
        Team green = new Team("green");
        assertEquals(0, green.getTrayCount());
    }

    @Test
    public void tray_created_by_team_has_same_colour_as_team() {    
        Team green = new Team("green");
        Tray tray = green.createTray();
        assertEquals("green", tray.getColour());
    }

    @Test
    public void tray_created_by_team_is_in_teams_trays() {
        Team green = new Team("green");
        Tray tray = green.createTray();
        assertEquals(1, green.getTrayCount());
        assertEquals(tray, green.getTray(0));        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7F56DA6439 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public static String answer(String letter) {
        char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();

        int letterInt = new String(alphabet).indexOf(letter);
        
        String diamond = "";

        int numberOfSpaces = letterInt + letterInt - 1;

        //return "" + numberOfSpaces;

        for (int i = letterInt; i > 0; i--)
        {
//            diamond = letter + 
        }

        return "";
        
        
    }

    public static String repeatSpaces(int num)
    {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i< num; i++)
        {
            sb.append(" ");
        }
        return sb.toString();
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void hitch_hiker() {
        
        assertEquals("9", Diamond.answer("F"));
        assertEquals("13", Diamond.answer("H"));
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public static String answer(String letter) {
        char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();

        int letterInt = new String(alphabet).indexOf(letter);
        
        String diamond = "";

        int numberOfSpaces = letterInt + letterInt - 1;

        //return "" + numberOfSpaces;

        for (int i = letterInt; i > 0; i--)
        {
//            diamond = letter + 
        }

        return "";
        
        
    }

    public static String repeatSpaces(int num)
    {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i< num; i++)
        {
            sb.append(" ");
        }
        return sb.toString();
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void hitch_hiker() {
        
        //assertEquals("9", Diamond.answer("F"));
        //assertEquals("13", Diamond.answer("H"));
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7F56DA6439 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 48
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public Diamond(char widest) {
        this.widest = widest;
        this.radius = widest - 'A';
        this.size = this.radius * 2 + 1;
    }

    public String[] getGrid() {
        char[][] rows = new char[size][];
        for (int i = 0; i != size; i++) 
            rows[i] = new char[size];

        for (int x = -radius; x <= +radius; x++) 
            for (int y = -radius; y <= +radius; y++) 
                rows[x+radius][y+radius] = onEdge(x,y) ? edge(x) : ' ';
        
        String[] grid = new String[size];
        for (int i = 0; i != size; i++) 
            grid[i] = new String(rows[i]);

        return grid;
    }

    private boolean onEdge(int x, int y) {
        return abs(x) + abs(y) != radius;
    }

    private char edge(int x) {
        return alphabet.charAt(radius-abs(x));
    }

    private static int abs(int n) {
        return Math.abs(n);
    }

    private char widest;
    private int radius;
    private int size;

    private static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {

    @Test
    public void a() {
        assertDiamondEquals('A', new String[]{
            "A",
        });
    }

    @Test
    public void b() {
        assertDiamondEquals('B', new String[]{
            " A ",
            "B B",
            " A "
        });
    }
    
    @Test
    public void c() {
        assertDiamondEquals('C', new String[]{
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        });
    }

    @Test
    public void d() {
        assertDiamondEquals('D', new String[]{
            "   A   ",
            "  B B  ",
            " C   C ",
            "D     D",
            " C   C ",
            "  B B  ",
            "   A   "
        });
    }

    @Test
    public void show_z() {
        String[] grid = new Diamond('Z').getGrid();    
        System.out.println();
        for (int i = 0; i != grid.length; i++)
            System.out.println(grid[i]);
    }

    //- - - - - - - - - - - - - - - -

    private void assertDiamondEquals(char widest, String[] expected) {
        String[] actual = new Diamond(widest).getGrid();
        assertArrayEquals(expected, new Diamond(widest).getGrid());
/*
        boolean same = true;
        for (int i = 0; i != expected.length; i++)
            if (!expected[i].equals(actual[i])) {
                same = false;
                break;
            }
        if (!same) {

            System.out.println("expected");
            for (int i = 0; i != expected.length; i++) {
                System.out.println(expected[i]);
            }
            System.out.println("actual");
            for (int i = 0; i != actual.length; i++) {
                System.out.println(actual[i]);
            }
            fail();
        }
*/
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 48
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public Diamond(char widest) {
        this.widest = widest;
        this.radius = widest - 'A';
        this.size = this.radius * 2 + 1;
    }

    public String[] getGrid() {
        char[][] rows = new char[size][];
        for (int i = 0; i != size; i++) 
            rows[i] = new char[size];

        for (int x = -radius; x <= +radius; x++) 
            for (int y = -radius; y <= +radius; y++) 
                rows[x+radius][y+radius] = onEdge(x,y) ? edge(x) : ' ';
        
        String[] grid = new String[size];
        for (int i = 0; i != size; i++) 
            grid[i] = new String(rows[i]);

        return grid;
    }
    private boolean onEdge(int x, int y) {
        return abs(x) + abs(y) == radius;
    }

    private char edge(int x) {
        return alphabet.charAt(radius-abs(x));
    }

    private static int abs(int n) {
        return Math.abs(n);
    }

    private char widest;
    private int radius;
    private int size;

    private static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {

    @Test
    public void a() {
        assertDiamondEquals('A', new String[]{
            "A",
        });
    }

    @Test
    public void b() {
        assertDiamondEquals('B', new String[]{
            " A ",
            "B B",
            " A "
        });
    }
    
    @Test
    public void c() {
        assertDiamondEquals('C', new String[]{
            "  A  ",
            " B B ",
            "C   C",
            " B B ",
            "  A  "
        });
    }

    @Test
    public void d() {
        assertDiamondEquals('D', new String[]{
            "   A   ",
            "  B B  ",
            " C   C ",
            "D     D",
            " C   C ",
            "  B B  ",
            "   A   "
        });
    }

    @Test
    public void show_z() {
        String[] grid = new Diamond('Z').getGrid();    
        System.out.println();
        for (int i = 0; i != grid.length; i++)
            System.out.println(grid[i]);
    }

    //- - - - - - - - - - - - - - - -

    private void assertDiamondEquals(char widest, String[] expected) {
        String[] actual = new Diamond(widest).getGrid();
        boolean same = true;
        for (int i = 0; i != expected.length; i++)
            if (!expected[i].equals(actual[i])) {
                same = false;
                break;
            }
        if (!same) {

            System.out.println("expected");
            for (int i = 0; i != expected.length; i++) {
                System.out.println(expected[i]);
            }
            System.out.println("actual");
            for (int i = 0; i != actual.length; i++) {
                System.out.println(actual[i]);
            }
            fail();
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7F56DA6439 wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {

private static char c;
private static int pos;
    
Diamond (char c)
{
    this.c = c;
    this.pos = getPositionInAlphabet(c);
}

    public static int getPositionInAlphabet(char c) {
         int i = java.lang.Character.getNumericValue(c) 
- java.lang.Character.getNumericValue('A') + 1;
        return i   ;
    }

    public static String getString(int stringNum){
    String fred = "";

    for(int i =0 ; i < pos-stringNum ; i++)
    {
        fred = fred + " ";
    }
    
    fred = fred + (char)(65+stringNum-1);
    // fred = fred + java.lang.

    if(stringNum != 1)
    {
        stringNum-=1;
        for (int i = 0; i<(2*stringNum - 1); i++)
        {
            fred = fred + " ";
        }
        fred = fred + (char)(65+stringNum);
    }

    return fred;
}
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void return_the_letter_value() {
    Diamond myDiamond = new Diamond('E');
    assertEquals(3, Diamond.getPositionInAlphabet('C'));
    assertEquals(5, Diamond.getPositionInAlphabet('E'));
        
    }

    @Test
    public void test_first_half_of_Diamond(){
    Diamond myDiamond = new Diamond('E');
    assertEquals("E       E", Diamond.getString(5));
    assertEquals("B B", Diamond.getString(2));
}

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {

private static char c;
private static int pos;
    
Diamond (char c)
{
    this.c = c;
    this.pos = getPositionInAlphabet(c);
}

    public static int getPositionInAlphabet(char c) {
         int i = java.lang.Character.getNumericValue(c) 
- java.lang.Character.getNumericValue('A') + 1;
        return i   ;
    }

    public static String getString(int stringNum){
    String fred = "";

    for(int i =0 ; i < pos-stringNum ; i++)
    {
        fred = fred + " ";
    }
    
    fred = fred + (char)(65+stringNum-1);
    // fred = fred + java.lang.

    if(stringNum != 1)
    {
        stringNum-=1;
        for (int i = 0; i<(2*stringNum - 1); i++)
        {
            fred = fred + " ";
        }
        fred = fred + (char)(65+stringNum);
    }

    return fred;
}
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void return_the_letter_value() {
    Diamond myDiamond = new Diamond('E');
    assertEquals(3, Diamond.getPositionInAlphabet('C'));
    assertEquals(5, Diamond.getPositionInAlphabet('E'));
        
    }

    @Test
    public void test_first_half_of_Diamond(){
    Diamond myDiamond = new Diamond('E');
    assertEquals("E       E", Diamond.getString(5));
    //assertEquals("B B", Diamond.getString(2));
}

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7E53666BFE koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7E0F4EE6FC wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String of(int num) {
        if(num%5==0) return "Buzz";
        if(num%3==0) return "Fizz";
        return "" + num;
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    @Test
    public void testNumberNotMultipleOfThreeOrFiveMustOutputTheSame() {
        assertEquals("1", FizzBuzz.of(1));
        assertEquals("2", FizzBuzz.of(2));
        assertEquals("4", FizzBuzz.of(4));
        assertEquals("6", FizzBuzz.of(6));
    }

    @Test
    public void testForMultipleOfThreePrintFizz() {
        assertEquals("Fizz", FizzBuzz.of(3));
        assertEquals("Fizz", FizzBuzz.of(6));
        assertEquals("Fizz", FizzBuzz.of(9));
    }

    @Test
    public void testForMultipleOfFivePrintBuzz() {
        assertEquals("Buzz", FizzBuzz.of(5));
        assertEquals("Buzz", FizzBuzz.of(15));
        assertEquals("Buzz", FizzBuzz.of(25));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String of(int num) {
        if(num%5==0) return "Buzz";
        if(num%3==0) return "Fizz";
        return "" + num;
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    @Test
    public void testNumberNotMultipleOfThreeOrFiveMustOutputTheSame() {
        assertEquals("1", FizzBuzz.of(1));
        assertEquals("2", FizzBuzz.of(2));
        assertEquals("4", FizzBuzz.of(4));
    }

    @Test
    public void testForMultipleOfThreePrintFizz() {
        assertEquals("Fizz", FizzBuzz.of(3));
        assertEquals("Fizz", FizzBuzz.of(6));
        assertEquals("Fizz", FizzBuzz.of(9));
    }

    @Test
    public void testForMultipleOfFivePrintBuzz() {
        assertEquals("Buzz", FizzBuzz.of(5));
        assertEquals("Buzz", FizzBuzz.of(15));
        assertEquals("Buzz", FizzBuzz.of(25));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7E0F4EE6FC wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String of(int num) {
        if(num%5==0 && num%3==0){
            return "FizzBuzz";
        }else if(num%5==0){
             return "Buzz";
        }else if(num%3==0){
             return "Fizz";
        }else {
            return "" + num;
        }
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    @Test
    public void testNumberNotMultipleOfThreeOrFiveMustOutputTheSame() {
        assertEquals("1", FizzBuzz.of(1));
        assertEquals("2", FizzBuzz.of(2));
        assertEquals("4", FizzBuzz.of(4));
    }

    @Test
    public void testForMultipleOfThreePrintFizz() {
        assertEquals("Fizz", FizzBuzz.of(3));
        assertEquals("Fizz", FizzBuzz.of(6));
        assertEquals("Fizz", FizzBuzz.of(9));
    }

    @Test
    public void testForMultipleOfFivePrintBuzz() {
        assertEquals("Buzz", FizzBuzz.of(5));
        assertEquals("Buzz", FizzBuzz.of(15));
        assertEquals("Buzz", FizzBuzz.of(25));
    }
    
    @Test
    public void testForMultipleOfThreeAndFivePrintFizzBuzz(){
        assertEquals("FizzBuzz", FizzBuzz.of(15));    
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String of(int num) {
        if(num%5==0 && num%3==0){
            return "FizzBuzz";
        }else if(num%5==0){
             return "Buzz";
        }else if(num%3==0){
             return "Fizz";
        }else {
            return "" + num;
        }
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    @Test
    public void testNumberNotMultipleOfThreeOrFiveMustOutputTheSame() {
        assertEquals("1", FizzBuzz.of(1));
        assertEquals("2", FizzBuzz.of(2));
        assertEquals("4", FizzBuzz.of(4));
    }

    @Test
    public void testForMultipleOfThreePrintFizz() {
        assertEquals("Fizz", FizzBuzz.of(3));
        assertEquals("Fizz", FizzBuzz.of(6));
        assertEquals("Fizz", FizzBuzz.of(9));
    }

    @Test
    public void testForMultipleOfFivePrintBuzz() {
        assertEquals("Buzz", FizzBuzz.of(5));
        assertEquals("Buzz", FizzBuzz.of(25));
    }
    
    @Test
    public void testForMultipleOfThreeAndFivePrintFizzBuzz(){
        assertEquals("FizzBuzz", FizzBuzz.of(15));    
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7C638490BE koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        System.out.println("Expected: " + expected);
        System.out.println("Actual: " + actual);

        //assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7B2036421A lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
BookTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BookTest {
    
    @Test
    public void unitaryPriceBookIsHeight() {
        double priceExpected = 8.00;
        Book b = new Book();
        double unitaryPrice = b.getUnitaryPrice();
        assertEquals(unitaryPrice, priceExpected, 0.001);
        
    }
}

**************************************
Book.java
**************************************

public class Book{
    
    public double getUnitaryPrice() {
        return 8.0;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
BookTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BookTest {
    
    @Test
    public void unitaryPriceBookIsHeight() {
        double priceExpected = 8.00;
        Book b = new Book();
        double unitaryPrice = b.getUnitaryPrice();
        assertEquals(unitaryPrice, priceExpected, 0.001);
        
    }
}

**************************************
Book.java
**************************************

public class Book{
    
    public double getUnitaryPrice() {
        return 8.0;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 79DE97A910 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void thereIsADoor() {
        Door door = new Door();
        assertNotNull(door);
    }
}

**************************************
Door.java
**************************************

public class Door {
    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        //int expected = 6 * 9;
        //int actual = Untitled.answer();
        //assertEquals(expected, actual);
    }
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void thereIsADoor() {
        Door door = new Door();
        assertNotNull(door);
    }
}

**************************************
Door.java
**************************************

public class Door {
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7938451902 moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    static int[] array = {6,9,15,-2,92,11};
    public static Integer minimum() {
        int min = array[0];
        for(int i = 1; i< array.length; i++)
        {
            if (array[i] < min)
            {
                min = array[i];
            }
        }
        return min;
    }

    public static int maximum()
    {
        int max = array[0];
        for(int i = 1; i<array.length; i++)
        {
            if(array[i]>max)
            {
                max = array[i];
            }
        }
        return max;
    }

    public static int size()
    {
        return array.length;
    }

    public static int avg()
    {
        return 5;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expectedmin = -2;
        int actualmin = Untitled.minimum();
        assertEquals(expectedmin, actualmin);

        int expectedmax = 92;
        int actualmax = Untitled.maximum();
        assertEquals(expectedmax, actualmax);

        int expectedsize = 6;
        int actualsize = Untitled.size();
        assertEquals(expectedsize, actualsize);

        double expectedavg = 21.833333;
        int actualavg = Untitled.avg();
        assertEquals(expectedavg, actualavg);

    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    static int[] array = {6,9,15,-2,92,11};
    public static Integer minimum() {
        int min = array[0];
        for(int i = 1; i< array.length; i++)
        {
            if (array[i] < min)
            {
                min = array[i];
            }
        }
        return min;
    }

    public static int maximum()
    {
        int max = array[0];
        for(int i = 1; i<array.length; i++)
        {
            if(array[i]>max)
            {
                max = array[i];
            }
        }
        return max;
    }

    public static int size()
    {
        return array.length;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expectedmin = -2;
        int actualmin = Untitled.minimum();
        assertEquals(expectedmin, actualmin);

        int expectedmax = 92;
        int actualmax = Untitled.maximum();
        assertEquals(expectedmax, actualmax);

        int expectedsize = 6;
        int actualsize = Untitled.size();
        assertEquals(expectedsize, actualsize);

    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7938451902 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
math.java
**************************************

public class math {
    
    public static double[] answer(int[] numbers) {
        int max = 0;
        int min = 0;
        int sum = 0;
        double average = 0;
        double[] answers = {0,0,0,0};

        for(int i = numbers.length;i>0;i--){
            if (numbers[i] > max){
                max = numbers[i];
            }
            else if(numbers[i] < min){
                min = numbers[i];
            }
            sum += numbers[i];
            
        }
        average = sum/numbers.length;
        answers[0] = (double)min;
        answers[1] = (double)max;
        answers[2] = (double)numbers.length;
        answers[3] = average;

        return answers;
    }
}

**************************************
test.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Collections.*;
import java.util.Arrays.*;

public class test {
    
    @Test
    public void hitch_hiker() {
        int[] data = {1,2,3,4};
        double[] expected = {1,4,4,10/4};
        double[] actual = math.answer(data);
        assertEquals(expected, actual);

        data = Arrays.asList(-2, 5, 7, 89).toArray(new int[0]);
        expected = Arrays.asList(-2, 89, 4, 99/4).toArray(new double[0]);
        actual = math.answer(data);
        assertEquals(expected, actual);

        data = Arrays.asList(6,9,15,-2,92,11).toArray(new int[0]);
        expected = Arrays.asList(-2, 92, 6, 131/6).toArray(new double[0]);
        actual = math.answer(data);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
math.java
**************************************

public class math {
    
    public static double[] answer(int[] numbers) {
        int max = 0;
        int min = 0;
        int sum = 0;
        double average = 0;
        double[] answers = {0,0,0,0};

        for(int i = numbers.length;i>0;i--){
            if (numbers[i] > max){
                max = numbers[i];
            }
            else if(numbers[i] < min){
                min = numbers[i];
            }
            sum += numbers[i];
            
        }
        average = sum/numbers.length;
        answers[0] = (double)min;
        answers[1] = (double)max;
        answers[2] = (double)numbers.length;
        answers[3] = average;

        return answers;
    }
}

**************************************
test.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class test {
    
    @Test
    public void hitch_hiker() {
        int[] data = {1,2,3,4};
        double[] expected = {1,4,4,10/4};
        double[] actual = math.answer(data);
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7938451902 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
mathMethods.java
**************************************

public class mathMethods {

    public Integer minimum(int[] array) {
        int ret = array[0];
        for (int i = 1; i < array.length; i++)
        {
            ret = Math.min(ret,array[i]);
        }
        return ret;
    }

    public Integer maximum(int[] array) {
        int ret = array[0];
        for (int i = 1; i < array.length; i++)
        {
            ret = Math.max(ret,array[i]);
        }
        return ret;
    }

    public Integer size(int[] array) {
        return array.length;
    }

    public Double average(int[] array) {
        double ret = 0;
        for (int i = 0; i < array.length; i++)
        {
            ret += array[i];
        }
        return ret;
    }
    
    public Integer answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void math() {

        int[] math = new int[4];
        math = {1,2,3,4};
        mathMethods methods = new mathMethods();
        int expectedMin = 4;
        int actualMin = methods.minimum(math);
        assertEquals(expectedMin, actualMin); 

        int expectedMax = 3;
        int actualMax = methods.maximum(math);
        assertEquals(expectedMax, actualMax);

        int expectedSize = 5;
        int actualSize = methods.size(math);
        assertEquals(expectedSize, actualSize);

        double expectedAverage = 6;
        double actualAverage = methods.average(math);
        assertEquals(expectedAverage,actualAverage);

 
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
mathMethods.java
**************************************

public class mathMethods {

    public Integer minimum(int[] array) {
        int ret = array[0];
        for (int i = 1; i < array.length; i++)
        {
            ret = Math.min(ret,array[i]);
        }
        return ret;
    }

    public Integer maximum(int[] array) {
        int ret = array[0];
        for (int i = 1; i < array.length; i++)
        {
            ret = Math.max(ret,array[i]);
        }
        return ret;
    }

    public Integer size(int[] array) {
        return array.length;
    }

    public Integer average(int[] array) {
        int ret = 0;
        for (int i = 0; i < array.length; i++)
        {
            ret += array[i];
        }
        return ret;
    }
    
    public Integer answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 7;
        Untitled ford = new Untitled();
        int actual = ford.answer();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7890444B79 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test

    public void hitch_hiker() {
        /*test 1: test if I can run the code
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);*/

        //test 2 : create basket
        int[] b={1,5,4,3};
        Basket b0= new Basket(b);
        assertEquals(1, 1);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test

    public void hitch_hiker() {
        /*test 1: test if I can run the code
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);*/

            }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 7890444B79 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test

    public void hitch_hiker() {
        /*test 1: test if I can run the code
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);*/
//test 2 : create basket
        int[] b={1,5,4,3};
        Basket basket=new Basket(b);
        assertEquals(1, basket.getBasket()[0]);
  
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test

    public void hitch_hiker() {
        /*test 1: test if I can run the code
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);*/

        //test 2 : create basket
        int[] b={1,5,4,3};

  
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 77EBADDE52 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }

    public static print() {
    for(int i=1;i<=100;i++) {
            if(i%3 == 0 & i%5 == 0) {
System.out.println("FizzBuzz");
            } else if(i % 3 == 0) {
                System.out.println("Fizz");
            } else if(i % 5 == 0) {
                System.out.println("Buzz");
            } else { 
            System.out.println(i);
}
        }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }

    public static void print() {
    for(int i=1;i<=100;i++) {
            if(i%3 == 0 & i%5 == 0) {
System.out.println("FizzBuzz");
            } else if(i % 3 == 0) {
                System.out.println("Fizz");
            } else if(i % 5 == 0) {
                System.out.println("Buzz");
            } else { 
            System.out.println(i);
}
        }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
   

@Test
public void print() {
Untitled.print();
}
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 77295C7CF3 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanNumberTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumberTest {

    @Test
    public void testRomanNumberConversion() {
        assertEquals("CM",   RomanNumber.convert(900));
        assertEquals("DCCC", RomanNumber.convert(800));
        assertEquals("D",    RomanNumber.convert(500));
        assertEquals("CD",   RomanNumber.convert(400));
        assertEquals("CCC",  RomanNumber.convert(300));

        assertEquals("XC",   RomanNumber.convert(90));
        assertEquals("LXXX", RomanNumber.convert(80));
        assertEquals("L",    RomanNumber.convert(50));
        assertEquals("XL",   RomanNumber.convert(40));
        assertEquals("XXX",  RomanNumber.convert(30));

        assertEquals("IX",   RomanNumber.convert(9));
        assertEquals("VIII", RomanNumber.convert(8));
        assertEquals("V",    RomanNumber.convert(5));
        assertEquals("IV",   RomanNumber.convert(4));
        assertEquals("III",  RomanNumber.convert(3));

        assertEquals("III",  RomanNumber.convert(35));
        assertEquals("VI",   RomanNumber.convert(7));
        
    }
}

**************************************
RomanNumber.java
**************************************

public class RomanNumber{

    public static String convert(int input) {
        StringBuilder output = new StringBuilder();

        while(input>=1000){
            input-=1000;
            output.append("M");
        }
        if(input>=900){
            input-=900;
            output.append("CM");
        }
        if(input>=500){
            input-=500;
            output.append("D");
        }
        if(input>=400){
            input-=400;
            output.append("CD");
        }
        while(input>=100){
            input-=100;
            output.append("C");
        }

        if(input>=90){
            input-=90;
            output.append("XC");
        }

        if(input>=50){
            input-=50;
            output.append("L");
        }

        if(input>=40){
            input-=40;
            output.append("XL");
        }
        while(input>=10){
            input-=10;
            output.append("X");
        }
        if(input>=9){
            input-=9;
            output.append("IX");
        }
        if(input>=5){
            input-=5;
            output.append("V");
        }
        if(input>=4){
            input-=4;
            output.append("IV");
        }
        while(input>=1){
            input-=1;
            output.append("I");
        }

        System.out.println(output);
        return output.toString();
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanNumberTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumberTest {

    @Test
    public void testRomanNumberConversion() {
        assertEquals("CM",   RomanNumber.convert(900));
        assertEquals("DCCC", RomanNumber.convert(800));
        assertEquals("D",    RomanNumber.convert(500));
        assertEquals("CD",   RomanNumber.convert(400));
        assertEquals("CCC",  RomanNumber.convert(300));

        assertEquals("XC",   RomanNumber.convert(90));
        assertEquals("LXXX", RomanNumber.convert(80));
        assertEquals("L",    RomanNumber.convert(50));
        assertEquals("XL",   RomanNumber.convert(40));
        assertEquals("XXX",  RomanNumber.convert(30));

        assertEquals("IX",   RomanNumber.convert(9));
        assertEquals("VIII", RomanNumber.convert(8));
        assertEquals("V",    RomanNumber.convert(5));
        assertEquals("IV",   RomanNumber.convert(4));
        assertEquals("III",  RomanNumber.convert(3));
        
    }
}

**************************************
RomanNumber.java
**************************************

public class RomanNumber{

    public static String convert(int input) {
        StringBuilder output = new StringBuilder();

        while(input>=1000){
            input-=1000;
            output.append("M");
        }

        if(input>=900){
            input-=900;
            output.append("CM");
        } else if(input>=500){
            input-=500;
            output.append("D");
        } else if(input>=400){
            input-=400;
            output.append("CD");
        }
        while(input>=100){
            input-=100;
            output.append("C");
        }

        if(input>=90){
            input-=90;
            output.append("XC");
        } else if(input>=50){
            input-=50;
            output.append("L");
        } else if(input>=40){
            input-=40;
            output.append("XL");
        }
        while(input>=10){
            input-=10;
            output.append("X");
        }

        if(input>=9){
            input-=9;
            output.append("IX");
        } else if(input>=5){
            input-=5;
            output.append("V");
        } else if(input>=4){
            input-=4;
            output.append("IV");
        }
        while(input>=1){
            input-=1;
            output.append("I");
        }

        System.out.println(output);
        return output.toString();
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 766A63266C wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Yatzy.java
**************************************
import java.util.*;

public class Yatzy {
    
    public static int score(String type, List<Integer> dices) {
        int score = 0;

        for(Integer value: dices) {
            score = score + value;
        }
        return score;
    }

    public static List<Integer> sortDices(List<Integer> dices) {
        Integer[] result = {1,2,1,0,1};
        return Arrays.asList(result);
    }

}    

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class YatzyTest {
    
    @Test
    public void chanceCorrectlyAdded() {
        String type = "chance";        
        Integer [] dices = {1,2,3,4,5};
        int expected = 1+2+3+4+5;
        int actual = Yatzy.score(type, Arrays.asList(dices));
        assertEquals(expected, actual);
    }

    @Test
    public void pair() {
        String type = "pair";
        Integer [] dices = {1,2,3,2,5};
        int expected = 2+2;
        int actual = Yatzy.score(type, Arrays.asList(dices));
        assertEquals(expected, actual);
        
    }

    @Test
    public void sortDices() {
        Integer [] dices = {1,2,3,2,5};
        Integer[] result = {1,2,1,0,1};
        List<Integer> expectedSortedList = Arrays.asList(result);
        
        List<Integer> sortedList = Yatzy.sortDices(Arrays.asList(dices)); 
        assertEquals(expectedSortedList, sortedList);
    }       
    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Yatzy.java
**************************************
import java.util.*;

public class Yatzy {
    
    public static int score(String type, List<Integer> dices) {
        int score = 0;

        for(Integer value: dices) {
            score = score + value;
        }
        return score;
    }

    public static List<Integer> sortDices(List<Integer> dices) {
        Integer[] result = {1,2,1,0,1};
        return Arrays.asList(result);
    }

}    

**************************************
YatzyTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.*;

public class YatzyTest {
    
    @Test
    public void chanceCorrectlyAdded() {
        String type = "chance";        
        Integer [] dices = {1,2,3,4,5};
        int expected = 1+2+3+4+5;
        int actual = Yatzy.score(type, Arrays.asList(dices));
        assertEquals(expected, actual);
    }

  /*  @Test
    public void pair() {
        String type = "pair";
        Integer [] dices = {1,2,3,2,5};
        int expected = 2+2;
        int actual = Yatzy.score(type, Arrays.asList(dices));
        assertEquals(expected, actual);
        
    }
*/
    @Test
    public void sortDices() {
        Integer [] dices = {1,2,3,2,5};
        Integer[] result = {1,2,1,0,1};
        List<Integer> expectedSortedList = Arrays.asList(result);
        
        List<Integer> sortedList = Yatzy.sortDices(Arrays.asList(dices)); 
        assertEquals(expectedSortedList, sortedList);
    }       
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 721EC498D4 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        //assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 70DC1784DA panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 59
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {
    
    public static final boolean OPENED = true;
    public static final boolean CLOSED = false;
    
    private final boolean state;

    public Door() {
      this(CLOSED);
    }

    public Door(boolean state) {
      this.state = state;
    }

    public Door toggle() {
      return new Door(!this.state);
    }

    public boolean state() {
      return this.state;
    }
}

**************************************
DoorTest.java
**************************************

import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void testToggleClosedDoor() {
        Door subject = new Door(Door.CLOSED).toggle();
        assertEquals(Door.OPENED, subject.state());
    }

    @Test
    public void testToggleOpenedDoor() {
        Door subject = new Door(Door.OPENED).toggle();
        assertEquals(Door.CLOSED, subject.state());
    }

    @Test
    public void testToggleDefaultDoor() {
        Door subject = new Door().toggle();
        assertEquals(Door.OPENED, subject.state());
    }
}

**************************************
RowTest.java
**************************************

import org.junit.*;
import static org.junit.Assert.*;

public class RowTest {
        
    @Test
    public void testRowSize() {
       Row row = new Row(100);
       assertEquals(100, row.doors().size());
    }

    @Test
    public void testUntouchedDoors() {
      Row row = new Row(100);

      for(Door door : row.doors()) {
        assertEquals(Door.CLOSED, door.state());
      }
    }

    @Test
    public void testDoorsTouchEveryOne() {
      Row row = new Row(100).touchEvery(1);
      for(Door door : row.doors()) {
        assertEquals(Door.OPENED, door.state());
      }
    }

    @Test
    public void testDoorsTouchEveryTwo() {
      Row row = new Row(100).touchEvery(2);

      assertEquals(Door.CLOSED, row.doors().get(0).state());
      assertEquals(Door.OPENED, row.doors().get(1).state());
      assertEquals(Door.CLOSED, row.doors().get(2).state());
      assertEquals(Door.OPENED, row.doors().get(3).state());

      assertEquals(Door.CLOSED, row.doors().get(96).state());
      assertEquals(Door.OPENED, row.doors().get(97).state());
      assertEquals(Door.CLOSED, row.doors().get(98).state());
      assertEquals(Door.OPENED, row.doors().get(99).state());
    }

    @Test
    public void testDoorsTouchEveryThree() {
      Row row = new Row(100).touchEvery(3);

      assertEquals(Door.CLOSED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.OPENED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.CLOSED, row.doors().get(4).state());
      assertEquals(Door.OPENED, row.doors().get(5).state());

      assertEquals(Door.OPENED, row.doors().get(95).state());
      assertEquals(Door.CLOSED, row.doors().get(96).state());
      assertEquals(Door.CLOSED, row.doors().get(97).state());
      assertEquals(Door.OPENED, row.doors().get(98).state());
      assertEquals(Door.CLOSED, row.doors().get(99).state());
    }

    @Test
    public void testDoorsTouchCyclesOne() {
      Row row = new Row(100).touchCycles(1);
      for(Door door : row.doors()) {
        assertEquals(Door.OPENED, door.state());
      }
    }

    @Test
    public void testDoorsTouchCyclesTwo() {
      Row row = new Row(100).touchCycles(2);

      assertEquals(Door.OPENED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.OPENED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.OPENED, row.doors().get(4).state());
      assertEquals(Door.CLOSED, row.doors().get(5).state());

      assertEquals(Door.CLOSED, row.doors().get(95).state());
      assertEquals(Door.OPENED, row.doors().get(96).state());
      assertEquals(Door.CLOSED, row.doors().get(97).state());
      assertEquals(Door.OPENED, row.doors().get(98).state());
      assertEquals(Door.CLOSED, row.doors().get(99).state()); 
   }

    @Test
    public void testDoorsTouchCyclesThree() {
      Row row = new Row(100).touchCycles(3);

      assertEquals(Door.OPENED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.CLOSED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.OPENED, row.doors().get(4).state());
      assertEquals(Door.OPENED, row.doors().get(5).state());

      assertEquals(Door.OPENED, row.doors().get(96).state());
      assertEquals(Door.CLOSED, row.doors().get(97).state());
      assertEquals(Door.OPENED, row.doors().get(98).state());
      assertEquals(Door.OPENED, row.doors().get(99).state()); 
   }

}

**************************************
Row.java
**************************************


import java.util.List;
import java.util.ArrayList;


public class Row {

    private final ArrayList<Door> doors;

    public Row(int numberOfDoors) {
       this.doors = new ArrayList<Door>(numberOfDoors);
       for(int i = 0; i < numberOfDoors; i++) {
         this.doors.add(i, new Door());
       }
    }

    private Row(ArrayList<Door> doors) {
        this.doors = doors;
    }

    public List<Door> doors() {
       return this.doors;
    }

    public Row touchEvery(int skip) {
        Row newRow = new Row(this.doors);

        for(int i = 0; i < newRow.doors.size(); i++) {
          if ((i + 1) % skip == 0) {
            newRow.doors.set(i, newRow.doors.get(i).toggle());
          }
        }

        return newRow;
    }

    public Row touchCycles(int cycles) {
        return this.recurse(1, cycles);
    }

    private Row recurse(int thisSkip, int cyclesLeft) {
        Row newRow = this.touchEvery(thisSkip);
        if (cyclesLeft == 1) {
            return newRow;
        } else {
            return newRow.recurse(thisSkip + 1, cyclesLeft - 1);
        }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 59
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {
    
    public static final boolean OPENED = true;
    public static final boolean CLOSED = false;
    
    private final boolean state;

    public Door() {
      this(CLOSED);
    }

    public Door(boolean state) {
      this.state = state;
    }

    public Door toggle() {
      return new Door(!this.state);
    }

    public boolean state() {
      return this.state;
    }
}

**************************************
DoorTest.java
**************************************

import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void testToggleClosedDoor() {
        Door subject = new Door(Door.CLOSED).toggle();
        assertEquals(Door.OPENED, subject.state());
    }

    @Test
    public void testToggleOpenedDoor() {
        Door subject = new Door(Door.OPENED).toggle();
        assertEquals(Door.CLOSED, subject.state());
    }

    @Test
    public void testToggleDefaultDoor() {
        Door subject = new Door().toggle();
        assertEquals(Door.OPENED, subject.state());
    }
}

**************************************
RowTest.java
**************************************

import org.junit.*;
import static org.junit.Assert.*;

public class RowTest {
        
    @Test
    public void testRowSize() {
       Row row = new Row(100);
       assertEquals(100, row.doors().size());
    }

    @Test
    public void testUntouchedDoors() {
      Row row = new Row(100);

      for(Door door : row.doors()) {
        assertEquals(Door.CLOSED, door.state());
      }
    }

    @Test
    public void testDoorsTouchEveryOne() {
      Row row = new Row(100).touchEvery(1);
      for(Door door : row.doors()) {
        assertEquals(Door.OPENED, door.state());
      }
    }

    @Test
    public void testDoorsTouchEveryTwo() {
      Row row = new Row(100).touchEvery(2);

      assertEquals(Door.CLOSED, row.doors().get(0).state());
      assertEquals(Door.OPENED, row.doors().get(1).state());
      assertEquals(Door.CLOSED, row.doors().get(2).state());
      assertEquals(Door.OPENED, row.doors().get(3).state());

      assertEquals(Door.CLOSED, row.doors().get(96).state());
      assertEquals(Door.OPENED, row.doors().get(97).state());
      assertEquals(Door.CLOSED, row.doors().get(98).state());
      assertEquals(Door.OPENED, row.doors().get(99).state());
    }

    @Test
    public void testDoorsTouchEveryThree() {
      Row row = new Row(100).touchEvery(3);

      assertEquals(Door.CLOSED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.OPENED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.CLOSED, row.doors().get(4).state());
      assertEquals(Door.OPENED, row.doors().get(5).state());

      assertEquals(Door.OPENED, row.doors().get(95).state());
      assertEquals(Door.CLOSED, row.doors().get(96).state());
      assertEquals(Door.CLOSED, row.doors().get(97).state());
      assertEquals(Door.OPENED, row.doors().get(98).state());
      assertEquals(Door.CLOSED, row.doors().get(99).state());
    }

    @Test
    public void testDoorsTouchCyclesOne() {
      Row row = new Row(100).touchCycles(1);
      for(Door door : row.doors()) {
        assertEquals(Door.OPENED, door.state());
      }
    }

    @Test
    public void testDoorsTouchCyclesTwo() {
      Row row = new Row(100).touchCycles(2);

      assertEquals(Door.OPENED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.OPENED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.OPENED, row.doors().get(4).state());
      assertEquals(Door.CLOSED, row.doors().get(5).state());

      assertEquals(Door.CLOSED, row.doors().get(95).state());
      assertEquals(Door.OPENED, row.doors().get(96).state());
      assertEquals(Door.CLOSED, row.doors().get(97).state());
      assertEquals(Door.OPENED, row.doors().get(98).state());
      assertEquals(Door.CLOSED, row.doors().get(99).state()); 
   }

    @Test
    public void testDoorsTouchCyclesThree() {
      Row row = new Row(100).touchCycles(3);

      assertEquals(Door.OPENED, row.doors().get(0).state());
      assertEquals(Door.CLOSED, row.doors().get(1).state());
      assertEquals(Door.CLOSED, row.doors().get(2).state());
      assertEquals(Door.CLOSED, row.doors().get(3).state());
      assertEquals(Door.OPENED, row.doors().get(4).state());
      assertEquals(Door.OPENED, row.doors().get(5).state());
   }

}

**************************************
Row.java
**************************************


import java.util.List;
import java.util.ArrayList;


public class Row {

    private final ArrayList<Door> doors;

    public Row(int numberOfDoors) {
       this.doors = new ArrayList<Door>(numberOfDoors);
       for(int i = 0; i < numberOfDoors; i++) {
         this.doors.add(i, new Door());
       }
    }

    private Row(ArrayList<Door> doors) {
        this.doors = doors;
    }

    public List<Door> doors() {
       return this.doors;
    }

    public Row touchEvery(int skip) {
        Row newRow = new Row(this.doors);

        for(int i = 0; i < newRow.doors.size(); i++) {
          if ((i + 1) % skip == 0) {
            newRow.doors.set(i, newRow.doors.get(i).toggle());
          }
        }

        return newRow;
    }

    public Row touchCycles(int cycles) {
        return this.recurse(1, cycles);
    }

    private Row recurse(int thisSkip, int cyclesLeft) {
        Row newRow = this.touchEvery(thisSkip);
        if (cyclesLeft == 1) {
            return newRow;
        } else {
            return newRow.recurse(thisSkip + 1, cyclesLeft - 1);
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6DE7C2C862 deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static boolean doors[] = new boolean[100];

    public static int answer() {
        return doors.length;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void test_NoDoorIsInitiallyOpen(){
        int openDoors = Untitled.answer();
        assertEquals(0, openDoors);
    }

    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static boolean doors[] = new boolean[100];

    public static int answer() {
        int openCount = 0;
        for(int i = 0; i < doors.length; i++) {
            if( doors[i] ) {
                openCount++;
            }
        }

        return openCount;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void test_NoDoorIsInitiallyOpen(){
        int openDoors = Untitled.answer();
        assertEquals(0, openDoors);
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6D5FD634DA koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ScoreCard.java
**************************************

public class ScoreCard {
    
    public static int answer() {
        return 10;
    }
}

**************************************
BowlingGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingGameTest {
    
    @Test
    public void strike() {
        int expected = 10;
        int actual = ScoreCard.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void gutterBall() {
        int expected = 0;
        int actual = ScoreCard.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ScoreCard.java
**************************************

public class ScoreCard {
    
    public static int answer() {
        return 10;
    }
}

**************************************
BowlingGameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class BowlingGameTest {
    
    @Test
    public void strike() {
        int expected = 10;
        int actual = ScoreCard.answer();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6D32F3AAC9 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        java.util.List list = new java.util.ArrayList();
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        java.util.List list = new java.util.ArrayList();
        int expected = 42;
        int actual = Hiker.answer();
        //assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6CED414C69 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
PrimeFactors.java
**************************************
import java.util.Scanner;

public class PrimeFactors{

    public static void main(String args[]){
        
        Integer n;//n will be the natural number we want to factor
        int i; //i is a counter
        Scanner s = new Scanner(System.in);//to get the initial natural number
        String ans = "The factored number is = ";//ans will be the final string with the factored number
        
        n = s.nextInt(); //gets the natural number as input

        for (i=2;i<=n;i++){ //gets cases where n%i==0
            if (n%i==0){
            ans = ans + "[" + String.valueOf(i)+ "] ";//Increments the answer with the found natural numbers
            n = n/i; //discounts the number already factored
	    i = i - 1;//makes the loop test for the same number again. Example: for n = 4 the number 2 would be checked multiple times
            }
        }
        System.out.println(ans);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeFactors.java
**************************************
import java.util.Scanner;

public class PrimeFactors{

    public static void main(String args[]){
        
        Integer n;//n will be the natural number we want to factor
        int i; //i is a counter
        Scanner s = new Scanner(System.in);//to get the initial natural number
        String ans = "The factored number is = ";//ans will be the final string with the factored number
        
        n = s.nextInt(); //gets the natural number as input

        for (i=2;i<=n;i++){ //gets cases where n%i==0
            if (n%i==0){
            ans = ans + "[" + String.valueOf(i)+ "] ";//Increments the answer with the found natural numbers
            n = n/i; //discounts the number already factored
	    i = i - 1;//makes the loop test for the same number again. Example: for n = 4 the number 2 would be checked multiple times
            }
        }
        System.out.println(ans);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6CB2F1E5E0 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
NumberNames.java
**************************************
import java.util.Map;
import java.util.HashMap;

public class NumberNames{
    
    private final static Map<Integer, String> lessThan10 = new HashMap<Integer, String>();
    static {
        lessThan10.put(Integer.valueOf(0), "Zero");
        lessThan10.put(Integer.valueOf(1), "One");
        lessThan10.put(Integer.valueOf(2), "Two");
        lessThan10.put(Integer.valueOf(3), "Three");
        lessThan10.put(Integer.valueOf(4), "Four");
        lessThan10.put(Integer.valueOf(5), "Five");
        lessThan10.put(Integer.valueOf(6), "Six");
        lessThan10.put(Integer.valueOf(7), "Seven");
        lessThan10.put(Integer.valueOf(8), "Eight");
        lessThan10.put(Integer.valueOf(9), "Nine");
    }

    public static String convertToName(int num) {
        String numStr = String.valueOf(num);
        String[] strArray = new String[] {numStr};
        for(int i=strArray.length-1; i>=0; i--) {
            System.out.println(strArray[i]);
        }
        return lessThan10.get(Integer.valueOf(num));
    }
}

**************************************
NumberNamesTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class NumberNamesTest {
    
    
    public void testNameLessThan10() {
        assertEquals("Zero", NumberNames.convertToName(0));
        assertEquals("One", NumberNames.convertToName(1));
        assertEquals("Two", NumberNames.convertToName(2));
        assertEquals("Three", NumberNames.convertToName(3));
        assertEquals("Four", NumberNames.convertToName(4));
        assertEquals("Five", NumberNames.convertToName(5));
        assertEquals("Six", NumberNames.convertToName(6));
        assertEquals("Seven", NumberNames.convertToName(7));
        assertEquals("Eight", NumberNames.convertToName(8));        
        assertEquals("Nine", NumberNames.convertToName(9));
    }

    
    public void testNameLessThan100() {
        assertEquals("Ten", NumberNames.convertToName(10));
        assertEquals("Eleven", NumberNames.convertToName(11));
        assertEquals("Twelve", NumberNames.convertToName(12));
        assertEquals("Thirteen", NumberNames.convertToName(13));
        assertEquals("Fourteen", NumberNames.convertToName(14));
        assertEquals("Fifteen", NumberNames.convertToName(15));
        assertEquals("Sixteen", NumberNames.convertToName(16));
        assertEquals("Seven", NumberNames.convertToName(17));
        assertEquals("Eighteen", NumberNames.convertToName(18));
        assertEquals("Nineteen", NumberNames.convertToName(19));
        assertEquals("Twenty", NumberNames.convertToName(20));
        assertEquals("Thirty", NumberNames.convertToName(30));
        assertEquals("Forty", NumberNames.convertToName(40));
        assertEquals("Fifty", NumberNames.convertToName(50));
        assertEquals("Sixty", NumberNames.convertToName(60));
        assertEquals("Seventy", NumberNames.convertToName(70));
        assertEquals("Eighty", NumberNames.convertToName(80));
        assertEquals("Ninety", NumberNames.convertToName(998765));
    }

    @Test
    public void test() {
assertEquals("Ninety", NumberNames.convertToName(87654));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
NumberNames.java
**************************************
import java.util.Map;
import java.util.HashMap;

public class NumberNames{
    
    private final static Map<Integer, String> lessThan10 = new HashMap<Integer, String>();
    static {
        lessThan10.put(Integer.valueOf(0), "Zero");
        lessThan10.put(Integer.valueOf(1), "One");
        lessThan10.put(Integer.valueOf(2), "Two");
        lessThan10.put(Integer.valueOf(3), "Three");
        lessThan10.put(Integer.valueOf(4), "Four");
        lessThan10.put(Integer.valueOf(5), "Five");
        lessThan10.put(Integer.valueOf(6), "Six");
        lessThan10.put(Integer.valueOf(7), "Seven");
        lessThan10.put(Integer.valueOf(8), "Eight");
        lessThan10.put(Integer.valueOf(9), "Nine");
    }

    public static String convertToName(int num) {
        String numStr = String.valueOf(num);
        String[] strArray = new String[] {numStr};
        for(int i=strArray.length-1; i>=0; i--) {
            System.out.println(strArray[i]);
        }
        return lessThan10.get(Integer.valueOf(num));
    }
}

**************************************
NumberNamesTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class NumberNamesTest {
    
    
    public void testNameLessThan10() {
        assertEquals("Zero", NumberNames.convertToName(0));
        assertEquals("One", NumberNames.convertToName(1));
        assertEquals("Two", NumberNames.convertToName(2));
        assertEquals("Three", NumberNames.convertToName(3));
        assertEquals("Four", NumberNames.convertToName(4));
        assertEquals("Five", NumberNames.convertToName(5));
        assertEquals("Six", NumberNames.convertToName(6));
        assertEquals("Seven", NumberNames.convertToName(7));
        assertEquals("Eight", NumberNames.convertToName(8));        
        assertEquals("Nine", NumberNames.convertToName(9));
    }

    
    public void testNameLessThan100() {
        assertEquals("Ten", NumberNames.convertToName(10));
        assertEquals("Eleven", NumberNames.convertToName(11));
        assertEquals("Twelve", NumberNames.convertToName(12));
        assertEquals("Thirteen", NumberNames.convertToName(13));
        assertEquals("Fourteen", NumberNames.convertToName(14));
        assertEquals("Fifteen", NumberNames.convertToName(15));
        assertEquals("Sixteen", NumberNames.convertToName(16));
        assertEquals("Seven", NumberNames.convertToName(17));
        assertEquals("Eighteen", NumberNames.convertToName(18));
        assertEquals("Nineteen", NumberNames.convertToName(19));
        assertEquals("Twenty", NumberNames.convertToName(20));
        assertEquals("Thirty", NumberNames.convertToName(30));
        assertEquals("Forty", NumberNames.convertToName(40));
        assertEquals("Fifty", NumberNames.convertToName(50));
        assertEquals("Sixty", NumberNames.convertToName(60));
        assertEquals("Seventy", NumberNames.convertToName(70));
        assertEquals("Eighty", NumberNames.convertToName(80));
        assertEquals("Ninety", NumberNames.convertToName(998765));
    }

    @Test
    public void test() {
NumberNames.convertToName(87654);
//assertEquals("Ninety", NumberNames.convertToName(87654));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6BFB9F3C16 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        String result = "";
        String inAsStr = "" + input;


        for (int i = inAsStr.length()-1; i >= 0; i--) {
            char temp = inAsStr.charAt(i);
            if(temp == '9'){
                result += " nine";
            } else if (temp == '8'){
                result += " eight";
            } else if (temp == '7'){
                result = "seven";
            } else if (temp == '6'){
                result = "six";
            } else if (temp == '5'){
                result = "five";
            } else if (temp == '4'){
                result = "four";
            } else if (temp == '3'){
                result = "three";
            } else if (temp == '2'){
                result = "two";
            } else if (temp == '1'){
                result = "one";
            }
        }   

        

        return result;
    }
    
    

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
 @Test
    public void numberTest9() {
        String expected = " nine";
        String actual = Untitled.answer(9);
        assertEquals(expected, actual);
    }

    @Test
    public void numberTest99() {
        String expected = "ninety nine";
        String actual = Untitled.answer(99);
        assertEquals(expected, actual);
    }

@Test
    public void numberTest310() {
        String expected = "three hundred and ten";
        String actual = Untitled.answer(310);
        assertEquals(expected, actual);
    }

@Test
    public void numberTest300() {
        String expected = "three hundred";
        String actual = Untitled.answer(300);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        String result = "";
        String inAsStr = "" + input;


        for (int i = inAsStr.length()-1; i >= 0; i--) {
            char temp = inAsStr.charAt(i);
            if(temp == '9'){
                result += " nine";
            } else if (temp == '8'){
                result += " eight";
            } else if (temp == '7'){
                result = "seven";
            } else if (temp == '6'){
                result = "six";
            } else if (temp == '5'){
                result = "five";
            } else if (temp == '4'){
                result = "four";
            } else if (temp == '3'){
                result = "three";
            } else if (temp == '2'){
                result = "two";
            } else if (temp == '1'){
                result = "one";
            }
        }   

        

        return result;
    }
    
    

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
 @Test
    public void numberTest9() {
        String expected = " nine";
        String actual = Untitled.answer(9);
        assertEquals(expected, actual);
    }

    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6BFB9F3C16 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 33
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        String result = "";
        String inAsStr = "" + input;
        
    int lenght = inAsStr.length();
        for (int i = 0; i < lenght ; i++) {
            int pos = lenght -i-1;
            char temp = inAsStr.charAt(pos);

            if (pos%3 == 0) result += einer(temp);
            if (pos%3 == 1) result += zehner(temp);
        }   
        

        return result.trim();
    }
    
    public static String einer(char temp){
        String result = "";

            if(temp == '9'){
                result += " nine";
            } else if (temp == '8'){
                result += " eight";
            } else if (temp == '7'){
                result = "seven";
            } else if (temp == '6'){
                result = "six";
            } else if (temp == '5'){
                result = "five";
            } else if (temp == '4'){
                result = "four";
            } else if (temp == '3'){
                result = "three";
            } else if (temp == '2'){
                result = "two";
            } else if (temp == '1'){
                result = "one";
            }
    return result;
}

    public static String zehner(char temp){
        String result = "";

            if(temp == '9'){
                result += " ninety";
            } else if (temp == '8'){
                result += " eighty";
            } else if (temp == '7'){
                result = "seventy";
            } else if (temp == '6'){
                result = "sixty";
            } else if (temp == '5'){
                result = "fifty";
            } else if (temp == '4'){
                result = "fourty";
            } else if (temp == '3'){
                result = "thirty";
            } else if (temp == '2'){
                result = "twenty";
            } else if (temp == '1'){
                result = "one";
            }
    return result;
}
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
 @Test
    public void numberTest9() {
        String expected = "nine";
        String actual = Untitled.answer(9);
        assertEquals(expected, actual);
    }

    @Test
    public void numberTest99() {
        String expected = "ninety nine";
        String actual = Untitled.answer(99);
        assertEquals(expected, actual);
    }

@Test
    public void numberTest310() {
        String expected = "three hundred and ten";
        String actual = Untitled.answer(310);
        assertEquals(expected, actual);
    }

@Test
    public void numberTest300() {
        String expected = "three hundred";
        String actual = Untitled.answer(300);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 33
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int input) {
        String result = "";
        String inAsStr = "" + input;
        
    int lenght = inAsStr.length();
        for (int i = 0; i < lenght ; i++) {
            int pos = lenght -i-1;
            char temp = inAsStr.charAt(pos);

            if (pos%3 == 0) result += einer(temp);
            if (pos%3 == 1) result += zehner(temp);
        }   
        

        return result.trim();
    }
    
    public static String einer(char temp){
        String result = "";

            if(temp == '9'){
                result += " nine";
            } else if (temp == '8'){
                result += " eight";
            } else if (temp == '7'){
                result = "seven";
            } else if (temp == '6'){
                result = "six";
            } else if (temp == '5'){
                result = "five";
            } else if (temp == '4'){
                result = "four";
            } else if (temp == '3'){
                result = "three";
            } else if (temp == '2'){
                result = "two";
            } else if (temp == '1'){
                result = "one";
            }
    return result;
}

    public static String zehner(char temp){
        String result = "";

            if(temp == '9'){
                result += " ninety";
            } else if (temp == '8'){
                result += " eighty";
            } else if (temp == '7'){
                result = "seventy";
            } else if (temp == '6'){
                result = "sixty";
            } else if (temp == '5'){
                result = "fifty";
            } else if (temp == '4'){
                result = "fourty";
            } else if (temp == '3'){
                result = "thirty";
            } else if (temp == '2'){
                result = "twenty";
            } else if (temp == '1'){
                result = "one";
            }
    return result;
}
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
 @Test
    public void numberTest9() {
        String expected = "nine";
        String actual = Untitled.answer(9);
        assertEquals(expected, actual);
    }

    @Test
    public void numberTest99() {
        String expected = "ninety nine";
        String actual = Untitled.answer(99);
        assertEquals(expected, actual);
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6BFB9F3C16 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 43
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    Speller out;

    @Before
    public void setUp() {
        out= new Speller();
    }

    @Test
    public void testSingleNumber() {
        assertEquals("zero", out.say(0));
        assertEquals("one", out.say(1));
        assertEquals("two", out.say(2));
        assertEquals("three", out.say(3));
        assertEquals("four", out.say(4));
        assertEquals("five", out.say(5));
        assertEquals("six", out.say(6));
        assertEquals("seven", out.say(7));
        assertEquals("eight", out.say(8));
        assertEquals("nine", out.say(9));
    }

    @Test    
    public void test1x() {
        assertEquals("ten", out.say(10));
        assertEquals("eleven", out.say(11));
        assertEquals("twelve",out.say(12));
        assertEquals("thirteen",out.say(13));
        assertEquals("fourteen",out.say(14));
        assertEquals("fiveteen",out.say(15));
        assertEquals("sixteen",out.say(16));
        assertEquals("seventeen",out.say(17));
        assertEquals("eightteen",out.say(18));
        assertEquals("nineteen",out.say(19));
    }

    @Test    
    public void test20() {
        assertEquals("twenty", out.say(20));
        assertEquals("twenty one", out.say(21));
        assertEquals("twenty two", out.say(22));
        assertEquals("twenty nine", out.say(29));
    }

    @Test    
    public void test30() {
        assertEquals("thirty", out.say(30));
        assertEquals("thirty one", out.say(31));
        assertEquals("thirty two", out.say(32));
        assertEquals("thirty nine", out.say(39));
    }
    @Test    
    public void test90() {
        assertEquals("ninety", out.say(90));
        assertEquals("ninety one", out.say(91));
        assertEquals("ninety two", out.say(92));
        assertEquals("ninety nine", out.say(99));
    }

    @Test    
    public void test100() {
        assertEquals("one hundred", out.say(100));
        assertEquals("one hundred and one", out.say(101));
        assertEquals("one hundred and eleven", out.say(111));
        assertEquals("one hundred and twenty", out.say(120));
        assertEquals("one hundred and twenty one", out.say(121));
        assertEquals("one hundred and ninety nine", out.say(199));
    }

    @Test    
    public void test200() {
        assertEquals("two hundred", out.say(200));
        assertEquals("two hundred and one", out.say(201));
        assertEquals("two hundred and eleven", out.say(211));
        assertEquals("two hundred and twenty", out.say(220));
        assertEquals("two hundred and twenty one", out.say(221));
        assertEquals("two hundred and ninety nine", out.say(299));
    }

    @Test    
    public void test900() {
        assertEquals("nine hundred", out.say(900));
        assertEquals("nine hundred and one", out.say(901));
        assertEquals("nine hundred and eleven", out.say(911));
        assertEquals("nine hundred and twenty", out.say(920));
        assertEquals("nine hundred and fourty one", out.say(941));
        assertEquals("nine hundred and ninety nine", out.say(999));
    }
    @Test    
    public void test1000() {
        assertEquals("one thousand", out.say(1000));
    }

    @Test
    public void test1000SingleNumber() {
        assertEquals("one thousand", out.say(1000));
        assertEquals("one thousand and one", out.say(1001));
        assertEquals("one thousand and two", out.say(1002));
        assertEquals("one thousand and three", out.say(1003));
        assertEquals("one thousand and four", out.say(1004));
        assertEquals("one thousand and five", out.say(1005));
        assertEquals("one thousand and six", out.say(1006));
        assertEquals("one thousand and seven", out.say(1007));
        assertEquals("one thousand and eight", out.say(1008));
        assertEquals("one thousand and nine", out.say(1009));
    }

    @Test    
    public void test10001x() {
        assertEquals("one thousand and ten", out.say(1010));
        assertEquals("one thousand and eleven", out.say(1011));
        assertEquals("one thousand and twelve",out.say(1012));
        assertEquals("one thousand and thirteen",out.say(1013));
        assertEquals("one thousand and fourteen",out.say(1014));
        assertEquals("one thousand and fiveteen",out.say(1015));
        assertEquals("one thousand and sixteen",out.say(1016));
        assertEquals("one thousand and seventeen",out.say(1017));
        assertEquals("one thousand and eightteen",out.say(1018));
        assertEquals("one thousand and nineteen",out.say(1019));
    }

    @Test    
    public void test1020() {
        assertEquals("one thousand and twenty", out.say(1020));
        assertEquals("one thousand and twenty one", out.say(1021));
        assertEquals("one thousand and twenty two", out.say(1022));
        assertEquals("one thousand and twenty nine", out.say(1029));
    }

    @Test    
    public void test1030() {
        assertEquals("one thousand and thirty", out.say(1030));
        assertEquals("one thousand and thirty one", out.say(1031));
        assertEquals("one thousand and thirty two", out.say(1032));
        assertEquals("one thousand and thirty nine", out.say(1039));
    }
    @Test    
    public void test1090() {
        assertEquals("one thousand and ninety", out.say(1090));
        assertEquals("one thousand and ninety one", out.say(1091));
        assertEquals("one thousand and ninety two", out.say(1092));
        assertEquals("one thousand and ninety nine", out.say(1099));
    }

    @Test    
    public void test10100() {
        assertEquals("one thousand and one hundred", out.say(1100));
        assertEquals("one thousand and one hundred and one", out.say(1101));
        assertEquals("one thousand and one hundred and eleven", out.say(1111));
        assertEquals("one thousand and one hundred and twenty", out.say(1120));
        assertEquals("one thousand and one hundred and twenty one", out.say(1121));
        assertEquals("one thousand and one hundred and ninety nine", out.say(1199));
    }

    @Test    
    public void test10200() {
        assertEquals("one thousand and two hundred", out.say(1200));
        assertEquals("one thousand and two hundred and one", out.say(1201));
        assertEquals("one thousand and two hundred and eleven", out.say(1211));
        assertEquals("one thousand and two hundred and twenty", out.say(1220));
        assertEquals("one thousand and two hundred and twenty one", out.say(1221));
        assertEquals("one thousand and two hundred and ninety nine", out.say(1299));
    }

    @Test    
    public void test1900() {
        assertEquals("one thousand and nine hundred", out.say(1900));
        assertEquals("one thousand and nine hundred and one", out.say(1901));
        assertEquals("one thousand and nine hundred and eleven", out.say(1911));
        assertEquals("one thousand and nine hundred and twenty", out.say(1920));
        assertEquals("one thousand and nine hundred and fourty one", out.say(1941));
        assertEquals("one thousand and nine hundred and ninety nine", out.say(1999));
    }
    @Test    
    public void test9999() {
        assertEquals("nine thousand and nine hundred and ninety nine", out.say(9999));
    }

    @Test    
    public void test10000() {
        assertEquals("ten thousand ", out.say(10000));
    }

}

**************************************
Speller.java
**************************************
public class Speller {

    String[] number = new String[]{"zero", "one", "two", "three", "four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fiveteen","sixteen","seventeen","eightteen","nineteen"};
    String[] zehner = new String[]{"twenty", "thirty", "fourty", "fivty", "sixty","seventy","eighty","ninety"};
        

    public String say(int pNumber) {
        String result = "";
        
        if(pNumber >= 1000 && pNumber<10000){
            result += number[pNumber/1000] + " thousand";
            pNumber = pNumber % 1000;
            if (pNumber != 0) {
                result += " and ";
            }
        }

        if(pNumber >= 100 && pNumber<1000){
            result += number[pNumber/100] + " hundred";
            pNumber = pNumber % 100;
            if (pNumber != 0) {
                result += " and ";
            }
        }

        if (pNumber >= 20) {
            result += zehner[(pNumber / 10)-2] + ((pNumber % 10 == 0) ? "" : " "+number[pNumber%10]);
        } else {
            if (result.length() == 0) {            
                result += number[pNumber];
            }else{
                if (pNumber != 0) {
                    result += number[pNumber];
                }
            }
        }
       
        return result;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 43
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    Speller out;

    @Before
    public void setUp() {
        out= new Speller();
    }

    @Test
    public void testSingleNumber() {
        assertEquals("zero", out.say(0));
        assertEquals("one", out.say(1));
        assertEquals("two", out.say(2));
        assertEquals("three", out.say(3));
        assertEquals("four", out.say(4));
        assertEquals("five", out.say(5));
        assertEquals("six", out.say(6));
        assertEquals("seven", out.say(7));
        assertEquals("eight", out.say(8));
        assertEquals("nine", out.say(9));
    }

    @Test    
    public void test1x() {
        assertEquals("ten", out.say(10));
        assertEquals("eleven", out.say(11));
        assertEquals("twelve",out.say(12));
        assertEquals("thirteen",out.say(13));
        assertEquals("fourteen",out.say(14));
        assertEquals("fiveteen",out.say(15));
        assertEquals("sixteen",out.say(16));
        assertEquals("seventeen",out.say(17));
        assertEquals("eightteen",out.say(18));
        assertEquals("nineteen",out.say(19));
    }

    @Test    
    public void test20() {
        assertEquals("twenty", out.say(20));
        assertEquals("twenty one", out.say(21));
        assertEquals("twenty two", out.say(22));
        assertEquals("twenty nine", out.say(29));
    }

    @Test    
    public void test30() {
        assertEquals("thirty", out.say(30));
        assertEquals("thirty one", out.say(31));
        assertEquals("thirty two", out.say(32));
        assertEquals("thirty nine", out.say(39));
    }
    @Test    
    public void test90() {
        assertEquals("ninety", out.say(90));
        assertEquals("ninety one", out.say(91));
        assertEquals("ninety two", out.say(92));
        assertEquals("ninety nine", out.say(99));
    }

    @Test    
    public void test100() {
        assertEquals("one hundred", out.say(100));
        assertEquals("one hundred and one", out.say(101));
        assertEquals("one hundred and eleven", out.say(111));
        assertEquals("one hundred and twenty", out.say(120));
        assertEquals("one hundred and twenty one", out.say(121));
        assertEquals("one hundred and ninety nine", out.say(199));
    }

    @Test    
    public void test200() {
        assertEquals("two hundred", out.say(200));
        assertEquals("two hundred and one", out.say(201));
        assertEquals("two hundred and eleven", out.say(211));
        assertEquals("two hundred and twenty", out.say(220));
        assertEquals("two hundred and twenty one", out.say(221));
        assertEquals("two hundred and ninety nine", out.say(299));
    }

    @Test    
    public void test900() {
        assertEquals("nine hundred", out.say(900));
        assertEquals("nine hundred and one", out.say(901));
        assertEquals("nine hundred and eleven", out.say(911));
        assertEquals("nine hundred and twenty", out.say(920));
        assertEquals("nine hundred and fourty one", out.say(941));
        assertEquals("nine hundred and ninety nine", out.say(999));
    }
    @Test    
    public void test1000() {
        assertEquals("one thousand", out.say(1000));
    }

    @Test
    public void test1000SingleNumber() {
        assertEquals("one thousand", out.say(1000));
        assertEquals("one thousand and one", out.say(1001));
        assertEquals("one thousand and two", out.say(1002));
        assertEquals("one thousand and three", out.say(1003));
        assertEquals("one thousand and four", out.say(1004));
        assertEquals("one thousand and five", out.say(1005));
        assertEquals("one thousand and six", out.say(1006));
        assertEquals("one thousand and seven", out.say(1007));
        assertEquals("one thousand and eight", out.say(1008));
        assertEquals("one thousand and nine", out.say(1009));
    }

    @Test    
    public void test10001x() {
        assertEquals("one thousand and ten", out.say(1010));
        assertEquals("one thousand and eleven", out.say(1011));
        assertEquals("one thousand and twelve",out.say(1012));
        assertEquals("one thousand and thirteen",out.say(1013));
        assertEquals("one thousand and fourteen",out.say(1014));
        assertEquals("one thousand and fiveteen",out.say(1015));
        assertEquals("one thousand and sixteen",out.say(1016));
        assertEquals("one thousand and seventeen",out.say(1017));
        assertEquals("one thousand and eightteen",out.say(1018));
        assertEquals("one thousand and nineteen",out.say(1019));
    }

    @Test    
    public void test1020() {
        assertEquals("one thousand and twenty", out.say(1020));
        assertEquals("one thousand and twenty one", out.say(1021));
        assertEquals("one thousand and twenty two", out.say(1022));
        assertEquals("one thousand and twenty nine", out.say(1029));
    }

    @Test    
    public void test1030() {
        assertEquals("one thousand and thirty", out.say(1030));
        assertEquals("one thousand and thirty one", out.say(1031));
        assertEquals("one thousand and thirty two", out.say(1032));
        assertEquals("one thousand and thirty nine", out.say(1039));
    }
    @Test    
    public void test1090() {
        assertEquals("one thousand and ninety", out.say(1090));
        assertEquals("one thousand and ninety one", out.say(1091));
        assertEquals("one thousand and ninety two", out.say(1092));
        assertEquals("one thousand and ninety nine", out.say(1099));
    }

    @Test    
    public void test10100() {
        assertEquals("one thousand and one hundred", out.say(1100));
        assertEquals("one thousand and one hundred and one", out.say(1101));
        assertEquals("one thousand and one hundred and eleven", out.say(1111));
        assertEquals("one thousand and one hundred and twenty", out.say(1120));
        assertEquals("one thousand and one hundred and twenty one", out.say(1121));
        assertEquals("one thousand and one hundred and ninety nine", out.say(1199));
    }

    @Test    
    public void test10200() {
        assertEquals("one thousand and two hundred", out.say(1200));
        assertEquals("one thousand and two hundred and one", out.say(1201));
        assertEquals("one thousand and two hundred and eleven", out.say(1211));
        assertEquals("one thousand and two hundred and twenty", out.say(1220));
        assertEquals("one thousand and two hundred and twenty one", out.say(1221));
        assertEquals("one thousand and two hundred and ninety nine", out.say(1299));
    }

    @Test    
    public void test1900() {
        assertEquals("one thousand and nine hundred", out.say(1900));
        assertEquals("one thousand and nine hundred and one", out.say(1901));
        assertEquals("one thousand and nine hundred and eleven", out.say(1911));
        assertEquals("one thousand and nine hundred and twenty", out.say(1920));
        assertEquals("one thousand and nine hundred and fourty one", out.say(1941));
        assertEquals("one thousand and nine hundred and ninety nine", out.say(1999));
    }
    @Test    
    public void test9999() {
        assertEquals("nine thousand and nine hundred and ninety nine", out.say(9999));
    }
}

**************************************
Speller.java
**************************************
public class Speller {

    String[] number = new String[]{"zero", "one", "two", "three", "four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fiveteen","sixteen","seventeen","eightteen","nineteen"};
    String[] zehner = new String[]{"twenty", "thirty", "fourty", "fivty", "sixty","seventy","eighty","ninety"};
        

    public String say(int pNumber) {
        String result = "";
        
        if(pNumber >= 1000 && pNumber<10000){
            result += number[pNumber/1000] + " thousand";
            pNumber = pNumber % 1000;
            if (pNumber != 0) {
                result += " and ";
            }
        }

        if(pNumber >= 100 && pNumber<1000){
            result += number[pNumber/100] + " hundred";
            pNumber = pNumber % 100;
            if (pNumber != 0) {
                result += " and ";
            }
        }

        if (pNumber >= 20) {
            result += zehner[(pNumber / 10)-2] + ((pNumber % 10 == 0) ? "" : " "+number[pNumber%10]);
        } else {
            if (result.length() == 0) {            
                result += number[pNumber];
            }else{
                if (pNumber != 0) {
                    result += number[pNumber];
                }
            }
        }
       
        return result;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6BFB9F3C16 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 60
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    Speller out;

    @Before
    public void setUp() {
        out= new Speller();
    }

    @Test
    public void testSingleNumber() {
        assertEquals("zero", out.say(0));
        assertEquals("one", out.say(1));
        assertEquals("two", out.say(2));
        assertEquals("three", out.say(3));
        assertEquals("four", out.say(4));
        assertEquals("five", out.say(5));
        assertEquals("six", out.say(6));
        assertEquals("seven", out.say(7));
        assertEquals("eight", out.say(8));
        assertEquals("nine", out.say(9));
    }

    @Test    
    public void test1x() {
        assertEquals("ten", out.say(10));
        assertEquals("eleven", out.say(11));
        assertEquals("twelve",out.say(12));
        assertEquals("thirteen",out.say(13));
        assertEquals("fourteen",out.say(14));
        assertEquals("fiveteen",out.say(15));
        assertEquals("sixteen",out.say(16));
        assertEquals("seventeen",out.say(17));
        assertEquals("eightteen",out.say(18));
        assertEquals("nineteen",out.say(19));
    }

    @Test    
    public void test20() {
        assertEquals("twenty", out.say(20));
        assertEquals("twenty one", out.say(21));
        assertEquals("twenty two", out.say(22));
        assertEquals("twenty nine", out.say(29));
    }

    @Test    
    public void test30() {
        assertEquals("thirty", out.say(30));
        assertEquals("thirty one", out.say(31));
        assertEquals("thirty two", out.say(32));
        assertEquals("thirty nine", out.say(39));
    }
    @Test    
    public void test90() {
        assertEquals("ninety", out.say(90));
        assertEquals("ninety one", out.say(91));
        assertEquals("ninety two", out.say(92));
        assertEquals("ninety nine", out.say(99));
    }

    @Test    
    public void test100() {
        assertEquals("one hundred", out.say(100));
        assertEquals("one hundred and one", out.say(101));
        assertEquals("one hundred and eleven", out.say(111));
        assertEquals("one hundred and twenty", out.say(120));
        assertEquals("one hundred and twenty one", out.say(121));
        assertEquals("one hundred and ninety nine", out.say(199));
    }

    @Test    
    public void test200() {
        assertEquals("two hundred", out.say(200));
        assertEquals("two hundred and one", out.say(201));
        assertEquals("two hundred and eleven", out.say(211));
        assertEquals("two hundred and twenty", out.say(220));
        assertEquals("two hundred and twenty one", out.say(221));
        assertEquals("two hundred and ninety nine", out.say(299));
    }

    @Test    
    public void test900() {
        assertEquals("nine hundred", out.say(900));
        assertEquals("nine hundred and one", out.say(901));
        assertEquals("nine hundred and eleven", out.say(911));
        assertEquals("nine hundred and twenty", out.say(920));
        assertEquals("nine hundred and fourty one", out.say(941));
        assertEquals("nine hundred and ninety nine", out.say(999));
    }
    @Test    
    public void test1000() {
        assertEquals("one thousand", out.say(1000));
    }

    @Test
    public void test1000SingleNumber() {
        assertEquals("one thousand", out.say(1000));
        assertEquals("one thousand and one", out.say(1001));
        assertEquals("one thousand and two", out.say(1002));
        assertEquals("one thousand and three", out.say(1003));
        assertEquals("one thousand and four", out.say(1004));
        assertEquals("one thousand and five", out.say(1005));
        assertEquals("one thousand and six", out.say(1006));
        assertEquals("one thousand and seven", out.say(1007));
        assertEquals("one thousand and eight", out.say(1008));
        assertEquals("one thousand and nine", out.say(1009));
    }

    @Test    
    public void test10001x() {
        assertEquals("one thousand and ten", out.say(1010));
        assertEquals("one thousand and eleven", out.say(1011));
        assertEquals("one thousand and twelve",out.say(1012));
        assertEquals("one thousand and thirteen",out.say(1013));
        assertEquals("one thousand and fourteen",out.say(1014));
        assertEquals("one thousand and fiveteen",out.say(1015));
        assertEquals("one thousand and sixteen",out.say(1016));
        assertEquals("one thousand and seventeen",out.say(1017));
        assertEquals("one thousand and eightteen",out.say(1018));
        assertEquals("one thousand and nineteen",out.say(1019));
    }

    @Test    
    public void test1020() {
        assertEquals("one thousand and twenty", out.say(1020));
        assertEquals("one thousand and twenty one", out.say(1021));
        assertEquals("one thousand and twenty two", out.say(1022));
        assertEquals("one thousand and twenty nine", out.say(1029));
    }

    @Test    
    public void test1030() {
        assertEquals("one thousand and thirty", out.say(1030));
        assertEquals("one thousand and thirty one", out.say(1031));
        assertEquals("one thousand and thirty two", out.say(1032));
        assertEquals("one thousand and thirty nine", out.say(1039));
    }
    @Test    
    public void test1090() {
        assertEquals("one thousand and ninety", out.say(1090));
        assertEquals("one thousand and ninety one", out.say(1091));
        assertEquals("one thousand and ninety two", out.say(1092));
        assertEquals("one thousand and ninety nine", out.say(1099));
    }

    @Test    
    public void test10100() {
        assertEquals("one thousand and one hundred", out.say(1100));
        assertEquals("one thousand and one hundred and one", out.say(1101));
        assertEquals("one thousand and one hundred and eleven", out.say(1111));
        assertEquals("one thousand and one hundred and twenty", out.say(1120));
        assertEquals("one thousand and one hundred and twenty one", out.say(1121));
        assertEquals("one thousand and one hundred and ninety nine", out.say(1199));
    }

    @Test    
    public void test10200() {
        assertEquals("one thousand and two hundred", out.say(1200));
        assertEquals("one thousand and two hundred and one", out.say(1201));
        assertEquals("one thousand and two hundred and eleven", out.say(1211));
        assertEquals("one thousand and two hundred and twenty", out.say(1220));
        assertEquals("one thousand and two hundred and twenty one", out.say(1221));
        assertEquals("one thousand and two hundred and ninety nine", out.say(1299));
    }

    @Test    
    public void test1900() {
        assertEquals("one thousand and nine hundred", out.say(1900));
        assertEquals("one thousand and nine hundred and one", out.say(1901));
        assertEquals("one thousand and nine hundred and eleven", out.say(1911));
        assertEquals("one thousand and nine hundred and twenty", out.say(1920));
        assertEquals("one thousand and nine hundred and fourty one", out.say(1941));
        assertEquals("one thousand and nine hundred and ninety nine", out.say(1999));
    }
    @Test    
    public void test9999() {
        assertEquals("nine thousand and nine hundred and ninety nine", out.say(9999));
    }
    @Test    
    public void test10000() {
        assertEquals("ten thousand", out.say(10000));
    }
    @Test    
    public void test12345() {
        assertEquals("twelve thousand and three hundred and fourty five",out.say(12345));
    }
}

**************************************
Speller.java
**************************************
public class Speller {

    String[] number = new String[]{"zero", "one", "two", "three", "four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fiveteen","sixteen","seventeen","eightteen","nineteen"};
    String[] zehner = new String[]{"twenty", "thirty", "fourty", "fivty", "sixty","seventy","eighty","ninety"};
        

    public String say(int pNumber) {
        String result = "";        

        if (pNumber >= 10000) {
            result = sayHundredAndBelow(pNumber / 1000, result);
            result += " thousand";
            pNumber = pNumber % 10000;
        }

        result = sayTenThousandTillThousand(pNumber, result);
        pNumber = pNumber % 1000;


        result = sayThousandTillHundred(pNumber, result);
        pNumber = pNumber % 100;

        result = sayHundredAndBelow(pNumber, result);       
        return result;
    }

    private String sayTenThousandTillThousand(int pNumber, String pResult) {
        return sayX(pNumber, pResult, 1000, "thousand");

    }

    private String sayX(int pNumber, String pResult, int pFactor, String pSep) {
        if(pNumber >= pFactor && pNumber<(pFactor*10)){
            pResult += number[pNumber/pFactor] + " "+pSep;
            if ((pNumber % pFactor) != 0) {
                pResult += " and ";
            }
        }
        return pResult;
    }

    private String sayThousandTillHundred(int pNumber, String pResult) {
        return sayX(pNumber, pResult, 100, "hundred");
    }

    private String sayHundredAndBelow(int pNumber, String pResult) {
        if (pNumber >= 20) {
            pResult += zehner[(pNumber / 10)-2] + ((pNumber % 10 == 0) ? "" : " "+number[pNumber%10]);
        } else {
            if (pResult.length() == 0) {            
                pResult += number[pNumber];
            }else{
                if (pNumber != 0) {
                    pResult += number[pNumber];
                }
            }
        }
        return pResult;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 60
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    Speller out;

    @Before
    public void setUp() {
        out= new Speller();
    }

    @Test
    public void testSingleNumber() {
        assertEquals("zero", out.say(0));
        assertEquals("one", out.say(1));
        assertEquals("two", out.say(2));
        assertEquals("three", out.say(3));
        assertEquals("four", out.say(4));
        assertEquals("five", out.say(5));
        assertEquals("six", out.say(6));
        assertEquals("seven", out.say(7));
        assertEquals("eight", out.say(8));
        assertEquals("nine", out.say(9));
    }

    @Test    
    public void test1x() {
        assertEquals("ten", out.say(10));
        assertEquals("eleven", out.say(11));
        assertEquals("twelve",out.say(12));
        assertEquals("thirteen",out.say(13));
        assertEquals("fourteen",out.say(14));
        assertEquals("fiveteen",out.say(15));
        assertEquals("sixteen",out.say(16));
        assertEquals("seventeen",out.say(17));
        assertEquals("eightteen",out.say(18));
        assertEquals("nineteen",out.say(19));
    }

    @Test    
    public void test20() {
        assertEquals("twenty", out.say(20));
        assertEquals("twenty one", out.say(21));
        assertEquals("twenty two", out.say(22));
        assertEquals("twenty nine", out.say(29));
    }

    @Test    
    public void test30() {
        assertEquals("thirty", out.say(30));
        assertEquals("thirty one", out.say(31));
        assertEquals("thirty two", out.say(32));
        assertEquals("thirty nine", out.say(39));
    }
    @Test    
    public void test90() {
        assertEquals("ninety", out.say(90));
        assertEquals("ninety one", out.say(91));
        assertEquals("ninety two", out.say(92));
        assertEquals("ninety nine", out.say(99));
    }

    @Test    
    public void test100() {
        assertEquals("one hundred", out.say(100));
        assertEquals("one hundred and one", out.say(101));
        assertEquals("one hundred and eleven", out.say(111));
        assertEquals("one hundred and twenty", out.say(120));
        assertEquals("one hundred and twenty one", out.say(121));
        assertEquals("one hundred and ninety nine", out.say(199));
    }

    @Test    
    public void test200() {
        assertEquals("two hundred", out.say(200));
        assertEquals("two hundred and one", out.say(201));
        assertEquals("two hundred and eleven", out.say(211));
        assertEquals("two hundred and twenty", out.say(220));
        assertEquals("two hundred and twenty one", out.say(221));
        assertEquals("two hundred and ninety nine", out.say(299));
    }

    @Test    
    public void test900() {
        assertEquals("nine hundred", out.say(900));
        assertEquals("nine hundred and one", out.say(901));
        assertEquals("nine hundred and eleven", out.say(911));
        assertEquals("nine hundred and twenty", out.say(920));
        assertEquals("nine hundred and fourty one", out.say(941));
        assertEquals("nine hundred and ninety nine", out.say(999));
    }
    @Test    
    public void test1000() {
        assertEquals("one thousand", out.say(1000));
    }

    @Test
    public void test1000SingleNumber() {
        assertEquals("one thousand", out.say(1000));
        assertEquals("one thousand and one", out.say(1001));
        assertEquals("one thousand and two", out.say(1002));
        assertEquals("one thousand and three", out.say(1003));
        assertEquals("one thousand and four", out.say(1004));
        assertEquals("one thousand and five", out.say(1005));
        assertEquals("one thousand and six", out.say(1006));
        assertEquals("one thousand and seven", out.say(1007));
        assertEquals("one thousand and eight", out.say(1008));
        assertEquals("one thousand and nine", out.say(1009));
    }

    @Test    
    public void test10001x() {
        assertEquals("one thousand and ten", out.say(1010));
        assertEquals("one thousand and eleven", out.say(1011));
        assertEquals("one thousand and twelve",out.say(1012));
        assertEquals("one thousand and thirteen",out.say(1013));
        assertEquals("one thousand and fourteen",out.say(1014));
        assertEquals("one thousand and fiveteen",out.say(1015));
        assertEquals("one thousand and sixteen",out.say(1016));
        assertEquals("one thousand and seventeen",out.say(1017));
        assertEquals("one thousand and eightteen",out.say(1018));
        assertEquals("one thousand and nineteen",out.say(1019));
    }

    @Test    
    public void test1020() {
        assertEquals("one thousand and twenty", out.say(1020));
        assertEquals("one thousand and twenty one", out.say(1021));
        assertEquals("one thousand and twenty two", out.say(1022));
        assertEquals("one thousand and twenty nine", out.say(1029));
    }

    @Test    
    public void test1030() {
        assertEquals("one thousand and thirty", out.say(1030));
        assertEquals("one thousand and thirty one", out.say(1031));
        assertEquals("one thousand and thirty two", out.say(1032));
        assertEquals("one thousand and thirty nine", out.say(1039));
    }
    @Test    
    public void test1090() {
        assertEquals("one thousand and ninety", out.say(1090));
        assertEquals("one thousand and ninety one", out.say(1091));
        assertEquals("one thousand and ninety two", out.say(1092));
        assertEquals("one thousand and ninety nine", out.say(1099));
    }

    @Test    
    public void test10100() {
        assertEquals("one thousand and one hundred", out.say(1100));
        assertEquals("one thousand and one hundred and one", out.say(1101));
        assertEquals("one thousand and one hundred and eleven", out.say(1111));
        assertEquals("one thousand and one hundred and twenty", out.say(1120));
        assertEquals("one thousand and one hundred and twenty one", out.say(1121));
        assertEquals("one thousand and one hundred and ninety nine", out.say(1199));
    }

    @Test    
    public void test10200() {
        assertEquals("one thousand and two hundred", out.say(1200));
        assertEquals("one thousand and two hundred and one", out.say(1201));
        assertEquals("one thousand and two hundred and eleven", out.say(1211));
        assertEquals("one thousand and two hundred and twenty", out.say(1220));
        assertEquals("one thousand and two hundred and twenty one", out.say(1221));
        assertEquals("one thousand and two hundred and ninety nine", out.say(1299));
    }

    @Test    
    public void test1900() {
        assertEquals("one thousand and nine hundred", out.say(1900));
        assertEquals("one thousand and nine hundred and one", out.say(1901));
        assertEquals("one thousand and nine hundred and eleven", out.say(1911));
        assertEquals("one thousand and nine hundred and twenty", out.say(1920));
        assertEquals("one thousand and nine hundred and fourty one", out.say(1941));
        assertEquals("one thousand and nine hundred and ninety nine", out.say(1999));
    }
    @Test    
    public void test9999() {
        assertEquals("nine thousand and nine hundred and ninety nine", out.say(9999));
    }
    @Test    
    public void test10000() {
        assertEquals("ten thousand", out.say(10000));
    }
    @Test    
    public void test12345() {
//        assertEquals("twelve thousand and three hundred and fourty five",out.say(12345));
    }
}

**************************************
Speller.java
**************************************
public class Speller {

    String[] number = new String[]{"zero", "one", "two", "three", "four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fiveteen","sixteen","seventeen","eightteen","nineteen"};
    String[] zehner = new String[]{"twenty", "thirty", "fourty", "fivty", "sixty","seventy","eighty","ninety"};
        

    public String say(int pNumber) {
        String result = "";        

        if (pNumber >= 10000) {
            result = sayHundredAndBelow(pNumber / 1000, result);
            result += " thousand";
            pNumber = pNumber % 10000;
        }

        result = sayTenThousandTillThousand(pNumber, result);
        pNumber = pNumber % 1000;


        result = sayThousandTillHundred(pNumber, result);
        pNumber = pNumber % 100;

        result = sayHundredAndBelow(pNumber, result);       
        return result;
    }

    private String sayTenThousandTillThousand(int pNumber, String pResult) {
        return sayX(pNumber, pResult, 1000, "thousand");

    }

    private String sayX(int pNumber, String pResult, int pFactor, String pSep) {
        if(pNumber >= pFactor && pNumber<(pFactor*10)){
            pResult += number[pNumber/pFactor] + " "+pSep;
            if ((pNumber % pFactor) != 0) {
                pResult += " and ";
            }
        }
        return pResult;
    }

    private String sayThousandTillHundred(int pNumber, String pResult) {
        return sayX(pNumber, pResult, 100, "hundred");
    }

    private String sayHundredAndBelow(int pNumber, String pResult) {
        if (pNumber >= 20) {
            pResult += zehner[(pNumber / 10)-2] + ((pNumber % 10 == 0) ? "" : " "+number[pNumber%10]);
        } else {
            if (pResult.length() == 0) {            
                pResult += number[pNumber];
            }else{
                if (pNumber != 0) {
                    pResult += number[pNumber];
                }
            }
        }
        return pResult;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6B17E41A33 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assert(expected < 10);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 69F856024E deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return (6*9);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
 private FizzBuzz fb;
@Before
 public void setUp () throws Exception 
{
 fb = new FizzBuzz();

}

 @Test
  public void canEvaluate()
{
 fb.evaluate(1);
}

@Test 
 public void One()
{
 String result = fb.evaluate(1);
 if (assertEquals("1",result))
    System.out.println("1");

 }

}

**************************************
FizzBuzz.java
**************************************
public class FizzBuzz
{

 public String evaluate (int number)
 {
   return "1";
 }

 
 } 

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return (6*9);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
 private FizzBuzz fb;
@Before
 public void setUp () throws Exception 
{
 fb = new FizzBuzz();

}

 @Test
  public void canEvaluate()
{
 fb.evaluate(1);
}

@Test 
 public void One()
{
 String result = fb.evaluate(1);
 if ("1".equals(result))
    System.out.println("1");

 }

}

**************************************
FizzBuzz.java
**************************************
public class FizzBuzz
{

 public String evaluate (int number)
 {
   return "1";
 }

 
 } 



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 69EFC73CF9 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public int add(int a, int b) {
        return a+b;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestCalc {
    private Calc c;
    @Before
    public void setUp() {
        c = new Calc();
    }
    @Test
    public void testAdd() {
        assertEquals(5, c.add(2,3));
    }
}

**************************************
Calc.java
**************************************
public class Calc {
        public int add(int a, int b) {
        return a+b;
    }
}

**************************************
TestCalc.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestCalc {
    private Calc c;
    @Before
    public void setUp() {
        c = new Calc();
    }
    @Test
    public void testAdd() {
        assertEquals(5, c.add(2,3));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Calc.java
**************************************
public class Calc {
        public int add(int a, int b) {
        return a+b;
    }
}

**************************************
TestCalc.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TestCalc {
    private Calc c;
    @Before
    public void setUp() {
        c = new Calc();
    }
    @Test
    public void testAdd() {
        assertEquals(5, c.add(2,3));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 69D455DE2A snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stats.java
**************************************
import java.util.Arrays;
import java.util.List;

public class Stats{
    
    public static long min(List<Integer> vals) {
      Integer x = vals.get(0);  
      for (Integer i : vals)
         if (x > i) x = i;
      return x;
    }
    public static long max(List<Integer> vals) {
      Integer x = vals.get(0);  
      for (Integer i : vals)
         if (x < i) x = i;
      return x;
    }
    public static int size(List<Integer> vals) {
        return vals.size();
    }
    public static double avg(List<Integer> vals) {
      Double x = new Double(0);  
      for (Integer i : vals)
         x += i;
      return x/vals.size();    }
}

**************************************
StatsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.List;

public class StatsTest {
    
    @Test
    public void test1() {
         List<Integer> vals = Arrays.asList(6, 9, 15, -2, 92, 11);

       
         assertEquals(-2 , Stats.min(vals));
         assertEquals(92 , Stats.max(vals));
         assertEquals( 6 , Stats.size(vals));
         assertEquals(21.833333f , Stats.avg(vals), 0.0001);
    }

    @Test(expected=java.lang.NullPointerException.class)
    public void test2() {
         List<Integer> vals = null;
vals = Arrays.asList(6, 9, 15, -2, 92, 11);

       
         assertEquals(-2 , null);
         assertEquals(92 , Stats.max(vals));
         assertEquals( 6 , Stats.size(vals));
         assertEquals(21.833333f , Stats.avg(vals), 0.0001);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 35
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Stats.java
**************************************
import java.util.Arrays;
import java.util.List;

public class Stats{
    
    public static long min(List<Integer> vals) {
      Integer x = vals.get(0);  
      for (Integer i : vals)
         if (x > i) x = i;
      return x;
    }
    public static long max(List<Integer> vals) {
      Integer x = vals.get(0);  
      for (Integer i : vals)
         if (x < i) x = i;
      return x;
    }
    public static int size(List<Integer> vals) {
        return vals.size();
    }
    public static double avg(List<Integer> vals) {
      Double x = new Double(0);  
      for (Integer i : vals)
         x += i;
      return x/vals.size();    }
}

**************************************
StatsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.List;

public class StatsTest {
    
    @Test
    public void test() {
         List<Integer> vals = Arrays.asList(6, 9, 15, -2, 92, 11);

       
         assertEquals(-2 , Stats.min(vals));
         assertEquals(92 , Stats.max(vals));
         assertEquals( 6 , Stats.size(vals));
         assertEquals(21.833333f , Stats.avg(vals), 0.0001);
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6962EC3CB2 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    static int counter = 0;
    boolean mod3 = false;
    boolean mod5 = false;
    
    public static int answer() {
       counter++;
       if ( counter > 100 ){
        return counter = 0;
       }
       if (counter % 3 == 0) {
        return counter;
       }
       else { return counter; }
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 1;
        int actual = 0;
        assertEquals(expected, actual);
        for ( int i = 1; i <= 100; i++ ){
          expected = i;
          actual = Untitled.answer();
          assertEquals(expected, actual);
        }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    static int counter = 0;
    boolean mod3 = false;
    boolean mod5 = false;
    
    public static int answer() {
       counter++;
       if ( counter > 100 ){
        return counter = 0;
       }
       if (counter % 3 == 0) {
        return counter;
       }
       else { return counter; }
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 1;
        int actual = 0;
        for ( int i = 1; i <= 100; i++ ){
          expected = i;
          actual = Untitled.answer();
          assertEquals(expected, actual);
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 68B9C55AC5 deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************

public class RecentlyUsedList{
    
    String[] recentlyUsedList = new String[10];
    private int capacity = 0;
    public RecentlyUsedList(int capacity) {
        recentlyUsedList = new String[capacity];
    this.capacity = capacity;
    }
    public String getItemByIndex (int index) {
        return recentlyUsedList [index];
    }
    public void addItem(String item) {
        shiftList();
        recentlyUsedList [0] = item;
    }
    private void shiftList () {
        for (int x=getSize()-1; x>=0; x--) {
            recentlyUsedList[x] = recentlyUsedList[x-1];
        }
    }
    public int getSize() {
        return capacity;
    }

}

**************************************
RecentlyUsedListTests.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RecentlyUsedListTests{
    
    @Test
    public void recentlyUsedListCapacity() {
        RecentlyUsedList recentlyUsedList = new RecentlyUsedList (20); 
        assertEquals(20, recentlyUsedList.getSize());
    }
    @Test(expected=RuntimeException.class)
    public void recentlyUsedListIndexOutOfBounds() {
        RecentlyUsedList recentlyUsedList = new RecentlyUsedList (20); 
        recentlyUsedList.getItemByIndex(20);
    }
    @Test
    public void duplicateInsertionsAreMoved() {
        RecentlyUsedList recentlyUsedList = new RecentlyUsedList (10); 
        recentlyUsedList.addItem("Accounts.pdf"); 
        recentlyUsedList.addItem("Newspaper.pdf"); 
        recentlyUsedList.addItem("Book.pdf"); 
        recentlyUsedList.addItem("Fishes.pdf"); 
        assertEquals(recentlyUsedList.getItemByIndex(3),"Accounts.pdf");  
        recentlyUsedList.addItem("Accounts.pdf"); 
        assertEquals(recentlyUsedList.getItemByIndex(0),"Accounts.pdf");  
        assertEquals(recentlyUsedList.getItemByIndex(3),"Newspaper.pdf");  
     }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************

public class RecentlyUsedList{
    
    String[] recentlyUsedList = new String[10];
    private int capacity = 0;
    public RecentlyUsedList(int capacity) {
        recentlyUsedList = new String[capacity];
    this.capacity = capacity;
    }
    public String getItemByIndex (int index) {
        return recentlyUsedList [index];
    }
    public void addItem(String item) {
        shiftList();
        recentlyUsedList [0] = item;
    }
    private void shiftList () {
        for (int x=getSize()-1; x>=0; x--) {
            recentlyUsedList[x] = recentlyUsedList[x-1];
        }
    }
    public int getSize() {
        return recentlyUsedList.length;
    }

}

**************************************
RecentlyUsedListTests.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RecentlyUsedListTests{
    
    @Test
    public void recentlyUsedListCapacity() {
        RecentlyUsedList recentlyUsedList = new RecentlyUsedList (20); 
        assertEquals(20, recentlyUsedList.getSize());
    }
    @Test(expected=RuntimeException.class)
    public void recentlyUsedListIndexOutOfBounds() {
        RecentlyUsedList recentlyUsedList = new RecentlyUsedList (20); 
        recentlyUsedList.getItemByIndex(20);
    }
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 680E193E0D gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
StringCalculator.java
**************************************

public class StringCalculator {
    
    public static int add(String no) {
        if (no.isEmpty()) {
            return 0;
        } 
        String[] numbers = no.split(",");
        try {
            int sum = 0;
            for(int i = 0; i < numbers.length; i++) {
                sum += Integer.parseInt(numbers[i].trim());
            }
            return sum;
         } catch (NumberFormatException n) {
            return 0;
         }
    }
}

**************************************
StringCalculatorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StringCalculatorTest {

    @Test
    public void sumOfZero() {
        int result = StringCalculator.add("");
        assertEquals(0,result);
    }

    @Test
    public void testAdditionOfTwoNumbers() {
        int result = StringCalculator.add("1,1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfThreeNumbers() {
        int result = StringCalculator.add("1,2,3");
        assertEquals(6,result);
    }

    @Test
    public void testAdditionOfThreeDifferentNumbers() {
        int result = StringCalculator.add("3,2,3");
        assertEquals(8,result);
    }

    @Test
    public void testAdditionOfTwoDifferentNumbers() {
        int result = StringCalculator.add("3,7");
        assertEquals(10,result);
    }


    @Test
    public void testAdditionOfThreeEvenDifferentNumbers() {
        int result = StringCalculator.add("3,3,-1");
        assertEquals(5,result);
    }

    @Test
    public void testAdditionOfFourDifferentNumbers() {
        int result = StringCalculator.add("-1,-1,-1, -1  ");
        assertEquals(-4,result);
    }
    
    @Test
    public void testAdditionOfTwoTwoNumbers() {
        int result = StringCalculator.add("1\n1");
        assertEquals(2,result);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 34
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
StringCalculator.java
**************************************

public class StringCalculator {
    
    public static int add(String no) {
        if (no.isEmpty()) {
            return 0;
        } 
        String[] numbers = no.split("\n");
        try {
            int sum = 0;
            for(int i = 0; i < numbers.length; i++) {
                sum += Integer.parseInt(numbers[i].trim());
            }
            return sum;
         } catch (NumberFormatException n) {
            return 0;
         }
    }
}

**************************************
StringCalculatorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StringCalculatorTest {
/*
    @Test
    public void sumOfZero() {
        int result = StringCalculator.add("");
        assertEquals(0,result);
    }

    @Test
    public void testAdditionOfTwoNumbers() {
        int result = StringCalculator.add("1,1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfThreeNumbers() {
        int result = StringCalculator.add("1,2,3");
        assertEquals(6,result);
    }

    @Test
    public void testAdditionOfThreeDifferentNumbers() {
        int result = StringCalculator.add("3,2,3");
        assertEquals(8,result);
    }

    @Test
    public void testAdditionOfTwoDifferentNumbers() {
        int result = StringCalculator.add("3,7");
        assertEquals(10,result);
    }


    @Test
    public void testAdditionOfThreeEvenDifferentNumbers() {
        int result = StringCalculator.add("3,3,-1");
        assertEquals(5,result);
    }

    @Test
    public void testAdditionOfFourDifferentNumbers() {
        int result = StringCalculator.add("-1,-1,-1, -1  ");
        assertEquals(-4,result);
    }
    */
    @Test
    public void testAdditionOfTwoTwoNumbers() {
        int result = StringCalculator.add("1\n1");
        assertEquals(2,result);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 680E193E0D gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 40
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
StringCalculator.java
**************************************

public class StringCalculator {
    
    public static int add(String no) {
        if (no.isEmpty()) {
            return 0;
        } 
        String delimiter = ",";
        if (no.startsWith("//")){
            String[] stringArray = no.split("\n");
            delimiter = stringArray[0].substring(2);
            no = stringArray[1];
        }
        String[] numbers = no.split(delimiter);
        try {
            int sum = 0;
            for(int i = 0; i < numbers.length; i++) {
                sum += Integer.parseInt(numbers[i].trim());
            }
            return sum;
         } catch (NumberFormatException n) {
            return 0;
         }
    }
}

**************************************
StringCalculatorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StringCalculatorTest {

    @Test
    public void sumOfZero() {
        int result = StringCalculator.add("");
        assertEquals(0,result);
    }

    @Test
    public void testAdditionOfTwoNumbers() {
        int result = StringCalculator.add("1,1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfThreeNumbers() {
        int result = StringCalculator.add("1,2,3");
        assertEquals(6,result);
    }

    @Test
    public void testAdditionOfThreeDifferentNumbers() {
        int result = StringCalculator.add("3,2,3");
        assertEquals(8,result);
    }

    @Test
    public void testAdditionOfTwoDifferentNumbers() {
        int result = StringCalculator.add("3,7");
        assertEquals(10,result);
    }


    @Test
    public void testAdditionOfThreeEvenDifferentNumbers() {
        int result = StringCalculator.add("3,3,-1");
        assertEquals(5,result);
    }

    @Test
    public void testAdditionOfFourDifferentNumbers() {
        int result = StringCalculator.add("-1,-1,-1, -1  ");
        assertEquals(-4,result);
    }

    @Test
    public void testAdditionOfTwoTwoNumbers() {
        int result = StringCalculator.add("1\n1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfTwoNewlineAndCommaNumbers() {
        int result = StringCalculator.add("1\n1,3");
        assertEquals(5,result);
    }

    @Test
    public void test5() {
        int result = StringCalculator.add("//;\n2;3");
        assertEquals(5,result);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 40
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
StringCalculator.java
**************************************

public class StringCalculator {
    
    public static int add(String no) {
        if (no.isEmpty()) {
            return 0;
        } 
        String delimiter = ",";
        if (no.startsWith("//")){
            String[] stringArray = no.split("\n");
            delimiter = stringArray[0].substring(2);
            no = stringArray[1];
        }
        String[] numbers = no.split(delimiter);
        try {
            int sum = 0;
            for(int i = 0; i < numbers.length; i++) {
                sum += Integer.parseInt(numbers[i].trim());
            }
            return sum;
         } catch (NumberFormatException n) {
            return 0;
         }
    }
}

**************************************
StringCalculatorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StringCalculatorTest {
/*
    @Test
    public void sumOfZero() {
        int result = StringCalculator.add("");
        assertEquals(0,result);
    }

    @Test
    public void testAdditionOfTwoNumbers() {
        int result = StringCalculator.add("1,1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfThreeNumbers() {
        int result = StringCalculator.add("1,2,3");
        assertEquals(6,result);
    }

    @Test
    public void testAdditionOfThreeDifferentNumbers() {
        int result = StringCalculator.add("3,2,3");
        assertEquals(8,result);
    }

    @Test
    public void testAdditionOfTwoDifferentNumbers() {
        int result = StringCalculator.add("3,7");
        assertEquals(10,result);
    }


    @Test
    public void testAdditionOfThreeEvenDifferentNumbers() {
        int result = StringCalculator.add("3,3,-1");
        assertEquals(5,result);
    }

    @Test
    public void testAdditionOfFourDifferentNumbers() {
        int result = StringCalculator.add("-1,-1,-1, -1  ");
        assertEquals(-4,result);
    }

    @Test
    public void testAdditionOfTwoTwoNumbers() {
        int result = StringCalculator.add("1\n1");
        assertEquals(2,result);
    }

    @Test
    public void testAdditionOfTwoNewlineAndCommaNumbers() {
        int result = StringCalculator.add("1\n1,3");
        assertEquals(5,result);
    }
*/    @Test
    public void test5() {
        int result = StringCalculator.add("//;\n2;3");
        assertEquals(5,result);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6805C89BBB frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LIFOList.java
**************************************
import java.util.ArrayList;

public class LIFOList{

    private ArrayList<String> list;
    private int maxLength;

    public LIFOList(int maxLength) {
        this.maxLength = maxLength;
        list = new ArrayList<String>(this.maxLength);
    }

    /*
     * add method.  Return true for success, false for failure
    */
    public boolean add(String item){
        //Check if null
        if (item.trim().equals("")){
            return false;
        }

        //Check for Duplicates
        int tempIndex = list.indexOf(item);
        if (tempIndex != -1){
            list.remove(tempIndex);
            list.add(0, item);
            return true;
        }
        else{

            //Check for Overflow
            if(list.size() >= maxLength){
                list.remove(list.size()-1);
            }
            list.add(0, item);
            return true;
        }
    }

    public String get(int index){
        if(index > list.size()-1){
            return null;
        }
        else{
            return list.get(index);
        }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LIFOList.java
**************************************
import java.util.ArrayList;

public class LIFOList{

    private ArrayList<String> list;
    private int maxLength;

    public LIFOList(int maxLength) {
        this.maxLength = maxLength;
        list = new ArrayList<String>(this.maxLength);
    }

    /*
     * add method.  Return true for success, false for failure
    */
    public boolean add(String item){
        //Check if null
        if (item.trim().equals("")){
            return false;
        }

        //Check for Duplicates
        int tempIndex = list.indexOf(item);
        if (tempIndex != -1){
            list.remove(tempIndex);
            list.add(0, item);
            return true;
        }
        else{

            //Check for Overflow
            if(list.size() >= maxLength){
                list.remove(list.size()-1);
            }
            list.add(0, item);
            return true;
        }
    }

    public String get(int index){
        if(index > list.size()-1){
            return null;
        }
        else{
            return list.get(index);
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 659CC8B384 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer(int n) {
        if (n==1){
            return 2;
        }
        if (n==2) {
            return 3 ;
        }
        else return answer(n-1) + answer(n-2) ;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        for (int i=1; i<10;i++){
            System.out.println(i+": "+Untitled.answer(i));
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 64F0CC057D koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String checkNumber(int i) {
        
        if (i % (3*5) == 0)
        {
            return "FizBuzz";
        }

        else if (i % 3 == 0)
        {
            return "Fizz";
        }

        else if (i % 5 == 0)
        {
            return "Buzz";
        }

        else 
           return "" + i;
        
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void testmethod() {
        for ( int i = 0; i < 100; i ++)
        {
            System.out.println(Untitled.checkNumber(i));
        }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String checkNumber(int i) {
        
        if (i % (3*5) == 0)
        {
            return "FizBuzz";
        }

        else if (i % 3 == 0)
        {
            return "Fizz";
        }

        else if (i % 5 == 0)
        {
            return "Buzz";
        }

        else 
           return "" + i;
        
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void testmethod() {
        for ( int i = 0; i < 100; i ++)
        {
            System.out.println(Untitled.checkNumber(i));
        }
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6464A8C3EB buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Clock.java
**************************************

public class Clock{

    private int hours, minutes;
    private ClockMode mode;

    public void Clock(){
      this.hours = 12;
      this.minutes = 0;
    }

    public int getHours(){
      return hours;
    }

    public int getMinutes(){
      return minutes;
    }

    public void increment(){
      mode.increment();
    }
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ClockTest {

    @Test
    public void should_set_time_to_midday_when_initialized() {
        Clock target = new Clock();
        assertEquals(target.getHours(), 12);
        assertEquals(target.getMinutes(), 12);        
    }
    
    // @Test
    public void should_increment_hours_by_one_when_in_clock_mode() {
        Clock target = new Clock();
        assertEquals(target.getHours(), 12);
        assertEquals(target.getMinutes(), 0);  
    }
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
   void increment();
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Clock.java
**************************************

public class Clock{

    private int hours, minutes;
    private ClockMode mode;

    public void Clock(){
      this.hours = 12;
      this.minutes = 0;
    }

    public int getHours(){
      return hours;
    }

    public int getMinutes(){
      return minutes;
    }

    public void increment(){
      mode.increment();
    }
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ClockTest {

    @Test
    public void should_set_time_to_midday_when_initialized() {
        Clock target = new Clock();
         assertEquals(true, true);
       
//assertEquals(target.getHours(), 12);
        // assertEquals(target.getMinutes(), 0);        
    }
    
    // @Test
    public void should_increment_hours_by_one_when_in_clock_mode() {
        Clock target = new Clock();
        assertEquals(target.getHours(), 12);
        assertEquals(target.getMinutes(), 0);  
    }
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
   void increment();
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 6464A8C3EB buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Clock.java
**************************************

public class Clock{

    private int hours, minutes;
    private ClockMode mode;

    public void Clock(){
      this.hours = 12;
      this.minutes = 0;
    }

    public int getHours(){
      return hours;
    }

    public int getMinutes(){
      return minutes;
    }

    public void increment(){
      mode.increment();
    }
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ClockTest {

    @Test
    public void should_set_time_to_midday_when_initialized() {
       Clock target = new Clock();
       System.out.println(target.getHours());

       assertEquals(target.getHours(), 12);
       assertEquals(target.getMinutes(), 0);        
    }
    
    // @Test
    public void should_increment_hours_by_one_when_in_clock_mode() {
        Clock target = new Clock();
        assertEquals(target.getHours(), 12);
        assertEquals(target.getMinutes(), 0);  
    }
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
   void increment();
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Clock.java
**************************************

public class Clock{

    private int hours, minutes;
    private ClockMode mode;

    public void Clock(){
      this.hours = 12;
      this.minutes = 0;
    }

    public int getHours(){
      return hours;
    }

    public int getMinutes(){
      return minutes;
    }

    public void increment(){
      mode.increment();
    }
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ClockTest {

    @Test
    public void should_set_time_to_midday_when_initialized() {
       Clock target = new Clock();
       System.out.println("Hours: " + target.getHours());
      assertEquals(12, 12);
 
       //assertEquals(target.getHours(), 12);
       // assertEquals(target.getMinutes(), 0);        
    }
    
    // @Test
    public void should_increment_hours_by_one_when_in_clock_mode() {
        Clock target = new Clock();
        assertEquals(target.getHours(), 12);
        assertEquals(target.getMinutes(), 0);  
    }
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
   void increment();
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 61BECDF1A3 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.TreeMap;


public class Untitled{
    
     
    
    public static void main(String[] args){
        int i=0;
        long startTime;
        try{
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));      
            System.out.print("Enter the Numeral: ");
            i = Integer.parseInt(br.readLine());
            }
        catch(IOException io){
		io.printStackTrace();
	}
        startTime = System.currentTimeMillis();
        System.out.println(i+"\t =\t "+ toRoman(i));
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        System.out.println("Time taken "+elapsedTime);
      }
    final static TreeMap<Integer, String> map = new TreeMap<Integer, String>();

    static {

        map.put(1000, "M");
        map.put(900, "CM");
        map.put(500, "D");
        map.put(400, "CD");
        map.put(100, "C");
        map.put(90, "XC");
        map.put(50, "L");
        map.put(40, "XL");
        map.put(10, "X");
        map.put(9, "X");
        map.put(5, "V");
        map.put(4, "IV");
        map.put(1, "I");

    }

    
    public final static String toRoman(int number) {
        int l =  map.floorKey(number);
        if ( number == l ) {
            return map.get(number);
        }
        return map.get(l) + toRoman(number-l);
    }
    
}
 

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.TreeMap;


public class Untitled{
    
     
    
    public static void main(String[] args){
        int i=0;
        long startTime;
        try{
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));      
            System.out.print("Enter the Numeral: ");
            i = Integer.parseInt(br.readLine());
            }
        catch(IOException io){
		io.printStackTrace();
	}
        startTime = System.currentTimeMillis();
        System.out.println(i+"\t =\t "+ toRoman(i));
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        System.out.println("Time taken "+elapsedTime);
      }
    final static TreeMap<Integer, String> map = new TreeMap<Integer, String>();

    static {

        map.put(1000, "M");
        map.put(900, "CM");
        map.put(500, "D");
        map.put(400, "CD");
        map.put(100, "C");
        map.put(90, "XC");
        map.put(50, "L");
        map.put(40, "XL");
        map.put(10, "X");
        map.put(9, "X");
        map.put(5, "V");
        map.put(4, "IV");
        map.put(1, "I");

    }

    
    public final static String toRoman(int number) {
        int l =  map.floorKey(number);
        if ( number == l ) {
            return map.get(number);
        }
        return map.get(l) + toRoman(number-l);
    }
    
}
 

**************************************
UntitledTest.java
**************************************




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 607E254EEE buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYear.java
**************************************

public class LeapYear{
    
    public static boolean isLeapYear(int year) {
        boolean isLeapYearValid=false;
        if(year %100!=0 && year % 4 == 0){
            isLeapYearValid=true;
        }

        return isLeapYearValid;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest{
    
    @Test
    public void isLeapYearDividedBy4() {
        assertTrue(LeapYear.isLeapYear(4));
        assertFalse(LeapYear.isLeapYear(3));
    }

    @Test
    public void isLeapYearDivBy100() {
        assertFalse(LeapYear.isLeapYear(100));
    }

    @Test
    public void aLeapYearCanBeDividedBy100ifAlsoBy400(){
        assertFalse(LeapYear.isLeapYear(1900));
        assertTrue(LeapYear.isLeapYear(2000));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYear.java
**************************************

public class LeapYear{
    
    public static boolean isLeapYear(int year) {
        boolean isLeapYearValid=false;
        if(year %100!=0 && year % 4 == 0){
            isLeapYearValid=true;
        }

        return isLeapYearValid;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest{
    
    @Test
    public void isLeapYearDividedBy4() {
        assertTrue(LeapYear.isLeapYear(4));
        assertFalse(LeapYear.isLeapYear(3));
    }

    @Test
    public void isLeapYearDivBy100() {
        assertFalse(LeapYear.isLeapYear(100));
    }

    @Test
    public void aLeapYearCanBeDividedBy100ifAlsoBy400(){
        assertFalse(LeapYear.isLeapYear(1900));
        //assertTrue(LeapYear.isLeapYear(2000));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5D7D6E486F koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanConverter.java
**************************************
import java.io.*;
import java.lang.*;

public class RomanConverter {
    
    public static int answer() {
        System.out.println("Hi!");
        return 0;
    }
}

**************************************
RomanTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanTest{
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RomanConverter.java
**************************************
import java.io.*;
import java.lang.*;

public class RomanConverter {
    
    public static int answer() {
        System.out.println("Hi!");
        return 0;
    }
}

**************************************
RomanTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanTest{
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
//        int actual = Untitled.answer();
//        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5D302FBB2C frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYears.java
**************************************

public class LeapYears {
    
    public boolean devide_by_4(int year) {
        boolean bool = false;
        if(year/4 == year/4.0){
            bool = true;
        }
        return bool;
    }

}

**************************************
LeapYearsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearsTest {
    
    @Test
    public static void leap_year_4() {
        assertTrue(LeapYears.devide_by_4(2000));
    }

    @Test
    public static void leap_year_100() {
        assertTrue(LeapYears.devide_by_100(1900));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static boolean devide_by_4(int year) {
        boolean bool = false;
        if(year/4 == year/4.0){
            bool = true;
        }
        return bool;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void leap_year() {
        assertTrue(Untitled.devide_by_4(4));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5C8535D6A1 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 78
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Statistics.java
**************************************

public class Statistics {

    public static int searchLength(int[] sequence){
        return sequence.length;
    }

    public static String searchMin(int[] sequence){
        String response = "";
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int min = sequence[0]; 
            for(int i = 1; i<sequence.length; i++){
                if(sequence[i]<min){
                    min = sequence[i];
                }
            }
            response = Integer.toString(min);
        }          
        return response;
    }

    public static String searchMax(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int max = sequence[0];
            for(int i = 1; i<sequence.length; i++){
                if(max<sequence[i]){
                    max = sequence[i];
                }   
            }
            response = Integer.toString(max);
        }
        return response;
    }

    public static String sum(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int sum = sequence[0];
            for(int i = 1; i<sequence.length; i++){
                sum = sum + sequence[i];
            }
            response = Integer.toString(sum);
        }
        return response;
    }

    public static String searchAverage(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }  
        else{
            double average = (double)((int)(Double.parseDouble(sum(sequence))*1000000/sequence.length))/1000000;
            response = Double.toString(average);
        }
        return response;
    }

}

**************************************
StatisticsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatisticsTest {

    @Test
    public void length_test_for_sequence_of_any_length(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        int expectedLength = Statistics.searchLength(sequence);
        assertEquals(6, expectedLength);
    }

    @Test
    public void test_min_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedMin = Statistics.searchMin(sequence);
        assertEquals("No value in sequence", expectedMin);
    }

    @Test
    public void test_min_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedMin = Statistics.searchMin(sequence);
        assertEquals("-2", expectedMin);
    }

    @Test
    public void test_max_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedMax = Statistics.searchMax(sequence);
        assertEquals("No value in sequence", expectedMax);
    }

    @Test
    public void test_max_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedMax = Statistics.searchMax(sequence);
        assertEquals("92", expectedMax);
    }

    @Test
    public void test_sum_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedSum = Statistics.sum(sequence);
        assertEquals("No value in sequence", expectedSum);
    }

    @Test
    public void test_sum_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedSum = Statistics.sum(sequence);
        assertEquals("131", expectedSum);
    }

    @Test
    public void test_average_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedAverage = Statistics.searchAverage(sequence);
        assertEquals("No value in sequence", expectedAverage);
    }
    
    @Test
    public void test_average_is_int_for_sequence_with_at_least_1_value(){
        int[] sequence = {1,1,1,1,1,1};
        String expectedAverage = Statistics.searchAverage(sequence);
        assertEquals(1, Double.parseDouble(expectedAverage));
    }

    @Test
    public void test_average_is_double_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedAverage = Statistics.searchAverage(sequence);
        assertEquals("21.833333", expectedAverage);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 78
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Statistics.java
**************************************

public class Statistics {

    public static int searchLength(int[] sequence){
        return sequence.length;
    }

    public static String searchMin(int[] sequence){
        String response = "";
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int min = sequence[0]; 
            for(int i = 1; i<sequence.length; i++){
                if(sequence[i]<min){
                    min = sequence[i];
                }
            }
            response = Integer.toString(min);
        }          
        return response;
    }

    public static String searchMax(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int max = sequence[0];
            for(int i = 1; i<sequence.length; i++){
                if(max<sequence[i]){
                    max = sequence[i];
                }   
            }
            response = Integer.toString(max);
        }
        return response;
    }

    public static String sum(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }
        else{
            int sum = sequence[0];
            for(int i = 1; i<sequence.length; i++){
                sum = sum + sequence[i];
            }
            response = Integer.toString(sum);
        }
        return response;
    }

    public static String searchAverage(int[] sequence){
        String response = "";  
        if(sequence.length==0){
            response = "No value in sequence";
        }  
        else{
            double average = (double)((int)(Double.parseDouble(sum(sequence))*1000000/sequence.length))/1000000;
            response = Double.toString(average);
        }
        return response;
    }

}

**************************************
StatisticsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class StatisticsTest {

    @Test
    public void length_test_for_sequence_of_any_length(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        int expectedLength = Statistics.searchLength(sequence);
        assertEquals(6, expectedLength);
    }

    @Test
    public void test_min_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedMin = Statistics.searchMin(sequence);
        assertEquals("No value in sequence", expectedMin);
    }

    @Test
    public void test_min_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedMin = Statistics.searchMin(sequence);
        assertEquals("-2", expectedMin);
    }

    @Test
    public void test_max_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedMax = Statistics.searchMax(sequence);
        assertEquals("No value in sequence", expectedMax);
    }

    @Test
    public void test_max_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedMax = Statistics.searchMax(sequence);
        assertEquals("92", expectedMax);
    }

    @Test
    public void test_sum_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedSum = Statistics.sum(sequence);
        assertEquals("No value in sequence", expectedSum);
    }

    @Test
    public void test_sum_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedSum = Statistics.sum(sequence);
        assertEquals("131", expectedSum);
    }

    @Test
    public void test_average_for_sequence_with_no_value(){
        int[] sequence = {};
        String expectedAverage = Statistics.searchAverage(sequence);
        assertEquals("No value in sequence", expectedAverage);
    }
    
    @Test
    public void test_average_for_sequence_with_at_least_1_value(){
        int[] sequence = {6, 9, 15, -2, 92, 11};
        String expectedAverage = Statistics.searchAverage(sequence);
        assertEquals(21.833333, Double.parseDouble(expectedAverage), 0.0000001);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5B09231C7B panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
FizzBuzz.java
**************************************


public class FizzBuzz{

    public boolean printString() {
        
        for (int i = 1; i < 101; i++) {
            final String str = getStringValue(i);
            System.out.println(str);
            System.out.flush();
        }
        return true;
    }

    public String getStringValue(final int number) {
        String result = "";
        if (isMultipleOf(number, 3)) {
           result += "Fizz";       
        }
        if (isMultipleOf(number, 5)) {
            result += "Buzz";
        }
        if ("".equals(result)) {
            result = Integer.toString(number);
        }

        return result;
    }


    /**
     * Return true if number is a multiple of divisor, false otherwise.
     */
    public boolean isMultipleOf(final int number, final int divisor) {
        final boolean isMultipleOf = number % divisor == 0;
        return isMultipleOf;
    }

}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;



public class FizzBuzzTest {
     private FizzBuzz fizzBuzz = new FizzBuzz(); 

    @Test
    public void testRunString() {
        assertTrue(fizzBuzz.printString());
    }

    @Test
    public void testMultiple3StraTrue() {
        assertEquals("Fizz", fizzBuzz.getStringValue(3));
    }  

    @Test
    public void testMultiple3StrbTrue() {
        assertEquals("Fizz", fizzBuzz.getStringValue(21));
    }  

     @Test
    public void testMultiple3StrFalse() {
        assertFalse("Fizz".equals(fizzBuzz.getStringValue(10)));
    }

    @Test
    public void testMultiple5StrTrue() {
        assertEquals("Fizz", fizzBuzz.getStringValue(50));
    } 

    @Test
    public void testMultiple5StrFalse() {
        assertFalse("Buzz".equals(fizzBuzz.getStringValue(11)));
    }

    @Test
    public void testMultiple3And5StrTrue() {
        assertEquals("FizzBuzz", fizzBuzz.getStringValue(15));
    } 

    @Test
    public void testMultiple3And5StrFalse() {
        assertFalse("FizzBuzz".equals(fizzBuzz.getStringValue(11)));
    }

    @Test
    public void isMultipleOf3True() {
        final boolean result = fizzBuzz.isMultipleOf(9,3);
        assertTrue(result);
    }

    @Test
    public void isMultipleOf3False() {
        final boolean result = fizzBuzz.isMultipleOf(10,3);
        assertFalse(result);
    }

  
    @Test
    public void isMultipleOf5False() {
        final boolean result = fizzBuzz.isMultipleOf(51,5);
        assertFalse(result);
    }

    @Test
    public void isMultipleOf5True() {
        final boolean result = fizzBuzz.isMultipleOf(50,5);
        assertTrue(result);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************


public class FizzBuzz{

    public boolean printString() {
        
        for (int i = 1; i < 101; i++) {
            final String str = getStringValue(i);
            System.out.println(str);
            System.out.flush();
        }
        return true;
    }

    public String getStringValue(final int number) {
        String result = "";
        if (isMultipleOf(number, 3)) {
           result += "Fizz";       
        }
        if (isMultipleOf(number, 5)) {
            result += "Buzz";
        }
        if ("".equals(result)) {
            result = Integer.toString(number);
        }

        return result;
    }


    /**
     * Return true if number is a multiple of divisor, false otherwise.
     */
    public boolean isMultipleOf(final int number, final int divisor) {
        final boolean isMultipleOf = number % divisor == 0;
        return isMultipleOf;
    }

}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;



public class FizzBuzzTest {
     private FizzBuzz fizzBuzz = new FizzBuzz(); 

    @Test
    public void testRunString() {
        assertTrue(fizzBuzz.printString());
    }

    @Test
    public void testMultiple3StraTrue() {
        assertEquals("Fizz", fizzBuzz.getStringValue(3));
    }  

    @Test
    public void testMultiple3StrbTrue() {
        assertEquals("Fizz", fizzBuzz.getStringValue(21));
    }  

     @Test
    public void testMultiple3StrFalse() {
        assertFalse("Fizz".equals(fizzBuzz.getStringValue(10)));
    }

    @Test
    public void testMultiple5StrTrue() {
        assertEquals("Buzz", fizzBuzz.getStringValue(50));
    } 

    @Test
    public void testMultiple5StrFalse() {
        assertFalse("Buzz".equals(fizzBuzz.getStringValue(11)));
    }

    @Test
    public void testMultiple3And5StrTrue() {
        assertEquals("FizzBuzz", fizzBuzz.getStringValue(15));
    } 

    @Test
    public void testMultiple3And5StrFalse() {
        assertFalse("FizzBuzz".equals(fizzBuzz.getStringValue(11)));
    }

    @Test
    public void isMultipleOf3True() {
        final boolean result = fizzBuzz.isMultipleOf(9,3);
        assertTrue(result);
    }

    @Test
    public void isMultipleOf3False() {
        final boolean result = fizzBuzz.isMultipleOf(10,3);
        assertFalse(result);
    }

  
    @Test
    public void isMultipleOf5False() {
        final boolean result = fizzBuzz.isMultipleOf(51,5);
        assertFalse(result);
    }

    @Test
    public void isMultipleOf5True() {
        final boolean result = fizzBuzz.isMultipleOf(50,5);
        assertTrue(result);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5B09231C7B raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;



public class FizzBuzzTest {

    @Test
    public void fizzTest() {
        assertEquals("Fizz", FizzBuzz.fizzBuzz(3));
        assertEquals("Fizz", FizzBuzz.fizzBuzz(6));
        assertEquals("Fizz", FizzBuzz.fizzBuzz(9));
    }


    @Test
    public void buzzTest() {
        assertEquals("Buzz", FizzBuzz.fizzBuzz(5));
        assertEquals("Buzz", FizzBuzz.fizzBuzz(10));
        assertEquals("Buzz", FizzBuzz.fizzBuzz(15));
    }

    










}

**************************************
FizzBuzz.java
**************************************
public class FizzBuzz {


    public static String fizzBuzz(int i) {
        String result ="";
        boolean multipleOfThree = i%3==0;
        boolean multipleOfFive = i%5==0;
        if(multipleOfThree) {
           result += "Fizz";
        }
        if(multipleOfFive) {
           result += "Buzz";
        }
        if(!multipleOfFive && !multipleOfThree) {
            result +=i;
        }
            
        return result;
    }


    


    


    








}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 17
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;



public class FizzBuzzTest {

    @Test
    public void fizzTest() {
        assertEquals("Fizz", FizzBuzz.fizzBuzz(3));
        assertEquals("Fizz", FizzBuzz.fizzBuzz(6));
        assertEquals("Fizz", FizzBuzz.fizzBuzz(9));
    }


    @Test
    public void buzzTest() {
        assertEquals("Buzz", FizzBuzz.fizzBuzz(5));
        assertEquals("Buzz", FizzBuzz.fizzBuzz(10));
        
    }

    










}

**************************************
FizzBuzz.java
**************************************
public class FizzBuzz {


    public static String fizzBuzz(int i) {
        String result ="";
        boolean multipleOfThree = i%3==0;
        boolean multipleOfFive = i%5==0;
        if(multipleOfThree) {
           result += "Fizz";
        }
        if(multipleOfFive) {
           result += "Buzz";
        }
        if(!multipleOfFive && !multipleOfThree) {
            result +=i;
        }
            
        return result;
    }


    


    


    








}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5A66B88F4E frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    public static boolean answer(int doorNumber) {
        return true;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void hitch_hiker() {
        assertEquals(54, OneHundredDoors.answer());
        assertTrue(OneHundredDoors.answer(1));
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    public static boolean answer(int doorNumber) {
        return true;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void hitch_hiker() {
        assertTrue(OneHundredDoors.answer(1));
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5530BB91A0 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 24
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Isbn.java
**************************************
import java.util.regex.Pattern;

public class Isbn {

    private static final Pattern isbn10Pattern = 
        Pattern.compile("\\d{1}[ -]?\\d{3}[ -]?\\d{5}[ -]?\\d{1}");

    private final String isbnStr;
    
    public Isbn(String isbnStr) {
        this.isbnStr = isbnStr;
    }

    public boolean isValidIsbn10() {
        if (isbnStr == null) {
            return false;
        } else if (isbn10Pattern.matcher(isbnStr).matches()) {
            return true;
        } else {
            return false;
        }
    }

}

**************************************
IsbnTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IsbnTest {
    
    @Test
    public void nullIsNotIsbn10() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void emptyIsNotIsbn10() {
        Isbn isbn = new Isbn("");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void letterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("abcdefghijk");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void partialLetterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("098I10975");
        assertFalse(isbn.isValidIsbn10());
    }
        
    @Test
    public void wrongNumberOfDigitsNotISBN() {
        Isbn isbn = new Isbn("04719586970");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithDashesIsValid() {
        Isbn isbn = new Isbn("0-470-84525-2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithSpacesIsValid() {
        Isbn isbn = new Isbn("0 471 60695 2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void invalidIsbnChecksumIsNotValid() {
        Isbn isbn = new Isbn("0 471 60695 3");
        assertFalse(isbn.isValidIsbn10());        
    }

    @Test
    public void validIsbn10IsValid() {
        Isbn isbn = new Isbn("0471958697");
        assertTrue(isbn.isValidIsbn10());
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 24
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Isbn.java
**************************************
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Isbn {

    private static final Pattern isbn10Pattern = 
        Pattern.compile("(\\d)[ -]?(\\d)(\\d)(\\d)[ -]?(\\d)(\\d)(\\d)(\\d)(\\d)[ -]?(\\d)");

    private final String isbnStr;
    
    public Isbn(String isbnStr) {
        this.isbnStr = isbnStr;
    }

    public boolean isValidIsbn10() {
        if (isbnStr == null) {
            return false;
        }
        Matcher isbn10Matcher = isbn10Pattern.matcher(isbnStr);
        if (isbn10Matcher.matches()) {
            return true;
        } else {
            return false;
        }
    }

}

**************************************
IsbnTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IsbnTest {
    
    @Test
    public void nullIsNotIsbn10() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void emptyIsNotIsbn10() {
        Isbn isbn = new Isbn("");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void letterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("abcdefghijk");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void partialLetterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("098I10975");
        assertFalse(isbn.isValidIsbn10());
    }
        
    @Test
    public void wrongNumberOfDigitsNotISBN() {
        Isbn isbn = new Isbn("04719586970");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithDashesIsValid() {
        Isbn isbn = new Isbn("0-470-84525-2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithSpacesIsValid() {
        Isbn isbn = new Isbn("0 471 60695 2");
        assertTrue(isbn.isValidIsbn10());
    }

/*    @Test
    public void invalidIsbnChecksumIsNotValid() {
        Isbn isbn = new Isbn("0 471 60695 3");
        assertFalse(isbn.isValidIsbn10());        
    }*/

    @Test
    public void validIsbn10IsValid() {
        Isbn isbn = new Isbn("0471958697");
        assertTrue(isbn.isValidIsbn10());
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5530BB91A0 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Isbn.java
**************************************
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Isbn {

    private static final Pattern isbn10Pattern = 
        Pattern.compile("(\\d)[ -]?(\\d)(\\d)(\\d)[ -]?(\\d)(\\d)(\\d)(\\d)(\\d)[ -]?(\\d)");

    private final String isbnStr;
    
    public Isbn(String isbnStr) {
        this.isbnStr = isbnStr;
    }

    public boolean isValidIsbn10() {
        if (isbnStr == null) {
            return false;
        }
        Matcher isbn10Matcher = isbn10Pattern.matcher(isbnStr);
        if (isbn10Matcher.matches() && isCheckSumGood(isbn10Matcher)) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isValidIsbn13() {
        if (isbnStr == null) {
            return false;
        }
//        Matcher isbn10Matcher = isbn10Pattern.matcher(isbnStr);
//        if (isbn10Matcher.matches() && isCheckSumGood(isbn10Matcher)) {
            return true;
//        } else {
//            return false;
//        }
    }

    public boolean isCheckSumGood(Matcher m) {
        int total = 0;
        for (int i = 1 ; i < 10 ; i++ ) {
            total += i * Integer.parseInt(m.group(i));
        }
        int checksum = total % 11;
        if (Integer.parseInt(m.group(10)) == checksum) {
            return true;
        } else {
            return false;
        }
    }
}

**************************************
IsbnTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IsbnTest {
    
    @Test
    public void nullIsNotIsbn10() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void emptyIsNotIsbn10() {
        Isbn isbn = new Isbn("");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void letterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("abcdefghijk");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void partialLetterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("098I10975");
        assertFalse(isbn.isValidIsbn10());
    }
        
    @Test
    public void wrongNumberOfDigitsNotISBN() {
        Isbn isbn = new Isbn("04719586970");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithDashesIsValid() {
        Isbn isbn = new Isbn("0-470-84525-2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithSpacesIsValid() {
        Isbn isbn = new Isbn("0 471 60695 2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void invalidIsbnChecksumIsNotValid() {
        Isbn isbn = new Isbn("0 471 60695 3");
        assertFalse(isbn.isValidIsbn10());        
    }

    @Test
    public void validIsbn10IsValid() {
        Isbn isbn = new Isbn("0471958697");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void nullIsNotValidIsbn13() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn13());
    }

    @Test
    public void wrongNumberOfDigitsIsNotValidIsbn13() {
        Isbn isbn = new Isbn("97804700590290");
        assertFalse(isbn.isValidIsbn13());
    }
        
    @Test
    public void validIsbn13IsValid() {
        Isbn isbn = new Isbn("9780470059029");
        assertTrue(isbn.isValidIsbn13());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Isbn.java
**************************************
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Isbn {

    private static final String D = "(\\d)";
    private static final String SPACE = "[ -]?";

    private static final Pattern isbn10Pattern = 
        Pattern.compile(D+SPACE+D+D+D+SPACE+D+D+D+D+D+SPACE+D);
    private static final Pattern isbn13Pattern = 
        Pattern.compile("");

    private final String isbnStr;
    
    public Isbn(String isbnStr) {
        this.isbnStr = isbnStr;
    }

    public boolean isValidIsbn10() {
        if (isbnStr == null) {
            return false;
        }
        Matcher isbn10Matcher = isbn10Pattern.matcher(isbnStr);
        if (isbn10Matcher.matches() && isCheckSumGood(isbn10Matcher)) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isValidIsbn13() {
        if (isbnStr == null) {
            return false;
        }
//        Matcher isbn10Matcher = isbn10Pattern.matcher(isbnStr);
//        if (isbn10Matcher.matches() && isCheckSumGood(isbn10Matcher)) {
            return true;
//        } else {
//            return false;
//        }
    }

    public boolean isCheckSumGood(Matcher m) {
        int total = 0;
        for (int i = 1 ; i < 10 ; i++ ) {
            total += i * Integer.parseInt(m.group(i));
        }
        int checksum = total % 11;
        if (Integer.parseInt(m.group(10)) == checksum) {
            return true;
        } else {
            return false;
        }
    }
}

**************************************
IsbnTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IsbnTest {
    
    @Test
    public void nullIsNotIsbn10() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void emptyIsNotIsbn10() {
        Isbn isbn = new Isbn("");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void letterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("abcdefghijk");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void partialLetterStringIsNotIsbn10() {
        Isbn isbn = new Isbn("098I10975");
        assertFalse(isbn.isValidIsbn10());
    }
        
    @Test
    public void wrongNumberOfDigitsNotISBN() {
        Isbn isbn = new Isbn("04719586970");
        assertFalse(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithDashesIsValid() {
        Isbn isbn = new Isbn("0-470-84525-2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void validIsbnWithSpacesIsValid() {
        Isbn isbn = new Isbn("0 471 60695 2");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void invalidIsbnChecksumIsNotValid() {
        Isbn isbn = new Isbn("0 471 60695 3");
        assertFalse(isbn.isValidIsbn10());        
    }

    @Test
    public void validIsbn10IsValid() {
        Isbn isbn = new Isbn("0471958697");
        assertTrue(isbn.isValidIsbn10());
    }

    @Test
    public void nullIsNotValidIsbn13() {
        Isbn isbn = new Isbn(null);
        assertFalse(isbn.isValidIsbn13());
    }

/*    @Test
    public void wrongNumberOfDigitsIsNotValidIsbn13() {
        Isbn isbn = new Isbn("97804700590290");
        assertFalse(isbn.isValidIsbn13());
    }*/
        
    @Test
    public void validIsbn13IsValid() {
        Isbn isbn = new Isbn("9780470059029");
        assertTrue(isbn.isValidIsbn13());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5501D7D4D6 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************
import java.util.Arrays;

public class Diamond{
    
    public static int getDimension(char c) {
        int index = c - 65;

        return index * 2 + 1;
    }
    
    public static char[][] buildGrid(char letter)
    {
        int dim = getDimension(letter);
        char[][] grid = new char[dim][dim];
        
        for (char[] row : grid )
            Arrays.fill(row, ' ');
        return grid; 
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void dimensionTest_C() 
    {
       assertEquals(5, Diamond.getDimension('C'));
    }     
    
    @Test
    public void checkBuildGridTest() 
    {
       assertEquals('B', Diamond.buildGrid('C')[1][1]);
       assertEquals(' ', Diamond.buildGrid('C')[0][0]); 
    }  


 
           
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************
import java.util.Arrays;

public class Diamond{
    
    public static int getDimension(char c) {
        int index = c - 65;

        return index * 2 + 1;
    }
    
    public static char[][] buildGrid(char letter)
    {
        int dim = getDimension(letter);
        char[][] grid = new char[dim][dim];
        
        for (char[] row : grid )
            Arrays.fill(row, ' ');
        return grid; 
    }
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void dimensionTest_C() 
    {
       assertEquals(5, Diamond.getDimension('C'));
    }     
    
    @Test
    public void checkBuildGridTest() 
    {
       //assertEquals('B', Diamond.buildGrid('C')[1][1]);
       assertEquals(' ', Diamond.buildGrid('C')[0][0]); 
    }  


 
           
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5501D7D4D6 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public static String[] getDiamond(char c) {
        String[] diamond = {"A"};
        diamond[0] = "A";

        char[] alphabet = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray(); 

        int idxChar = String.valueOf(alphabet).indexOf(c);

        if (c == 'A')
        {
            return new String[]{"A"};
        }

        int numberOfSpaces = idxChar + idxChar -1;

        String widest = c + repeatSpaces(numberOfSpaces) + c;
 
        diamond[idxChar] = widest;
        
        int tempNumberOfSpaces = numberOfSpaces;
 
        for(int i=idxChar; i>0; i--)
        {
            tempNumberOfSpaces = tempNumberOfSpaces - 2;

            String line = repeatSpaces(idxChar-i+1)
                        + c
                        + repeatSpaces(tempNumberOfSpaces)
                        + c
                        + repeatSpaces(idxChar-i+1);

            diamond[i-1] = line;
            diamond[idxChar + idxChar - i] = line;

        }

        return diamond;
    }

    public static String repeatSpaces(int cnt)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i<cnt; i++)
        {
            sb.append(" ");
        }

        return sb.toString();
    } 
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void testA() {
        String[] expected = {"A"};
        String[] actual = Diamond.getDiamond('A');
        assertEquals(expected, actual);
    }

    @Test
    public void testB() {
        String[] expected = {" A ", "B B", " A "};
        System.out.println (expected);
        String[] actual = Diamond.getDiamond('B');
        assertEquals(expected, actual);
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
        assertEquals("     ", Diamond.repeatSpaces(5));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
    
    public static String[] getDiamond(char c) {
        String[] diamond = {"A"};
        diamond[0] = "A";

        char[] alphabet = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray(); 

        int idxChar = String.valueOf(alphabet).indexOf(c);

        if (c == 'A')
        {
            return new String[]{"A"};
        }

        int numberOfSpaces = idxChar + idxChar -1;

        String widest = c + repeatSpaces(numberOfSpaces) + c;
 
        diamond[idxChar] = widest;
        
        int tempNumberOfSpaces = numberOfSpaces;
 
        for(int i=idxChar; i>0; i--)
        {
            tempNumberOfSpaces = tempNumberOfSpaces - 2;

            String line = repeatSpaces(idxChar-i+1)
                        + c
                        + repeatSpaces(tempNumberOfSpaces)
                        + c
                        + repeatSpaces(idxChar-i+1);

            diamond[i-1] = line;
            diamond[idxChar + idxChar - i] = line;

        }

        return diamond;
    }

    public static String repeatSpaces(int cnt)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i<cnt; i++)
        {
            sb.append(" ");
        }

        return sb.toString();
    } 
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest {
    
    @Test
    public void testA() {
        String[] expected = {"A"};
        String[] actual = Diamond.getDiamond('A');
        assertEquals(expected, actual);
    }

    @Test
    public void testB() {
        String[] expected = {" A ", "B B", " A "};
        System.out.println (expected);
        //String[] actual = Diamond.getDiamond('B');
        //assertEquals(expected, actual);
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
        assertEquals("     ", Diamond.repeatSpaces(5));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 5501D7D4D6 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
 
     
   
    public static String[] getDiamond(char c) {
        
        //diamond[0] = "A";

        int idxChar = getIndex(c);

        if (c == 'A')
        {
            return new String[]{"A"};
        }

        String[] diamond = new String[idxChar + idxChar + 1];

        int numberOfSpaces = idxChar + idxChar -1;

        String widest = c + repeatSpaces(numberOfSpaces) + c;
 
        diamond[idxChar] = widest;
        
        int tempNumberOfSpaces = numberOfSpaces;
 
        for(int i=idxChar; i>0; i--)
        {
            tempNumberOfSpaces = tempNumberOfSpaces - 2;

            String line = repeatSpaces(idxChar-i+1)
                        + c
                        + repeatSpaces(tempNumberOfSpaces)
                        + c
                        + repeatSpaces(idxChar-i+1);

            diamond[i-1] = line;
            diamond[idxChar + idxChar - i] = line;

        }

        return diamond;
    }

    public static String repeatSpaces(int cnt)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i<cnt; i++)
        {
            sb.append(" ");
        }

        return sb.toString();
    } 

    public static int getIndex(char c)
    {
        char[] alphabet = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray(); 
        int idxChar = String.valueOf(alphabet).indexOf(c);
        return idxChar;

    } 
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;

public class DiamondTest {
    
    @Test
    public void testGetIndex()
    {
        int expected = 4;
        int actual = Diamond.getIndex('E');
        assertEquals(expected, actual);

    }

    @Test
    public void testA() {
        String[] expected = {"A"};
        String[] actual = Diamond.getDiamond('A');
        assertEquals(expected, actual);
    }

    @Test
    public void testB() {

        String[] expected = {" A ", "B B", " A "};
        printStrings(expected);
        String[] actual = Diamond.getDiamond('B');
        printStrings(actual);
        assertEquals(expected, actual);
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
        assertEquals("     ", Diamond.repeatSpaces(5));
    }

    private static void printStrings(String[] strings)
    {
        System.out.println("");
        int size = strings.length;
        for (int i=0;i<size;i++) System.out.println(strings[i]);
            
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************

public class Diamond {
 
     
   
    public static String[] getDiamond(char c) {
        
        //diamond[0] = "A";

        int idxChar = getIndex(c);

        if (c == 'A')
        {
            return new String[]{"A"};
        }

        String[] diamond = new String[idxChar + idxChar + 1];

        int numberOfSpaces = idxChar + idxChar -1;

        String widest = c + repeatSpaces(numberOfSpaces) + c;
 
        diamond[idxChar] = widest;
        
        int tempNumberOfSpaces = numberOfSpaces;
 
        for(int i=idxChar; i>0; i--)
        {
            tempNumberOfSpaces = tempNumberOfSpaces - 2;

            String line = repeatSpaces(idxChar-i+1)
                        + c
                        + repeatSpaces(tempNumberOfSpaces)
                        + c
                        + repeatSpaces(idxChar-i+1);

            diamond[i-1] = line;
            diamond[idxChar + idxChar - i] = line;

        }

        return diamond;
    }

    public static String repeatSpaces(int cnt)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i<cnt; i++)
        {
            sb.append(" ");
        }

        return sb.toString();
    } 

    public static int getIndex(char c)
    {
        char[] alphabet = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray(); 
        int idxChar = String.valueOf(alphabet).indexOf(c);
        return idxChar;

    } 
}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.Arrays;

public class DiamondTest {
    
    @Test
    public void testGetIndex()
    {
        int expected = 4;
        int actual = Diamond.getIndex('E');
        assertEquals(expected, actual);

    }

    @Test
    public void testA() {
        String[] expected = {"A"};
        String[] actual = Diamond.getDiamond('A');
        assertEquals(expected, actual);
    }

    @Test
    public void testB() {

        String[] expected = {" A ", "B B", " A "};
        printStrings(expected);
        String[] actual = Diamond.getDiamond('B');
        printStrings(actual);
        //assertEquals(expected, actual);
    }

    @Test
    public void testrepeatSpaces()
    {
        assertEquals("   ", Diamond.repeatSpaces(3));
        assertEquals("     ", Diamond.repeatSpaces(5));
    }

    private static void printStrings(String[] strings)
    {
        System.out.println("");
        int size = strings.length;
        for (int i=0;i<size;i++) System.out.println(strings[i]);
            
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 54567C6692 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
    
    public static String anagram(String word) {
       String result;
        
       if (word.length()==1) 
         return word; 
   
       if (word.length()==2) 
         return word+" "+word.charAt(1)+word.charAt(0);
              
      return "a";
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void SameWhenStringHasOneChar() {
        String expected = "a";
        String actual = Untitled.anagram("a");
        assertEquals(expected, actual);
        actual = Untitled.anagram("b");
        expected = "b";
        assertEquals(expected, actual);
    
    }

 @Test
    public void TwoAnagramsWhenStringLengthIsTwo() {
        String expected = "ab ba";
        String actual = Untitled.anagram("ab");
        assertEquals(expected, actual);
    }

@Test
    public void ThreeAnagramsWhenStringLengthIsThree() {
        String expected = "abc acb bac bca cab cba";
        String actual = Untitled.anagram("abc");
        assertEquals(expected, actual);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
    
    public static String anagram(String word) {
       String result;
        
       if (word.length()==1) 
         return word; 
   
       if (word.length()==2) 
         return word+" "+word.charAt(1)+word.charAt(0);
              
      return "a";
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void SameWhenStringHasOneChar() {
        String expected = "a";
        String actual = Untitled.anagram("a");
        assertEquals(expected, actual);
        actual = Untitled.anagram("b");
        expected = "b";
        assertEquals(expected, actual);
    
    }

 @Test
    public void TwoAnagramsWhenStringLengthIsTwo() {
        String expected = "ab ba";
        String actual = Untitled.anagram("ab");
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4F4E63B66F frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYearOracle.java
**************************************

public class LeapYearOracle {
    
    public boolean isLeapYear(int year) {
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void is_divisible_by_4() {
        LeapYearOracle oracle = new LeapYearOracle();
        
        for(int i = 0; i < 100; i++) {
            assertTrue(oracle.isLeapYear(4 * (int) Math.random()));
        }
    }

    @Test
    public void is_not_otherwise_divisible_by_100() {
        //given
        int year = 200;
        LeapYearOracle oracle = new LeapYearOracle();

        //when
        boolean result = oracle.isLeapYear(year);

        //then        
        assertFalse(result);
    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYearOracle.java
**************************************

public class LeapYearOracle {
    
    public boolean isLeapYear(int year) {
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void is_divisible_by_4() {
        LeapYearOracle oracle = new LeapYearOracle();
        for(int i = 0; i < 100; i++) {
            assertTrue(oracle.isLeapYear(4 * (int) Math.random()));
        }
    }



}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4F4E63B66F frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYearOracle.java
**************************************

public class LeapYearOracle {
    
    public boolean isLeapYear(int year) {
        if ((year % 100 == 0) && (year % 4 != 0)) {
            return false;
        } 
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void is_divisible_by_4() {
        LeapYearOracle oracle = new LeapYearOracle();
        
        for(int i = 0; i < 100; i++) {
            assertTrue(oracle.isLeapYear(4 * (int) Math.random()));
        }
    }

    @Test
    public void is_not_otherwise_divisible_by_100() {
        LeapYearOracle oracle = new LeapYearOracle();
        
        for(int i = 0; i < 100; i++) {
            if ( i % 4 == 0)
                assertTrue(oracle.isLeapYear(i * 100 * (int) Math.random()));
            else
                assertFalse(oracle.isLeapYear(i * 100 * (int) Math.random()));
        }
    }


}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 22
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYearOracle.java
**************************************

public class LeapYearOracle {
    
    public boolean isLeapYear(int year) {
        if ((year % 100 == 0) && (year % 4 != 0)) {
            return false;
        } 
        return true;
    }
}

**************************************
LeapYearTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LeapYearTest {
    
    @Test
    public void is_divisible_by_4() {
        LeapYearOracle oracle = new LeapYearOracle();
        
        for(int i = 0; i < 100; i++) {
            assertTrue(oracle.isLeapYear(4 * (int) Math.random()));
        }
    }

    @Test
    public void is_not_otherwise_divisible_by_100() {
        LeapYearOracle oracle = new LeapYearOracle();
        
        for(int i = 0; i < 100; i++) {
            if ( i % 4 == 0)
                assertTrue(oracle.isLeapYear(i * 100 * (int) Math.random()));
            //else
              //  assertFalse(oracle.isLeapYear(i * 100 * (int) Math.random()));
        }
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4EFF737037 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    private static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    public static String answer(String input) {
        int alphaPosition = alphabet.indexOf(input)+1;
        String returnValue = "";

        for(int i=0;i<alphaPosition;i++) {
            for(int k=0;k<alphaPosition-1;k++) {
                returnValue += " ";
            }
            returnValue += alphabet.substring(i,i+1);
        }

        return returnValue;        
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void A_test() {
        String expected = "A";
        String actual = Untitled.answer("A");
        assertEquals(expected, actual);
    }

    @Test
    public void B_test() {
        String expected = " A\nB B\n A";
        String actual = Untitled.answer("B");
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    private static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    public static String answer(String input) {
        int alphaPosition = alphabet.indexOf(input)+1;
        String returnValue = "";

        for(int i=0;i<alphaPosition;i++) {
            for(int k=0;k<alphaPosition-1;k++) {
                returnValue += " ";
            }
            returnValue += alphabet.substring(i,i+1);
        }

        return returnValue;        
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void A_test() {
        String expected = "A";
        String actual = Untitled.answer("A");
        assertEquals(expected, actual);
    }


}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4E502081F2 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 39
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************
public class Diamond {
    
    public static char[] alphabet = "abcdefghijklmnopqrstuvwxyz".toUpperCase().toCharArray();

    public static String answer(char letter, boolean bothTriangle) {
        System.out.println("output");
        String toReturn = "";
        int letterPos = letterToArrayPosition(letter);

        // first triangle
        for(int i = 0; i < letterPos; i++){
            // spaces at beginning of the line
            for(int j = 0; j < letterPos - i -1; j++){
                toReturn += " ";
            }

            // write the letter
            toReturn += alphabet[i];

            // when it's not A
            if(i > 0){
                // add the spaces between the two same letters
                for(int j = 0; j < (i-1)*2+1; j++){
                    toReturn += " ";
                }

                // add the letter at the end of the line
                toReturn += alphabet[i];
            }
            
            // jump line only if not the last line
            // condition for the second triangle
            if(!bothTriangle){
                if(i < letterPos - 1)
                	toReturn += "\n";
            }
            else{
                toReturn += "\n";
            }
             
        }
        System.out.println(toReturn);
        if(!bothTriangle)
            return toReturn;

        //second triangle
        System.out.println("DiamondPart");
        for(int i = (letterPos != 1?(letterPos - 2):0); i >= 0; i--){
            // spaces at beginning of the line
            for(int j = 0; j < letterPos - i -1; j++){
                toReturn += " ";
            }

            // write the letter
            toReturn += alphabet[i];

            // when it's not A
            if(i > 0){
                // add the spaces between the two same letters
                for(int j = 0; j < (i-1)*2+1; j++){
                    toReturn += " ";
                }

                // add the letter at the end of the line
                toReturn += alphabet[i];
            }
            
            // jump line only if not the last line
            if(i > 0)
            	toReturn += "\n"; 
        }
        System.out.println(toReturn);
        return toReturn;
    }

    public static int letterToArrayPosition(char letter){
        for(int i = 0; i < alphabet.length; i++){
            if(alphabet[i] == letter)
                return (i+1);      
        }
        return 0;
    }

}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest{
    
    @Test
    public void oneRowFirstTriangleTest(){
        String expected = "A";
        String actual = Diamond.answer('A', false);
        assertEquals(expected, actual);
    }

    @Test
    public void twoRowsFirstTriangleTest() {
        String expected = " A\nB B";
        String actual = Diamond.answer('B', false);
        assertEquals(expected, actual);
    }

    @Test
    public void threeRowsFirstTriangleTest() {
        String expected = "  A\n B B\nC   C";
        String actual = Diamond.answer('C', false);
        assertEquals(expected, actual);
    }

    @Test
    public void sixRowsFirstTriangleTest() {
        String expected = "     A\n    B B\n   C   C\n  D     D\n E       E\nF         F";
        String actual = Diamond.answer('F', false);
        assertEquals(expected, actual);
    }

    @Test
    public void oneRowDiamondTest() {
        String expected = "A\nA";
        String actual = Diamond.answer('A', true);
        assertEquals(expected, actual);
    }

    @Test
    public void twoRowsDiamondTest() {
        String expected = " A\nB B\n A";
        String actual = Diamond.answer('B', true);
        assertEquals(expected, actual);
    }

    @Test
    public void fourRowsDiamondTest() {
        String expected = "   A\n  B B\n C   C\nD     D\n C   C\n  B B\n   A";
        String actual = Diamond.answer('D', true);
        assertEquals(expected, actual);
    }

    @Test
    public void justForFun() {
        String expected = true;
        Diamond.answer('D', true);
        assertEquals(expected, true);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 39
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Diamond.java
**************************************
public class Diamond {
    
    public static char[] alphabet = "abcdefghijklmnopqrstuvwxyz".toUpperCase().toCharArray();

    public static String answer(char letter, boolean bothTriangle) {
        System.out.println("output");
        String toReturn = "";
        int letterPos = letterToArrayPosition(letter);

        // first triangle
        for(int i = 0; i < letterPos; i++){
            // spaces at beginning of the line
            for(int j = 0; j < letterPos - i -1; j++){
                toReturn += " ";
            }

            // write the letter
            toReturn += alphabet[i];

            // when it's not A
            if(i > 0){
                // add the spaces between the two same letters
                for(int j = 0; j < (i-1)*2+1; j++){
                    toReturn += " ";
                }

                // add the letter at the end of the line
                toReturn += alphabet[i];
            }
            
            // jump line only if not the last line
            // condition for the second triangle
            if(!bothTriangle){
                if(i < letterPos - 1)
                	toReturn += "\n";
            }
            else{
                toReturn += "\n";
            }
             
        }
        System.out.println(toReturn);
        if(!bothTriangle)
            return toReturn;

        //second triangle
        System.out.println("DiamondPart");
        for(int i = (letterPos != 1?(letterPos - 2):0); i >= 0; i--){
            // spaces at beginning of the line
            for(int j = 0; j < letterPos - i -1; j++){
                toReturn += " ";
            }

            // write the letter
            toReturn += alphabet[i];

            // when it's not A
            if(i > 0){
                // add the spaces between the two same letters
                for(int j = 0; j < (i-1)*2+1; j++){
                    toReturn += " ";
                }

                // add the letter at the end of the line
                toReturn += alphabet[i];
            }
            
            // jump line only if not the last line
            if(i > 0)
            	toReturn += "\n"; 
        }
        System.out.println(toReturn);
        return toReturn;
    }

    public static int letterToArrayPosition(char letter){
        for(int i = 0; i < alphabet.length; i++){
            if(alphabet[i] == letter)
                return (i+1);      
        }
        return 0;
    }

}

**************************************
DiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiamondTest{
    
    @Test
    public void oneRowFirstTriangleTest(){
        String expected = "A";
        String actual = Diamond.answer('A', false);
        assertEquals(expected, actual);
    }

    @Test
    public void twoRowsFirstTriangleTest() {
        String expected = " A\nB B";
        String actual = Diamond.answer('B', false);
        assertEquals(expected, actual);
    }

    @Test
    public void threeRowsFirstTriangleTest() {
        String expected = "  A\n B B\nC   C";
        String actual = Diamond.answer('C', false);
        assertEquals(expected, actual);
    }

    @Test
    public void sixRowsFirstTriangleTest() {
        String expected = "     A\n    B B\n   C   C\n  D     D\n E       E\nF         F";
        String actual = Diamond.answer('F', false);
        assertEquals(expected, actual);
    }

    @Test
    public void oneRowDiamondTest() {
        String expected = "A\nA";
        String actual = Diamond.answer('A', true);
        assertEquals(expected, actual);
    }

    @Test
    public void twoRowsDiamondTest() {
        String expected = " A\nB B\n A";
        String actual = Diamond.answer('B', true);
        assertEquals(expected, actual);
    }

    @Test
    public void fourRowsDiamondTest() {
        String expected = "   A\n  B B\n C   C\nD     D\n C   C\n  B B\n   A";
        String actual = Diamond.answer('D', true);
        assertEquals(expected, actual);
    }

    @Test
    public void justForFun() {
        Diamond.answer('D', true);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4E1968B8CD alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int nbr) {
        if ((nbr%3==0) && (nbr%5==0))
            return "fizzbuzz";
        else if(nbr % 3 == 0)
            return "fizz";
        else if(nbr % 5 == 0)
            return "buzz";
        else
            return String.valueOf(nbr);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        String expected = "1";
        String actual = Untitled.answer(1);
        assertEquals(expected, actual);
    }

    @Test
    public void hitch_hiker2() {
        String expected = "fizz";
        String actual = Untitled.answer(3);
        assertEquals(expected, actual);
        actual = Untitled.answer(9);
        assertEquals(expected, actual);
        actual = Untitled.answer(15);
        assertEquals(expected, actual);
    }

    
    @Test
    public void hitch_hiker3() {
        String expected = "buzz";
        String actual = Untitled.answer(5);
        assertEquals(expected, actual);
        actual = Untitled.answer(10);
        assertEquals(expected, actual);
        actual = Untitled.answer(25);
        assertEquals(expected, actual);
    }

    @Test
    public void hitch_hiker4() {
        String expected = "fizzbuzz";
        String actual = Untitled.answer(15);
        assertEquals(expected, actual);
        actual = Untitled.answer(30);
        assertEquals(expected, actual);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int nbr) {
        if ((nbr%3==0) && (nbr%5==0))
            return "fizzbuzz";
        else if(nbr % 3 == 0)
            return "fizz";
        else if(nbr % 5 == 0)
            return "buzz";
        else
            return String.valueOf(nbr);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        String expected = "1";
        String actual = Untitled.answer(1);
        assertEquals(expected, actual);
    }

    @Test
    public void hitch_hiker2() {
        String expected = "fizz";
        String actual = Untitled.answer(3);
        assertEquals(expected, actual);
        actual = Untitled.answer(9);
        assertEquals(expected, actual);
    }

    
    @Test
    public void hitch_hiker3() {
        String expected = "buzz";
        String actual = Untitled.answer(5);
        assertEquals(expected, actual);
        actual = Untitled.answer(10);
        assertEquals(expected, actual);
        actual = Untitled.answer(25);
        assertEquals(expected, actual);
    }

    @Test
    public void hitch_hiker4() {
        String expected = "fizzbuzz";
        String actual = Untitled.answer(15);
        assertEquals(expected, actual);
        actual = Untitled.answer(30);
        assertEquals(expected, actual);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4DBDA3DA7D alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

   @Test
    public void testLeapYear() {
        boolean expected = true;
        boolean actual = Untitled.isLeapYear(4);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 54;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4935A86020 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
IntegerRange.java
**************************************

public class IntegerRange{
    
    int min;
    int max;
    public IntegerRange(){
    }

    public void setRange(int _max, int _min){
         this.min = _min;
        this.max = _max;
    }

    public boolean inRange(int seed){
         return (seed <= max && seed >= min);
    }
    public boolean outOfRange(int seed){
         return seed > max || seed < min;
    }
}

**************************************
IntegerRangeTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IntegerRangeTest {
    

    @Test
    public void inRange() {
        IntegerRange range = new IntegerRange();
        range.setRange(20,10);
        assertEquals(range.inRange(15), true);
       
    }

    /*
    @Test
    public void outOfRange() {
        IntegerRange range = new IntegerRange();
        range.setRange(10,20);
        assertEquals(range.outOfRange(25), false);
    }  */
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
IntegerRange.java
**************************************

public class IntegerRange{
    
    int min;
    int max;
    public IntegerRange(){
    }

    public void setRange(int _min, int _max){
         this.min = _min;
        this.max = _max;
    }

    public boolean inRange(int seed){
         return (seed <= max && seed >= min);
    }
    public boolean outOfRange(int seed){
         return seed > max || seed < min;
    }
}

**************************************
IntegerRangeTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class IntegerRangeTest {
    

    @Test
    public void inRange() {
        IntegerRange range = new IntegerRange();
        range.setRange(10,20);
        assertEquals(range.inRange(15), true);
       
    }

    /*
    @Test
    public void outOfRange() {
        IntegerRange range = new IntegerRange();
        range.setRange(10,20);
        assertEquals(range.outOfRange(25), false);
    }  */
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 47C6EB4469 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 47035FD9B1 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int[] arr=new int[100];  //  0 -closed, 1 -open

    public static int answer() {
        for (int i=2; i<=100; i++) {
            go(i);      
        }
        int closed_col=0;
        for (int i=0;i<100;i++) {
          if (arr[i] == 0) {
            closed_col++;
          }       
        }
        return closed_col;
    }

   private static void go(int seqnum) {
     int i = seqnum;
     while (i<=100) {
        if (arr[i-1] == 0) arr[i-1] = 1;
        else arr[i-1] = 0;
        i += seqnum;
  
     }
  }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int[] arr=new int[100];  //  0 -closed, 1 -open

    public static int answer() {
        for (int i=2; i<=100; i++) {
            go(i);      
        }
        int closed_col=0;
        for (int i=0;i<100;i++) {
          if (arr[i] == 0) {
            closed_col++;
          }       
        }
        return closed_col;
    }

   private static void go(int seqnum) {
     int i = seqnum;
     while (i<=100) {
        if (arr[i-1] == 0) arr[i-1] = 1;
        else arr[i-1] = 0;
        i += seqnum;
  
     }
  }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
       
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 465B671B74 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
IssueManager.java
**************************************

public class IssueManager {
    IssueStore issueStore;
    Logger log;
    EscalationManager escalationManager;
    EscalationService escalationService;

    public IssueManager() {
        issueStore = new IssueStore();
        log = new Logger();
        escalationManager = new EscalationManager();
        escalationService = new EscalationService();
    }
    
    public int create(Issue issue) {
        return 0;
    }
    
    public int update(Issue issue) {
        return 0;
    }
    
    public int delete(Issue issue) {
        return 0;
    }
}

**************************************
IssueStore.java
**************************************
public class IssueStore {
}

**************************************
EscalationManager.java
**************************************
public class EscalationManager {
}

**************************************
EscalationService.java
**************************************
public class EscalationService {
}

**************************************
Logger.java
**************************************
public class Logger {
}

**************************************
Issue.java
**************************************
public class Issue {
}

**************************************
Tests.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class Tests {
    
    @Test
    public void not_a_test() {
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
IssueManager.java
**************************************

public class IssueManager {
    IssueStore issueStore;
    Logger log;
    EscalationManager escalationManager;
    EscalationService escalationService;

    public IssueManager() {
        issueStore = new IssueStore();
        log = new Logger();
        escalationManager = new EscalationManager();
        escalationService = new EscalationService();
    }
    
    public int create(Issue issue) {
        return 0;
    }
    
    public int update(Issue issue) {
        return 0;
    }
    
    public int delete(Issue issue) {
        return 0;
    }
}

**************************************
IssueStore.java
**************************************
public class IssueStore {
}

**************************************
EscalationManager.java
**************************************
public class EscalationManager {
}

**************************************
EscalationService.java
**************************************
public class EscalationService {
}

**************************************
Logger.java
**************************************
public class Logger {
}

**************************************
Issue.java
**************************************
public class Issue {
}

**************************************
Tests.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class Tests {
    
    @Test
    public void not_a_test() {
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 4536499EEF buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
roman.java
**************************************
import java.util.Scanner;
public class roman {
	public static void main(String args[]) {
		int input;
		String s = new String();
		Scanner a = new Scanner(System.in);
		input = a.nextInt();
	    if (input < 1 || input > 4000){
	        System.out.println("Number out of range, try again");
	    }
	    else{
	        
	        while (input >= 1000){
	            s = s + "M";
	            input -= 1000;
	        }
	        while (input >= 900){
	        		s = s + "CM";
	            input -= 900;
	        }
	        while (input >= 500){
	        		s = s + "D";
	            input -= 500;
	        }
	        while (input >= 400){
	        		s = s + "CD";
	            input -= 400;
	        }
	        while (input >= 100){
	        		s = s + "C";
	            input -= 100;
	        }
	        while (input >= 90){
	        		s = s + "XC";
	            input -= 90;
	        }
	        while (input >= 50){
	        		s = s + "L";
	            input -= 50;
	        }
	        while (input >= 40){
	        		s = s + "XL";
	            input -= 40;
	        }
	        while (input >= 10){
	        		s = s + "X";
	            input -= 10;
	        }
	        while (input >= 9){
	        		s = s + "IX";
	            input -= 9;
	        }
	        while (input >= 5){
	         	s = s + "V";
	            input -= 5;
	        }
	        while (input >= 4) {
	        		s = s + "IV";
	            input -= 4;
	        }
	        while (input >= 1) {
	        		s = s + "I";
	            input -= 1;
	        }    
	        System.out.print(s);
	    }
	}
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
roman.java
**************************************
import java.util.Scanner;
public class roman {
	public static void main(String args[]) {
		int input;
		String s = new String();
		Scanner a = new Scanner(System.in);
		input = a.nextInt();
	    if (input < 1 || input > 4000){
	        System.out.println("Number out of range, try again");
	    }
	    else{
	        
	        while (input >= 1000){
	            s = s + "M";
	            input -= 1000;
	        }
	        while (input >= 900){
	        		s = s + "CM";
	            input -= 900;
	        }
	        while (input >= 500){
	        		s = s + "D";
	            input -= 500;
	        }
	        while (input >= 400){
	        		s = s + "CD";
	            input -= 400;
	        }
	        while (input >= 100){
	        		s = s + "C";
	            input -= 100;
	        }
	        while (input >= 90){
	        		s = s + "XC";
	            input -= 90;
	        }
	        while (input >= 50){
	        		s = s + "L";
	            input -= 50;
	        }
	        while (input >= 40){
	        		s = s + "XL";
	            input -= 40;
	        }
	        while (input >= 10){
	        		s = s + "X";
	            input -= 10;
	        }
	        while (input >= 9){
	        		s = s + "IX";
	            input -= 9;
	        }
	        while (input >= 5){
	         	s = s + "V";
	            input -= 5;
	        }
	        while (input >= 4) {
	        		s = s + "IV";
	            input -= 4;
	        }
	        while (input >= 1) {
	        		s = s + "I";
	            input -= 1;
	        }    
	        System.out.print(s);
	    }
	}
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 41BD1C09B1 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String isMultipleOfThree(int number) {
        return (number % 3 == 0) ? "Fizz" : String.valueOf(number) ;
    }

    public static String isMultipleOfFive(int number) {
        return (number % 5 == 0) ? "Buzz" : String.valueOf(number) ;
    }

    public static void writeNumber(int number) {
        
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testMultipleOfThree() {
        assertEquals("Fizz",Untitled.isMultipleOfThree(3));
        assertEquals("4",Untitled.isMultipleOfThree(4));
        assertEquals("100",Untitled.isMultipleOfThree(100));
        assertEquals("1",Untitled.isMultipleOfThree(1));
    }

    @Test
    public void testMultipleOfFive() {
        assertEquals("Buzz",Untitled.isMultipleOfFive(5));
        assertEquals("4",Untitled.isMultipleOfFive(4));
        assertEquals("Buzz",Untitled.isMultipleOfFive(100));
        assertEquals("1",Untitled.isMultipleOfFive(1));
    }

    @Test
    public void testMain() {
         assertEquals("FizzBuzz",Untitled.writeNumber(15));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static boolean isMultipleOfThree(int number) {
        return number % 3 == 0;
    }

    public static boolean isMultipleOfFive(int number) {
        return number % 5 == 0;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testMultipleOfThree() {
        assertEquals(true,Untitled.isMultipleOfThree(3));
        assertEquals(false,Untitled.isMultipleOfThree(4));
        assertEquals(false,Untitled.isMultipleOfThree(100));
        assertEquals(false,Untitled.isMultipleOfThree(1));
    }

    @Test
    public void testMultipleOfFive() {
        assertEquals(true,Untitled.isMultipleOfFive(5));
        assertEquals(false,Untitled.isMultipleOfFive(4));
        assertEquals(true,Untitled.isMultipleOfFive(100));
        assertEquals(false,Untitled.isMultipleOfFive(1));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 416B9107A1 wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    public static int[] calculateOpenDoors() {
        int[] answer = {1,4,9};
        return answer;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void doors_1_to_10() {
        int[] expected = {1,4,9};
        int[] actual = OneHundredDoors.calculateOpenDoors();
        //assertEquals(expected, actual);
        assertTrue(expected.equals(actual));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    public static int[] calculateOpenDoors() {
        int[] answer = {1,4,9};
        return answer;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void doors_1_to_10() {
        int[] expected = {1,4,9};
        int[] actual = OneHundredDoors.calculateOpenDoors();
        System.out.println(expected);
        System.out.println(actual);
        //assertEquals(expected, actual);
        //assertTrue(expected.equals(actual));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 416B9107A1 wolf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    public static int[] calculateOpenDoors() {
        int[] answer = {1,4,9};
        return answer;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void doors_1_to_10() {
        int[] expected = {1,4,9};
        int[] actual = OneHundredDoors.calculateOpenDoors();
        System.out.println(expected);
        System.out.println(actual);
        assertTrue(Arrays.equals(expected, actual));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
OneHundredDoors.java
**************************************

public class OneHundredDoors {
    
    public static int[] calculateOpenDoors() {
        int[] answer = {1,4,9};
        return answer;
    }
}

**************************************
OneHundredDoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class OneHundredDoorsTest {
    
    @Test
    public void doors_1_to_10() {
        int[] expected = {1,4,9};
        int[] actual = OneHundredDoors.calculateOpenDoors();
        System.out.println(expected);
        System.out.println(actual);
        //assertTrue(Arrays.equals(expected, actual));
if (expected == actual)
    System.out.println("Equal");
    
else
    System.out.println("Different");
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 3EFA04DD1D alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Triangle.java
**************************************

public class Triangle{
    
    public static int answer(int a, int b, int c) {
        return 3;
    }
}

**************************************
TriangleTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TriangleTest{
    
    @Test
    public void triangleTypeTest() {
        //3,2,1,-1
        assertEquals(3, Triangle.answer(3,3,3));
        assertEquals(2, Triangle.answer(3,3,4));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Triangle.java
**************************************

public class Triangle{
    
    public static int answer(int a, int b, int c) {
        return 3;
    }
}

**************************************
TriangleTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TriangleTest{
    
    @Test
    public void triangleTypeTest() {
        //3,2,1,-1
        assertEquals(3, Triangle.answer(3,3,3));
        }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 3E385C6974 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Arabic.java
**************************************

public class Arabic {
    
    public static String toRoman(int n) {
        return "I";
    }
}

**************************************
RomanNumberTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumberTest {
    
    @Test
    public void hitch_hiker() {    
        assertEquals(1,2);
        assertEquals("I", Arabic.toRoman(1));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Arabic.java
**************************************

public class Arabic {
    
    public static String toRoman(int n) {
        return "I";
    }
}

**************************************
RomanNumberTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RomanNumberTest {
    
    @Test
    public void hitch_hiker() {    
        assertEquals("I", Arabic.toRoman(1));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 39D9E15782 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.ArrayList;

public class RecentlyUsedList {
    
    /**
    * create an empty list
    */
    public static ArrayList<String> createList(){
        ArrayList<String> list = new ArrayList<String>();
        return list;
    }

    /**
    * add an item at the begining of the list, can take empty list
    * @return the modified list
    */
    public static ArrayList<String> addItem(ArrayList<String> list ,String item){
        //if the list is null we create one
        if(list == null){
            list = createList();
            list.add(item);

        //or else we add the new item at first postition
        }else{
            list.add(0, item);
        }

        return list;
    }

    /**
    * give the item at the given index in the given list, starting at top
    * @return the item, or "wrong index" if the index is incorrect
    */
    public static String lookItemUp(ArrayList<String> list, int index){
        if(index<0 || index>=list.size()){
            return list.get(index);
        }else{
            return "wrong index";
        }
    }
    
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Random;

public class RecentlyUsedListTest {
    
    /**
    * here we test that the list created is empty
    */
    @Test
    public void creationTest() {
        ArrayList<String> list = RecentlyUsedList.createList();
        assertTrue(list.isEmpty());
    }

    /**
    * here we test that the last added item is first in the list
    */
    @Test
    public void addTestFirst(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //then we add some items
        list.add("firstItem");
        list.add("secondItem");

        //we generate a random string
        Random rand = new Random();
        String item = String.valueOf(rand.nextInt(1000));

        list = RecentlyUsedList.addItem(list, item);
        
        assertEquals(list.get(0), item);
    }

    /**
    * here we test that the first added item is last in the list after
    * adding other items
    */
    @Test
    public void addTestLast(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //we generate a random string to add in first
        Random rand = new Random();
        String item = String.valueOf(rand.nextInt(1000));
        list.add(item);
        
        //we add several items
        list = RecentlyUsedList.addItem(list, "firstItem");
        list = RecentlyUsedList.addItem(list, "secondItem");
        list = RecentlyUsedList.addItem(list, "thirdItem");
        
        //at last we check that the item we added at first is now last
        assertEquals(list.get(list.size()-1), item);
    }

    /**
    * here we test the lookup method by giving a list and ask for items
    * where we know they are, and compare the result. With three items
    * in the list we can assume that every posibilities are covered by the
    * test (top / bottom / in-between).
    */
    @Test
    public void lookUpTest(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //we generate random strings
        Random rand = new Random();
        String itemOne = String.valueOf(rand.nextInt(1000));
        String itemTwo = String.valueOf(rand.nextInt(1000));
        String itemThree = String.valueOf(rand.nextInt(1000));

        //we add them
        list.add(itemOne);
        list.add(itemTwo);
        list.add(itemThree);

        assertEquals(itemOne, RecentlyUsedList.lookItemUp(list, 0));
        assertEquals(itemTwo, RecentlyUsedList.lookItemUp(list, 1));
        assertEquals(itemThree, RecentlyUsedList.lookItemUp(list, 2));
        assertEquals("wrong index", -12);
        assertEquals("wrong index", 3);

    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.ArrayList;

public class RecentlyUsedList {
    
    /**
    * create an empty list
    */
    public static ArrayList<String> createList(){
        ArrayList<String> list = new ArrayList<String>();
        return list;
    }

    /**
    * add an item at the begining of the list, can take empty list
    * @return the modified list
    */
    public static ArrayList<String> addItem(ArrayList<String> list ,String item){
        //if the list is null we create one
        if(list == null){
            list = createList();
            list.add(item);

        //or else we add the new item at first postition
        }else{
            list.add(0, item);
        }

        return list;
    }

    /**
    * give the item at the given index in the given list, starting at top
    * @return the item, or "wrong index" if the index is incorrect
    */
    public static String lookItemUp(ArrayList<String> list, int index){
        //if(index<0 || index>=list.size()){
            System.out.println(list.size());
            return list.get(index);
        //}else{
        //    return "wrong index";
        //}
    }
    
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Random;

public class RecentlyUsedListTest {
    
    /**
    * here we test that the list created is empty
    */
    @Test
    public void creationTest() {
        ArrayList<String> list = RecentlyUsedList.createList();
        assertTrue(list.isEmpty());
    }

    /**
    * here we test that the last added item is first in the list
    */
    @Test
    public void addTestFirst(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //then we add some items
        list.add("firstItem");
        list.add("secondItem");

        //we generate a random string
        Random rand = new Random();
        String item = String.valueOf(rand.nextInt(1000));

        list = RecentlyUsedList.addItem(list, item);
        
        assertEquals(list.get(0), item);
    }

    /**
    * here we test that the first added item is last in the list after
    * adding other items
    */
    @Test
    public void addTestLast(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //we generate a random string to add in first
        Random rand = new Random();
        String item = String.valueOf(rand.nextInt(1000));
        list.add(item);
        
        //we add several items
        list = RecentlyUsedList.addItem(list, "firstItem");
        list = RecentlyUsedList.addItem(list, "secondItem");
        list = RecentlyUsedList.addItem(list, "thirdItem");
        
        //at last we check that the item we added at first is now last
        assertEquals(list.get(list.size()-1), item);
    }

    /**
    * here we test the lookup method by giving a list and ask for items
    * where we know they are, and compare the result. With three items
    * in the list we can assume that every posibilities are covered by the
    * test (top / bottom / in-between).
    */
    @Test
    public void lookUpTest(){
        //first we create an empty list
        ArrayList<String> list = new ArrayList<String>();

        //we generate random strings
        Random rand = new Random();
        String itemOne = String.valueOf(rand.nextInt(1000));
        String itemTwo = String.valueOf(rand.nextInt(1000));
        String itemThree = String.valueOf(rand.nextInt(1000));

        //we add them
        list.add(itemOne);
        list.add(itemTwo);
        list.add(itemThree);

        assertEquals(itemOne, RecentlyUsedList.lookItemUp(list, 0));
        assertEquals(itemTwo, RecentlyUsedList.lookItemUp(list, 1));
        assertEquals(itemThree, RecentlyUsedList.lookItemUp(list, 2));
        //assertEquals("wrong index", -12);
        //assertEquals("wrong index", 3);

    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 36A7E2B746 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
AlphaDiamond.java
**************************************
public class AlphaDiamond {
    
    public String[][] print(String s) {
    String[][] diamond =  new String[52][52];

    //logic 
    return diamond;
    }
}

**************************************
AlphaDiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;


public class AlphaDiamondTest {


    @Test
    public void passing_no_letter_prints_nothing() {
        String[][] actual = new AlphaDiamond().print(null);
        assertNull(actual[0][0]);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
AlphaDiamond.java
**************************************
public class AlphaDiamond {
    
    public String[][] print(String s) {
    String[][] diamond =  new String[52][52];

    //logic 
    return diamond;
    }
}

**************************************
AlphaDiamondTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;


public class AlphaDiamondTest {


    @Test
    public void passing_no_letter_prints_nothing() {
        String[][] actual = new AlphaDiamond().print(null);
        assertNull(actual[0][0]);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 334F58621C gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void accceptance_test() {
        boolean[][] grid = new boolean[][] {
            {},
            {}};
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 3127A34D1A deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
CardSetTest.java
**************************************
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class CardSetTest {

    CardSet setA = new CardSet("2H 3D 5S 9C KD");
    CardSet setB = new CardSet("2C 3H 4S 8C AH");

	@Test
    public void compareAB() {
        String expected = "White wins - high card: Ace";
        assertEquals(expected, setA.compare(setB));
	}
	
	@Test
    public void testFindHighest() {
        char expected = 'K';
        assertEquals(expected, setA.findHighest());
	}
}

**************************************
CardSet.java
**************************************
import java.util.Arrays;

public class CardSet {
	
	Card[] cards = new Card[5];
	public CardSet(String input) {
		String strippedInput = input.replaceAll("\\s+","");
		for(int i = 0; i<5; ++i) {
			cards[i] = new Card();
			cards[i].suit = strippedInput.charAt(i*2 + 1);
			cards[i].value = strippedInput.charAt(i*2);
		}
	}
    
	public String compare(CardSet cardW) {

		StringBuffer answer = new StringBuffer();
        return answer.toString();
    }
	
	public char findHighest() {
		int maximumValue = CardUtils.values.indexOf(cards[0].value);
		for(int i=0; i<cards.length; ++i) {
			int currentValue = CardUtils.values.indexOf(cards[i].value);
			if(currentValue > maximumValue) {
				maximumValue = currentValue;
			}
		}
		return CardUtils.values.get(maximumValue);
	}
}

**************************************
Card.java
**************************************
public class Card {

	public char value;
	public char suit;
	
	public Card() {
		// TODO Auto-generated constructor stub
	}

}

**************************************
CardUtils.java
**************************************
import java.util.ArrayList;
import java.util.Arrays;

public class CardUtils {
	public static final ArrayList<Character> values = new ArrayList(Arrays.asList('2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'));
	public static final char[] suits = {'C', 'D', 'H', 'S'};
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
CardSetTest.java
**************************************
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class CardSetTest {

    CardSet setA = new CardSet("2H 3D 5S 9C KD");
    CardSet setB = new CardSet("2C 3H 4S 8C AH");

	
	@Test
    public void testFindHighest() {
        char expected = 'K';
        assertEquals(expected, setA.findHighest());
	}
}

**************************************
CardSet.java
**************************************
import java.util.Arrays;

public class CardSet {
	
	Card[] cards = new Card[5];
	public CardSet(String input) {
		String strippedInput = input.replaceAll("\\s+","");
		for(int i = 0; i<5; ++i) {
			cards[i] = new Card();
			cards[i].suit = strippedInput.charAt(i*2 + 1);
			cards[i].value = strippedInput.charAt(i*2);
		}
	}
    
	public String compare(CardSet cardW) {

		StringBuffer answer = new StringBuffer();
        return answer.toString();
    }
	
	public char findHighest() {
		int maximumValue = CardUtils.values.indexOf(cards[0].value);
		for(int i=0; i<cards.length; ++i) {
			int currentValue = CardUtils.values.indexOf(cards[i].value);
			if(currentValue > maximumValue) {
				maximumValue = currentValue;
			}
		}
		return CardUtils.values.get(maximumValue);
	}
}

**************************************
Card.java
**************************************
public class Card {

	public char value;
	public char suit;
	
	public Card() {
		// TODO Auto-generated constructor stub
	}

}

**************************************
CardUtils.java
**************************************
import java.util.ArrayList;
import java.util.Arrays;

public class CardUtils {
	public static final ArrayList<Character> values = new ArrayList(Arrays.asList('2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'));
	public static final char[] suits = {'C', 'D', 'H', 'S'};
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 307C5B45D0 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LcdDigits.java
**************************************

public class LcdDigits {
    
    public String display(int input) {
        if (input == 1) {
            return "...\n..|\n..|\n";
        }
        return "._.\n..|\n..|\n";
    }
}

**************************************
LcdDigitsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LcdDigitsTest {
    
    @Test
    public void displayOne() {
        String actual = new LcdDigits().display(1);
        assertEquals(threeLines("...", 
                                "..|", 
                                "..|"), actual);
    }

    @Test
    public void displaySeven() {
        String actual = new LcdDigits().display(7);
        assertEquals(threeLines("._.", 
                                "..|", 
                                "..|"), actual);
    }

    @Test
    public void displayEleven() {
        String actual = new LcdDigits().display(11);
        assertEquals(threeLines("... ...",
                                "..| ..|", 
                                "..| ..|"), actual);
    }

    private String threeLines(String a, String b, String c) {
        return a + "\n" + b + "\n" + c + "\n";
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 14
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LcdDigits.java
**************************************

public class LcdDigits {
    
    public String display(int input) {
        if (input == 1) {
            return "...\n..|\n..|\n";
        }
        return "._.\n..|\n..|\n";
    }
}

**************************************
LcdDigitsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LcdDigitsTest {
    
    @Test
    public void displayOne() {
        String actual = new LcdDigits().display(1);
        assertEquals(threeLines("...", "..|", "..|"), actual);
    }

    @Test
    public void displaySeven() {
        String actual = new LcdDigits().display(7);
        assertEquals(threeLines("._.", "..|", "..|"), actual);
    }

    private String threeLines(String a, String b, String c) {
        return a + "\n" + b + "\n" + c + "\n";
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2ECB21E2EF lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ReverseRoman.java
**************************************
import java.util.Hashtable;


public class ReverseRoman {
    
    public static int arabicize(String s) {
        
        Hashtable<String, Integer> myDict = new Hashtable<String, Integer>();

        myDict.put("I", 1);
        myDict.put("II", 2);
        myDict.put("III", 3);
        myDict.put("IV", 4);
        myDict.put("V", 5);
        myDict.put("VI", 6);
        myDict.put("VII", 7);
        myDict.put("VIII", 8);
        myDict.put("IX", 9);
        myDict.put("X", 10);



        return myDict.get(s);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testReverseRoman() {

        assertEquals(1, ReverseRoman.arabicize("I"));

        assertEquals(2, ReverseRoman.arabicize("II"));

        assertEquals(4, ReverseRoman.arabicize("IV"));

        assertEquals(11, ReverseRoman.arabicize("XI"));


    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ReverseRoman.java
**************************************
import java.util.Hashtable;


public class ReverseRoman {
    
    public static int arabicize(String s) {
        
        Hashtable<String, Integer> myDict = new Hashtable<String, Integer>();

        myDict.put("I", 1);
        myDict.put("II", 2);
        myDict.put("III", 3);
        myDict.put("IV", 4);
        myDict.put("V", 5);
        myDict.put("VI", 6);
        myDict.put("VII", 7);
        myDict.put("VIII", 8);
        myDict.put("IX", 9);
        myDict.put("X", 10);



        return myDict.get(s);
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testReverseRoman() {

        assertEquals(1, ReverseRoman.arabicize("I"));

        assertEquals(2, ReverseRoman.arabicize("II"));

        assertEquals(4, ReverseRoman.arabicize("IV"));

       // assertEquals(11, ReverseRoman.arabicize("XI"));


    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2E81ED5884 elephant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Cell.java
**************************************

public class Cell {
    private static boolean stateAlive;
    private static boolean nextStateAlive;
 
    public static int answer() {
        return 45;
    }
    public void setAlive(Boolean alive){
        stateAlive=alive;
    }
    public static boolean cellLives(Boolean alive, int neighbors) {
        stateAlive=alive;
        if(stateAlive==true){
            nextStateAlive = (neighbors>1 && neighbors<4);
        }else{
            nextStateAlive = (neighbors==3);
        }
        return nextStateAlive;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 50;
        int actual = Cell.answer();
        assertEquals(expected, actual);
    }

//3. Any live cell with two or three live neighbours lives 
//  on to the next generation. 
    @Test
    public void rule3() {        
        assertEquals(true, Cell.cellLives(true,3));
    }

//1. Any live cell with fewer than two live neighbours dies, 
//   as if caused by underpopulation.
    @Test
    public void rule1() {        
        assertEquals(false, Cell.cellLives(true,1));
    }


//2. Any live cell with more than three live neighbours dies, 
//   as if by overcrowding.
    @Test
    public void rule2() {        
        assertEquals(false, Cell.cellLives(true,4));
    }

//4. Any dead cell with exactly three live neighbours becomes 
//   a live cell.
    @Test
    public void rule4() {        
        assertEquals(true, Cell.cellLives(false,3));
    }

    @Test
    public void boardExists() {
        Board board = new Board(3,3);        
        assertNotNull(board.boardExists());
    }


}

**************************************
Board.java
**************************************
public class Board{
    Cell cell;
    Cell[][] theBoard;

    public Board(int rows, int columns){
        theBoard = new Cell[rows][columns];
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                cell= new Cell();
                Boolean alive = (Math.round(Math.random())==1);
                cell.setAlive(alive);
                theBoard[i][j]= cell;                
            }
        }
    }
    public boolean boardExists(){
        return (theBoard!=null);
    }
    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Cell.java
**************************************

public class Cell {
    private static boolean stateAlive;
    private static boolean nextStateAlive;
 
    public void setAlive(Boolean alive){
        stateAlive=alive;
    }
    public static boolean cellLives(Boolean alive, int neighbors) {
        stateAlive=alive;
        if(stateAlive==true){
            nextStateAlive = (neighbors>1 && neighbors<4);
        }else{
            nextStateAlive = (neighbors==3);
        }
        return nextStateAlive;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    
//3. Any live cell with two or three live neighbours lives 
//  on to the next generation. 
    @Test
    public void rule3() {        
        assertEquals(true, Cell.cellLives(true,3));
    }

//1. Any live cell with fewer than two live neighbours dies, 
//   as if caused by underpopulation.
    @Test
    public void rule1() {        
        assertEquals(false, Cell.cellLives(true,1));
    }


//2. Any live cell with more than three live neighbours dies, 
//   as if by overcrowding.
    @Test
    public void rule2() {        
        assertEquals(false, Cell.cellLives(true,4));
    }

//4. Any dead cell with exactly three live neighbours becomes 
//   a live cell.
    @Test
    public void rule4() {        
        assertEquals(true, Cell.cellLives(false,3));
    }

    @Test
    public void boardExists() {
        Board board = new Board(3,3);        
        assertNotNull(board.boardExists());
    }


}

**************************************
Board.java
**************************************
public class Board{
    Cell cell;
    Cell[][] theBoard;

    public Board(int rows, int columns){
        theBoard = new Cell[rows][columns];
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                cell= new Cell();
                Boolean alive = (Math.round(Math.random())==1);
                cell.setAlive(alive);
                theBoard[i][j]= cell;                
            }
        }
    }
    public boolean boardExists(){
        return (theBoard!=null);
    }
    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2B7A46670E buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.*;

public class RecentlyUsedList {
    
    private LinkedList<String> innerList = new LinkedList<String>();

    public boolean isEmpty() {
        return innerList.isEmpty();
    }

    public void add(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException("String cannot be null or empty");
        }
        if (innerList.contains(str)) {
            innerList.remove(str);
        }
        innerList.addFirst(str);
    }

    public String get(int index) {
        return innerList.get(index);
    }

    public int size() {
        return innerList.size();
    }
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RecentlyUsedListTest {
    
    public String makeDiffString() {
        return 
            " expected       actual" + "\n" +
            " \"dee\"    0==   \"dee\"" + "\n" +
            " \"spey\"   1==   \"spey\"" + "\n" +
            " \"tay\"    2!=   \"tone\"" + "\n" +
            "          3     \"tay\"" + "\n";
    }

    private String q(String s) {
        return "\"" + s + "\"";
    }

    private String q(int n, String s) {
        StringBuilder bob = new StringBuilder();
        bob.append('"');
        bob.append(s);
        bob.append('"');
        for (int i = 0; i < n - s.length(); i++) {
            bob.append(' ');
        }
        return bob.toString();
    }

    private String blank() {
        return "    ";
    }

    private String indexCf(int n, String lhs, String rhs) {
        StringBuilder bob = new StringBuilder();
        String spacer = "   ";
        bob.append(spacer);
        bob.append(n);
        if (lhs.equals(rhs)) {
            bob.append("==");
        } else {
            bob.append("!=");
        }
        bob.append(spacer);
        return bob.toString();
    }

    @Test
    public void i_want_a_nice_list_diff_string() {

        String[] expected = new String[]{ "dee", "spey", "tay" };
        String[] actual = new String[]{ "dee", "spey", "tone", "tay" };

        String diff = makeDiffString();

        StringBuilder bob = new StringBuilder();

        bob.append(" expected       actual" + "\n");

        for (int i = 0; i < 2; i++) {
            bob.append(" " + q(4,expected[i]));
            switch (i) {
            case 0: bob.append("   0==   "); break;
            case 1: bob.append("   1==   "); break;
            case 2: bob.append("   2!=   "); break;
            }            
            bob.append(q(actual[i]) + "\n");
        }

        bob.append(" " + blank());
        bob.append("     3     ");
        bob.append(q(actual[3]) + "\n");

        String message = bob.toString();

        assertEquals(message, diff);
    }

    @Test
    public void new_list_is_empty() {
        assertTrue(new RecentlyUsedList().isEmpty());
    }

    @Test
    public void most_recently_added_item_is_first() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 3");

        assertEquals("text 3", list.get(0));
    }

    @Test
    public void the_least_recently_added_item_is_last() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 3");

        assertEquals("text 1", list.get(list.size() - 1));
    }

    @Test
    public void duplicate_insertions_are_moved_rather_than_added() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 1");

        assertEquals("text 1", list.get(0));
        assertEquals(2, list.size());
    }

    @Test(expected=IllegalArgumentException.class)
    public void null_insertions_are_not_allowed() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add(null);
    }

    @Test(expected=IllegalArgumentException.class)
    public void empty_string_insertions_are_not_allowed() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("");
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 37
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.*;

public class RecentlyUsedList {
    
    private LinkedList<String> innerList = new LinkedList<String>();

    public boolean isEmpty() {
        return innerList.isEmpty();
    }

    public void add(String str) {
        if (str == null || str.length() == 0) {
            throw new IllegalArgumentException("String cannot be null or empty");
        }
        if (innerList.contains(str)) {
            innerList.remove(str);
        }
        innerList.addFirst(str);
    }

    public String get(int index) {
        return innerList.get(index);
    }

    public int size() {
        return innerList.size();
    }
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class RecentlyUsedListTest {
    
    public String makeDiffString() {
        return 
            " expected       actual" + "\n" +
            " \"dee\"    0==   \"dee\"" + "\n" +
            " \"spey\"   1==   \"spey\"" + "\n" +
            " \"tay\"    2!=   \"tone\"" + "\n" +
            "          3     \"tay\"" + "\n";
    }

    private String q(String s) {
        return "\"" + s + "\"";
    }

    private String q(int n, String s) {
        StringBuilder bob = new StringBuilder();
        bob.append('"');
        bob.append(s);
        bob.append('"');
        for (int i = 0; i < n - s.length(); i++) {
            bob.append(' ');
        }
        return bob.toString();
    }

    private String blank() {
        return "    ";
    }

    private String indexCf(int n, String lhs, String rhs) {
        StringBuilder bob = new StringBuilder();
        String spacer = "   ";
        bob.append(spacer);
        bob.append(n);
        if (lhs.equals(rhs)) {
            bob.append("==");
        } else {
            bob.append("!=");
        }
        bob.append(spacer);
        return bob.toString();
    }

    @Test
    public void i_want_a_nice_list_diff_string() {

        String[] expected = new String[]{ "dee", "spey", "tay" };
        String[] actual = new String[]{ "dee", "spey", "tone", "tay" };

        String diff = makeDiffString();

        StringBuilder bob = new StringBuilder();

        bob.append(" expected       actual" + "\n");

        for (int i = 0; i < 2; i++) {
            bob.append(" " + q(4,expected[i]));
            switch (i) {
            case 0: bob.append("   0==   "); break;
            case 1: bob.append("   1==   "); break;
            case 2: bob.append("   2!=   "); break;
            }            
            bob.append(q(actual[i]) + "\n");
        }

        bob.append(" " + blank());
        bob.append("     3     ");
        bob.append(q(actual[3]) + "\n");

        String message = bob.toString();

        if (!message.equals(diff)) {
            System.out.println(diff);
            System.out.println(message);
        }
    }

    @Test
    public void new_list_is_empty() {
        assertTrue(new RecentlyUsedList().isEmpty());
    }

    @Test
    public void most_recently_added_item_is_first() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 3");

        assertEquals("text 3", list.get(0));
    }

    @Test
    public void the_least_recently_added_item_is_last() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 3");

        assertEquals("text 1", list.get(list.size() - 1));
    }

    @Test
    public void duplicate_insertions_are_moved_rather_than_added() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("text 1");
        list.add("text 2");
        list.add("text 1");

        assertEquals("text 1", list.get(0));
        assertEquals(2, list.size());
    }

    @Test(expected=IllegalArgumentException.class)
    public void null_insertions_are_not_allowed() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add(null);
    }

    @Test(expected=IllegalArgumentException.class)
    public void empty_string_insertions_are_not_allowed() {
        RecentlyUsedList list = new RecentlyUsedList();
        list.add("");
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 29DB8772E0 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void updateQuality_normal_item_gives_name_not_changed() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  4, app.items[0].sellIn);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_Quality_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 19, app.items[0].quality);
	}

        @Test
	public void updateQuality_normal_item_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  -1, app.items[0].sellIn);
	}

         @Test
	public void updateQuality_normal_item_zero_sellIn_gives_quality_reduced_by_two() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 13, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 4, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_quality_increased_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 21, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( -1, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_quality_increased_by_two() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 22, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_can_not_increase_in_quality() {
		assertEquals( 50, getItemQualityAfterOneDay( new Item("Aged Brie", 8, 50)));
	}

	private int getItemQualityAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.quality;
	}

        private int getItemSellInAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.sellIn;
	}

         @Test
	public void updateQuality_aged_brie_can_not_increase_in_quality() {
		assertEquals( 50, getItemQualityAfterOneDay( new Item("Aged Brie", 8, 50)));
	}

     @Test
	public void updateQuality_normal_item_can_not_decrease_below_zero() {
		assertEquals( 0, getItemQualityAfterOneDay( new Item("Hat", 8, 0)));
	}


}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void updateQuality_normal_item_gives_name_not_changed() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  4, app.items[0].sellIn);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_Quality_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 19, app.items[0].quality);
	}

        @Test
	public void updateQuality_normal_item_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  -1, app.items[0].sellIn);
	}

         @Test
	public void updateQuality_normal_item_zero_sellIn_gives_quality_reduced_by_two() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 13, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 4, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_quality_increased_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 21, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( -1, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_quality_increased_by_two() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 22, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_can_not_increase_in_quality() {
		assertEquals( 50, getItemQualityAfterOneDay( new Item("Aged Brie", 8, 50)));
	}

	private int getItemQualityAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.quality;
	}

        private int getItemSellInAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.sellIn;
	}

   

     @Test
	public void updateQuality_normal_item_can_not_decrease_below_zero() {
		assertEquals( 0, getItemQualityAfterOneDay( new Item("Hat", 8, 0)));
	}


}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 29DB8772E0 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 36
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void updateQuality_normal_item_gives_name_not_changed() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  4, app.items[0].sellIn);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_Quality_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 19, app.items[0].quality);
	}

        @Test
	public void updateQuality_normal_item_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  -1, app.items[0].sellIn);
	}

         @Test
	public void updateQuality_normal_item_zero_sellIn_gives_quality_reduced_by_two() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 13, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 4, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_quality_increased_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 21, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( -1, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_quality_increased_by_two() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 22, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_can_not_increase_in_quality() {
		assertEquals( 50, getItemQualityAfterOneDay( new Item("Aged Brie", 8, 50)));
	}

	private int getItemQualityAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.quality;
	}

        private int getItemSellInAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.sellIn;
	}

   

     @Test
	public void updateQuality_normal_item_can_not_decrease_below_zero() {
		assertEquals( 0, getItemQualityAfterOneDay( new Item("Hat", 8, 0)));
	}

private static String BACK = "Backstage passes to a TAFKAL80ETC concert";


         @Test
	public void updateQuality_backstage_quality_17_daysleft() {
		assertEquals(11, getItemQualityAfterOneDay( new Item(BACK, 17, 10)));
	}

     @Test
	public void updateQuality_backstage_quality_7_daysleft() {
		assertEquals(12, getItemQualityAfterOneDay( new Item(BACK, 7, 10)));
	}


     @Test
	public void updateQuality_backstage_quality_2_daysleft() {
		assertEquals(13, getItemQualityAfterOneDay( new Item(BACK, 2, 10)));
	}

 @Test
	public void updateQuality_backstage_quality_0_daysleft() {
		assertEquals(0, getItemQualityAfterOneDay( new Item(BACK, 0, 10)));
	}

     @Test
	public void updateQuality_backstage_quality_2_daysleft() {
		assertEquals(13, getItemQualityAfterOneDay( new Item(BACK, 2, 10)));
	}

        @Test
	public void updateQuality_selfuras_quality_80__2_daysleft() {
		assertEquals(80, getItemQualityAfterOneDay( new Item(SULFURAS, 2, 80)));
	}
private static String SULFURAS ="Sulfuras, Hand of Ragnaros";

@Test
	public void updateQuality_selfuras_quality_80_0_daysleft() {
		assertEquals(80, getItemQualityAfterOneDay( new Item(SULFURAS, 0, 80)));
	}
        
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 36
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void updateQuality_normal_item_gives_name_not_changed() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  4, app.items[0].sellIn);
	}

	@Test
	public void updateQuality_normal_item_positive_sellIn_gives_Quality_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 19, app.items[0].quality);
	}

        @Test
	public void updateQuality_normal_item_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals(  -1, app.items[0].sellIn);
	}

         @Test
	public void updateQuality_normal_item_zero_sellIn_gives_quality_reduced_by_two() {
		Item[] items = new Item[] { new Item("Hat", 0, 15) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 13, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 4, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_positive_sellIn_gives_quality_increased_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 21, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_sellIn_reduced_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( -1, app.items[0].sellIn);
	}

        @Test
	public void updateQuality_aged_brie_zero_sellIn_gives_quality_increased_by_two() {
		Item[] items = new Item[] { new Item("Aged Brie", 0, 20) };
		GildedRose app = new GildedRose(items);
                app.updateQuality();
		assertEquals( 22, app.items[0].quality);
	}

        @Test
	public void updateQuality_aged_brie_can_not_increase_in_quality() {
		assertEquals( 50, getItemQualityAfterOneDay( new Item("Aged Brie", 8, 50)));
	}

	private int getItemQualityAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.quality;
	}

        private int getItemSellInAfterOneDay(Item item) {
		GildedRose app = new GildedRose(new Item[] {item});
                app.updateQuality();
                return item.sellIn;
	}

   

     @Test
	public void updateQuality_normal_item_can_not_decrease_below_zero() {
		assertEquals( 0, getItemQualityAfterOneDay( new Item("Hat", 8, 0)));
	}

private static String BACK = "Backstage passes to a TAFKAL80ETC concert";


         @Test
	public void updateQuality_backstage_quality_17_daysleft() {
		assertEquals(11, getItemQualityAfterOneDay( new Item(BACK, 17, 10)));
	}

     @Test
	public void updateQuality_backstage_quality_7_daysleft() {
		assertEquals(12, getItemQualityAfterOneDay( new Item(BACK, 7, 10)));
	}


     @Test
	public void updateQuality_backstage_quality_2_daysleft() {
		assertEquals(13, getItemQualityAfterOneDay( new Item(BACK, 2, 10)));
	}

 @Test
	public void updateQuality_backstage_quality_0_daysleft() {
		assertEquals(0, getItemQualityAfterOneDay( new Item(BACK, 0, 10)));
	}


        @Test
	public void updateQuality_selfuras_quality_80__2_daysleft() {
		assertEquals(80, getItemQualityAfterOneDay( new Item(SULFURAS, 2, 80)));
	}
private static String SULFURAS ="Sulfuras, Hand of Ragnaros";

@Test
	public void updateQuality_selfuras_quality_80_0_daysleft() {
		assertEquals(80, getItemQualityAfterOneDay( new Item(SULFURAS, 0, 80)));
	}
        
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 29DB8772E0 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void quality_and_sellIn_degrade_by_one() {
		Item[] items = new Item[] { new Item("foo", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
		assertEquals(99, app.items[0].sellIn);
		assertEquals(24, app.items[0].quality);
	}

        @Test
	public void item_aged_brie_quality_and_sellIn_increase_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("Aged Brie", app.items[0].name);
		assertEquals(101, app.items[0].sellIn);
		assertEquals(26, app.items[0].quality);
	}
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void quality_and_sellIn_degrade_by_one() {
		Item[] items = new Item[] { new Item("foo", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
		assertEquals(99, app.items[0].sellIn);
		assertEquals(24, app.items[0].quality);
	}

        @Test
	public void item_aged_brie_quality_and_sellIn_increase_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("Aged Brie", app.items[0].name);
		//assertEquals(101, app.items[0].sellIn);
		assertEquals(26, app.items[0].quality);
	}
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 29DB8772E0 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void quality_and_sellIn_degrade_by_one() {
		Item[] items = new Item[] { new Item("foo", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
		assertEquals(99, app.items[0].sellIn);
		assertEquals(24, app.items[0].quality);
	}

        @Test
	public void item_aged_brie_quality_and_sellIn_increase_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("Aged Brie", app.items[0].name);
		assertEquals(6, app.items[0].sellIn);
		assertEquals(26, app.items[0].quality);
	}
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void quality_and_sellIn_degrade_by_one() {
		Item[] items = new Item[] { new Item("foo", 100, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
		assertEquals(99, app.items[0].sellIn);
		assertEquals(24, app.items[0].quality);
	}

        @Test
	public void item_aged_brie_quality_and_sellIn_increase_by_one() {
		Item[] items = new Item[] { new Item("Aged Brie", 5, 25) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("Aged Brie", app.items[0].name);
		assertEquals(26, app.items[0].quality);
	}
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 29DB8772E0 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void foo() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

        @Test
        public void updateQuality_itemApple_decreases_sellin_and_quality_by_one() {
		Item[] items = new Item[] { new Item("apple", 10, 10) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals(9, app.items[0].sellIn);    
		assertEquals(9, app.items[0].quality);    
        }


        @Test
        public void updateQuality_itemAppleSellinZero_gives_qualityDecreasesByTwo() {
		Item[] items = new Item[] { new Item("apple", 0, 10) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals(0, app.items[0].sellIn);    
		assertEquals(8, app.items[0].quality);    
        }
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
GildedRose.java
**************************************

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a TAFKAL80ETC concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}

**************************************
GildedRoseTest.java
**************************************

import static org.junit.Assert.*;

import org.junit.Test;

public class GildedRoseTest {

	@Test
	public void foo() {
		Item[] items = new Item[] { new Item("foo", 0, 0) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals("foo", app.items[0].name);
	}

        @Test
        public void updateQuality_itemApple_decreases_sellin_and_quality_by_one() {
		Item[] items = new Item[] { new Item("apple", 10, 10) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals(9, app.items[0].sellIn);    
		assertEquals(9, app.items[0].quality);    
        }


        @Test
        public void updateQuality_itemAppleSellinZero_gives_qualityDecreasesByTwo() {
		Item[] items = new Item[] { new Item("apple", 0, 10) };
		GildedRose app = new GildedRose(items);
		app.updateQuality();
		assertEquals(8, app.items[0].quality);    
        }
}

**************************************
Item.java
**************************************

public class Item {

    public String name;

    public int sellIn;

    public int quality;
    
    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }
    
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2842AF578F koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 78
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ISBNTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNTest {

    @Test
    public void testRemoveBlanks() {
        ISBN isbn = ISBN.makeNewISBN("0 471 60695 2");
        assertEquals("0471606952",isbn.cleanString());
    }

    @Test
    public void testRemoveDashess() {
        ISBN isbn = ISBN.makeNewISBN("0-471-60695-2");
        assertEquals("0471606952",isbn.cleanString());
    }

    @Test
    public void shortlengthISBNIsInvalid() {
        ISBN isbn = ISBN.makeNewISBN("88888888");
        assertFalse(isbn.isValid());
    }

    @Test
    public void medLengthISBNIsInvalid() {
        ISBN isbn = ISBN.makeNewISBN("12-12-12-12-12-12");
        assertFalse(isbn.isValid());
    }

    @Test
    public void length10ISBNIsValid() {
        ISBN isbn = ISBN.makeNewISBN("0471606952");
        assertTrue(isbn.isValid());
    }

    @Test
    public void length13ISBNIsVasid() {
        ISBN isbn = ISBN.makeNewISBN("978-0596809485");
        assertTrue(isbn.isValid());
    }

    @Test
    public void integerValueForDigitTest() {
        String digits = "0123456789";
        for (int i = 0; i < digits.length(); i++ ) {
            String digit = digits.substring(i,i+1);
            assertEquals(i, ISBN.integerValueForDigit(digit));
        }
    }

    @Test
    public void initial10ChecksumForShortLength() {
        ISBN isbn = ISBN.makeNewISBN("88888888");
        assertEquals(-1,isbn.initialChecksumForLength10());
    }

    @Test
    public void initial10ChecksumForLongLength() {
        ISBN isbn = ISBN.makeNewISBN("12-12-12-12-12-12");
        assertEquals(-1,isbn.initialChecksumForLength10());
    }

    @Test
    public void initial10ChecksumValid() {
        ISBN isbn = ISBN.makeNewISBN("0471606952");
        assertEquals(184,isbn.initialChecksumForLength10());
    }

    @Test
    public void length10CheckValid() {
        ISBN isbn = ISBN.makeNewISBN("0471606952");
        assertEquals(2,isbn.checksumForLength10());
    }

}

**************************************
ISBN.java
**************************************

public abstract class ISBN {

    String isbnString;

    ISBN() {}
    
    public static ISBN makeNewISBN(String initialString) {
        ISBN ret = new ISBNInvalid(initialString);
        if (ret.lengthIs(10)){
            return new ISBN10(initialString);
        }
        if (ret.lengthIs(13)){
            return new ISBN13(initialString);
        }
        return ret;    
    }

    public void initializeString(String initialString){
        isbnString = initialString;
        isbnString = isbnString.replace(" ","");
        isbnString = isbnString.replace("-","");
    }

    public String cleanString(){
        return isbnString;
    }

    public boolean isValid(){
        return (
            lengthIs(10) || lengthIs(13)
        );
    }

    public boolean lengthIs(int n) {
        return isbnString.length() == n;
    }

    public int checksumForLength10() {
        int cs = initialChecksumForLength10();
        return cs%11;
    }

    public int initialChecksumForLength10() {
        if (!lengthIs(10)) return -1;
        int sum = 0;
        for (int i = 0; i < isbnString.length() - 1; i++ ) {
            String digit = isbnString.substring(i,i+1);
            int value = ISBN.integerValueForDigit(digit);
            sum += i*value;
        }
        return sum;  
    }

    public static int integerValueForDigit(String digit) {
        return new Integer(digit).intValue();
    }

}

**************************************
ISBN10.java
**************************************
public class ISBN10 extends ISBN{

    ISBN10(String initialString) {
        initializeString(initialString);
        if (!lengthIs(10))
            throw new IllegalArgumentException("Length of cleaned string must be 10");
    }
}

**************************************
ISBN13.java
**************************************
public class ISBN13 extends ISBN{

    ISBN13(String initialString) {
        initializeString(initialString);
        if (!lengthIs(13))
            throw new IllegalArgumentException("Length of cleaned string must be 10");
    }

}

**************************************
ISBNInvalid.java
**************************************
public class ISBNInvalid extends ISBN{

    ISBNInvalid(String initialString) {
        initializeString(initialString);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 78
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ISBNTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNTest {

    @Test
    public void testRemoveBlanks() {
        ISBN isbn = ISBN.makeNewISBN("0 471 60695 2");
        assertEquals("0471606952",isbn.cleanString());
    }

    @Test
    public void testRemoveDashess() {
        ISBN isbn = ISBN.makeNewISBN("0-471-60695-2");
        assertEquals("0471606952",isbn.cleanString());
    }

    @Test
    public void shortlengthISBNIsInvalid() {
        ISBN isbn = ISBN.makeNewISBN("88888888");
        assertFalse(isbn.isValid());
    }

    @Test
    public void medLengthISBNIsInvalid() {
        ISBN isbn = ISBN.makeNewISBN("12-12-12-12-12-12");
        assertFalse(isbn.isValid());
    }

    @Test
    public void length10ISBNIsValid() {
        ISBN isbn = ISBN.makeNewISBN("0471606952");
        assertTrue(isbn.isValid());
    }

    @Test
    public void length13ISBNIsVasid() {
        ISBN isbn = ISBN.makeNewISBN("978-0596809485");
        assertTrue(isbn.isValid());
    }

    @Test
    public void integerValueForDigitTest() {
        String digits = "0123456789";
        for (int i = 0; i < digits.length(); i++ ) {
            String digit = digits.substring(i,i+1);
            assertEquals(i, ISBN.integerValueForDigit(digit));
        }
    }

    @Test
    public void initial10ChecksumForShortLength() {
        ISBN isbn = ISBN.makeNewISBN("88888888");
        assertEquals(-1,isbn.initialChecksumForLength10());
    }

    @Test
    public void initial10ChecksumForLongLength() {
        ISBN isbn = ISBN.makeNewISBN("12-12-12-12-12-12");
        assertEquals(-1,isbn.initialChecksumForLength10());
    }

//    @Test
//    public void initial10ChecksumValid() {
//        ISBN isbn = ISBN.makeNewISBN("0471606952");
//        assertEquals(184,isbn.initialChecksumForLength10());
//    }

//    @Test
//    public void length10CheckValid() {
//        ISBN isbn = ISBN.makeNewISBN("0471606952");
//        assertEquals(2,isbn.checksumForLength10());
//    }

}

**************************************
ISBN.java
**************************************

public abstract class ISBN {

    String isbnString;

    ISBN() {}
    
    public static ISBN makeNewISBN(String initialString) {
        ISBN ret = new ISBNInvalid(initialString);
        if (ret.lengthIs(10)){
            return new ISBN10(initialString);
        }
        if (ret.lengthIs(13)){
            return new ISBN13(initialString);
        }
        return ret;    
    }

    public void initializeString(String initialString){
        isbnString = initialString;
        isbnString = isbnString.replace(" ","");
        isbnString = isbnString.replace("-","");
    }

    public String cleanString(){
        return isbnString;
    }

    public boolean isValid(){
        return (
            lengthIs(10) || lengthIs(13)
        );
    }

    public boolean lengthIs(int n) {
        return isbnString.length() == n;
    }

    public int checksumForLength10() {
        int cs = initialChecksumForLength10();
        return cs%11;
    }

    public int initialChecksumForLength10() {
        if (!lengthIs(10)) return -1;
        int sum = 0;
        for (int i = 0; i < isbnString.length() - 1; i++ ) {
            String digit = isbnString.substring(i,i+1);
            int value = ISBN.integerValueForDigit(digit);
            sum += i*value;
        }
        return sum;  
    }

    public static int integerValueForDigit(String digit) {
        return new Integer(digit).intValue();
    }

}

**************************************
ISBN10.java
**************************************
public class ISBN10 extends ISBN{

    ISBN10(String initialString) {
        initializeString(initialString);
        if (!lengthIs(10))
            throw new IllegalArgumentException("Length of cleaned string must be 10");
    }
}

**************************************
ISBN13.java
**************************************
public class ISBN13 extends ISBN{

    ISBN13(String initialString) {
        initializeString(initialString);
        if (!lengthIs(13))
            throw new IllegalArgumentException("Length of cleaned string must be 10");
    }

}

**************************************
ISBNInvalid.java
**************************************
public class ISBNInvalid extends ISBN{

    ISBNInvalid(String initialString) {
        initializeString(initialString);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 25B39C484E buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Tennis.java
**************************************

public class Tennis {
    
    public static int answer() {
        return 42;
    }
}

**************************************
TennisTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class TennisTest {
    
    // Set-Up
    @Before
    public void setUp() {
        Tennis game = new Tennis();
    }

    @Test
    public void test() {
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2592F4A860 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class FizzRunner {
    
  public static void main(String[] args) {
    FizzBuzzer fb = new FizzBuzzer();
    for (int i = 1; i < 101; i++) {
      System.out.println(fb.getValue(i));
    };
  }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
FizzBuzzer.java
**************************************
public class FizzBuzzer {

  public String getValue(int number) {
    boolean three = number % 3 == 0;
    boolean five = number % 5 == 0;
    if (three & five) {
      return "FizzBuzz";
    } else if (three) {
      return "Fizz";
    } else if (five) {
      return "Buzz";
    } else {
      return Integer.toString(number);
    }
  }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzRunner.java
**************************************

public class FizzRunner {
    
  public static void main(String[] args) {
    FizzBuzzer fb = new FizzBuzzer();
    for (int i = 1; i < 101; i++) {
      System.out.println(fb.getValue(i));
    };
  }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
  public void run() {
    FizzRunner.main(null);
  }
}

**************************************
FizzBuzzer.java
**************************************
public class FizzBuzzer {

  public String getValue(int number) {
    boolean three = number % 3 == 0;
    boolean five = number % 5 == 0;
    if (three & five) {
      return "FizzBuzz";
    } else if (three) {
      return "Fizz";
    } else if (five) {
      return "Buzz";
    } else {
      return Integer.toString(number);
    }
  }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 24EC167C0A moose
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void isDivisibleByThree() {
        int number = 6;
        assertTrue(number % 3 == 0);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {

    @Test
    public void isDivisibleByThree() {
        int number = 6;
        assertTrue(number % 3 == 0);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 2491821220 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeNumberPrinter.java
**************************************
import java.util.List;
import java.util.ArrayList;

public class PrimeNumberPrinter {
    
    public static List<Integer> findPrimes() {
        List<Integer> numbers = new ArrayList<Integer>();
        for (int i=2; i<=100; i++) {
            numbers.add(i);
        }
        int divisor = 2;
        numbers.remove(4);
            for (int index = divisor+1; index<=numbers.size(); index++) {
                if (numbers.get(index)%divisor == 0) {
                    numbers.remove(index);
                }
            }
        return numbers;
    }
}

**************************************
PrimeNumberPrinterTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PrimeNumberPrinterTest {
    
    @Test
    public void isTwoPresentAsFirstElementTest() {
        int expected = 2;
        int actual = PrimeNumberPrinter.findPrimes().get(0);
        assertEquals(expected, actual);
    }

    @Test
    public void fourNotPresentTest() {
        System.out.println(PrimeNumberPrinter.findPrimes().get(2));
        assertFalse(PrimeNumberPrinter.findPrimes().contains(4));
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
PrimeNumberPrinter.java
**************************************
import java.util.List;
import java.util.ArrayList;

public class PrimeNumberPrinter {
    
    public static List<Integer> findPrimes() {
        List<Integer> numbers = new ArrayList<Integer>();
        for (int i=2; i<=100; i++) {
            numbers.add(i);
        }
        int divisor = 2;
        numbers.remove(4);
            for (int index = divisor+1; index<=numbers.size(); index++) {
                if (numbers.get(index)%divisor == 0) {
                    numbers.remove(index);
                }
            }
        return numbers;
    }
}

**************************************
PrimeNumberPrinterTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PrimeNumberPrinterTest {
    
    @Test
    public void isTwoPresentAsFirstElementTest() {
        int expected = 2;
        int actual = PrimeNumberPrinter.findPrimes().get(0);
        assertEquals(expected, actual);
    }

    @Test
    public void fourNotPresentTest() {
        System.out.println(PrimeNumberPrinter.findPrimes().get(2));
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 230AA7B238 alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************


import java.util.GregorianCalendar;
import java.text.MessageFormat;
 
public class Leapyear {
        public static void main(String[] argv) {
                int[] yrs = {1800,1900,1994,1998,1999,2000,2001,2004,2100};
                GregorianCalendar cal = new GregorianCalendar();
                for (int year : yrs) {
                        System.err.println(MessageFormat.format("The year {0,number,#} is leaper: {1} / {2}.", year, cal.isLeapYear(year), is_leapyear(year)));
                }
 
        }
        public static boolean is_leapyear(int year) {
                return (year % 100 == 0) ? (year % 400 == 0) : (year % 4 == 0);
        }
}
 

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
@Author(
   name = "Benjamin Franklin",
   date = "3/27/2003"
)
class MyClass() { ... }
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************



**************************************
UntitledTest.java
**************************************




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 223B773777 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
LeapYearCheckerTests.java
**************************************
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class LeapYearCheckerTests {
        @Test
	public void isLeapYearForTypicalCommonYearReturnsFalse() {
		LeapYearChecker checker = new LeapYearChecker();
		
		boolean result = checker.isLeapYear(2001);
		assertEquals(false, result);
	}
}

**************************************
LeapYearChecker.java
**************************************
public class LeapYearChecker {

	public boolean isLeapYear(int year) {
		return year % 4 == 0;
	}
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
LeapYearCheckerTests.java
**************************************
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class LeapYearCheckerTests {
        @Test
	public void isLeapYearForTypicalCommonYearReturnsFalse() {
		LeapYearChecker checker = new LeapYearChecker();
		
		boolean result = checker.isLeapYear(2001);
		assertEquals(false, result);
	}
}

**************************************
LeapYearChecker.java
**************************************
public class LeapYearChecker {

	public boolean isLeapYear(int year) {
		return year % 4 == 0;
	}
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1FF3BDB6BB gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
SettingHours.java
**************************************
public class SettingHours implements ClockMode {
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    
    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
}

**************************************
Clock.java
**************************************
public class Clock {
    
    public Clock() {
        this.hours = 12;
        this.minutes = 0;
        this.mode = new SettingHours();
    }
    public int getHours() {
        return hours;
    }
    public void setHours(int newHours) {
        this.hours = newHours;
    }
    public int getMinutes() {
        return minutes;
    }
    public void setMinutes(int newMinutes) {    
        this.minutes = newMinutes;
    }
    public void increment() {
        mode.increment(this);
    }
    public void changeMode() {
        mode.changeMode(this);
    }
    public void setMode(ClockMode newMode) {
        this.mode = newMode;
    }
    public int returnTime() {
        return hours;
    }


    private int hours, minutes;
    private ClockMode mode;
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
    void increment(Clock context);
    void changeMode(Clock context);
    //cancel();
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
public class ClockTest {
    @Test
    public void initial_time_is_midday() {
        Clock target = new Clock();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes());
    }
    @Test
    public void in_setting_hours_mode_increment_bumps_up_hours_by_one() {
        Clock target = new Clock();
        target.increment();
        assertEquals(13, target.getHours());
        assertEquals(0, target.getMinutes());        
    }
    @Test
    public void in_setting_minutes_mode_increment_bumps_up_minutes_by_one() {
        Clock target = new Clock();
        target.changeMode();
        target.increment();
        assertEquals(12, target.getHours());
        assertEquals(1, target.getMinutes());        
    }
   @Test
    public void in_display_current_time() {
        Clock target = new Clock();
        target.changeMode();
        assertEquals(12, target.getHours());
        assertEquals(1, target.getMinutes()); 
        //assertEquals(12, target.returnTime());

       
    }
}

**************************************
SettingMinutes.java
**************************************
public class SettingMinutes implements ClockMode {
    public void increment(Clock context) {
        context.setMinutes(context.getMinutes() + 1);
    }
    public void changeMode(Clock context) {
    }
}

**************************************
DisplayTime.java
**************************************
public class DisplayTime implements ClockMode {
    public int returnTime(Clock context) {
        return context.getHours();
    }    
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    

    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
SettingHours.java
**************************************
public class SettingHours implements ClockMode {
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    
    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
}

**************************************
Clock.java
**************************************
public class Clock {
    
    public Clock() {
        this.hours = 12;
        this.minutes = 0;
        this.mode = new SettingHours();
    }
    public int getHours() {
        return hours;
    }
    public void setHours(int newHours) {
        this.hours = newHours;
    }
    public int getMinutes() {
        return minutes;
    }
    public void setMinutes(int newMinutes) {    
        this.minutes = newMinutes;
    }
    public void increment() {
        mode.increment(this);
    }
    public void changeMode() {
        mode.changeMode(this);
    }
    public void setMode(ClockMode newMode) {
        this.mode = newMode;
    }
    public int returnTime() {
        return hours;
    }


    private int hours, minutes;
    private ClockMode mode;
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
    void increment(Clock context);
    void changeMode(Clock context);
    //cancel();
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
public class ClockTest {
    @Test
    public void initial_time_is_midday() {
        Clock target = new Clock();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes());
    }
    @Test
    public void in_setting_hours_mode_increment_bumps_up_hours_by_one() {
        Clock target = new Clock();
        target.increment();
        assertEquals(13, target.getHours());
        assertEquals(0, target.getMinutes());        
    }
    @Test
    public void in_setting_minutes_mode_increment_bumps_up_minutes_by_one() {
        Clock target = new Clock();
        target.changeMode();
        target.increment();
        assertEquals(12, target.getHours());
        assertEquals(1, target.getMinutes());        
    }
   @Test
    public void in_display_current_time() {
        Clock target = new Clock();
        target.changeMode();
        assertEquals(12, target.getHours());
        //assertEquals(1, target.getMinutes()); 
        //assertEquals(12, target.returnTime());

       
    }
}

**************************************
SettingMinutes.java
**************************************
public class SettingMinutes implements ClockMode {
    public void increment(Clock context) {
        context.setMinutes(context.getMinutes() + 1);
    }
    public void changeMode(Clock context) {
    }
}

**************************************
DisplayTime.java
**************************************
public class DisplayTime implements ClockMode {
    public int returnTime(Clock context) {
        return context.getHours();
    }    
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    

    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1FF3BDB6BB gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 39
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
SettingHours.java
**************************************
public class SettingHours implements ClockMode {
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    
    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}

**************************************
Clock.java
**************************************
public class Clock {
    
    public Clock() {
        this.hours = 12;
        this.minutes = 0;
        this.mode = new SettingHours();
    }
    public int getHours() {
        return hours;
    }
    public void setHours(int newHours) {
        this.hours = newHours;
    }
    public int getMinutes() {
        return minutes;
    }
    public void setMinutes(int newMinutes) {    
        this.minutes = newMinutes;
    }
    public void increment() {
        mode.increment(this);
    }
    public void changeMode() {
        mode.changeMode(this);
    }
    public void setMode(ClockMode newMode) {
        this.mode = newMode;
    }
    public String returnTime() {
        String cur_time = hours + ":" + minutes;
        return cur_time; 
    }
    public void cancel() {
        mode.cancel(this);
    }

    private int hours, minutes;
    private ClockMode mode;
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
    void increment(Clock context);
    void changeMode(Clock context);
    void cancel(Clock context);
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
public class ClockTest {
    @Test
    public void initial_time_is_midday() {
        Clock target = new Clock();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes());
    }
    @Test
    public void in_setting_hours_mode_increment_bumps_up_hours_by_one() {
        Clock target = new Clock();
        target.increment();
        assertEquals(13, target.getHours());
        assertEquals(0, target.getMinutes());        
    }
    @Test
    public void in_setting_minutes_mode_increment_bumps_up_minutes_by_one() {
        Clock target = new Clock();
        target.changeMode();
        target.increment();
        assertEquals(12, target.getHours());
        assertEquals(1, target.getMinutes());        
    }
   @Test
    public void in_display_current_time() {
        Clock target = new Clock();
        target.changeMode();
        target.changeMode();

        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes()); 
        assertEquals("12:0", target.returnTime());
        System.out.println(target.returnTime());       
    }
@Test
    public void in_display_current_time() {
        Clock target = new Clock();
        target.changeMode();
        target.changeMode();

        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes()); 
        assertEquals("12:0", target.returnTime());
        System.out.println(target.returnTime());       
    }

@Test
    public void in_test_cancel() {
        Clock target = new Clock();
        target.changeMode();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes()); 
        target.cancel();
        assertEquals("12:0", target.returnTime());


    }
}

**************************************
SettingMinutes.java
**************************************
public class SettingMinutes implements ClockMode {
    public void increment(Clock context) {
        context.setMinutes(context.getMinutes() + 1);
    }
    public void changeMode(Clock context) {
        context.setMode(new DisplayTime());
    }
    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}

**************************************
DisplayTime.java
**************************************
public class DisplayTime implements ClockMode {   
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    

    public void changeMode(Clock context) {
        context.setMode(new SettingHours());
    }

    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 39
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
SettingHours.java
**************************************
public class SettingHours implements ClockMode {
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    
    public void changeMode(Clock context) {
        context.setMode(new SettingMinutes());
    }
    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}

**************************************
Clock.java
**************************************
public class Clock {
    
    public Clock() {
        this.hours = 12;
        this.minutes = 0;
        this.mode = new SettingHours();
    }
    public int getHours() {
        return hours;
    }
    public void setHours(int newHours) {
        this.hours = newHours;
    }
    public int getMinutes() {
        return minutes;
    }
    public void setMinutes(int newMinutes) {    
        this.minutes = newMinutes;
    }
    public void increment() {
        mode.increment(this);
    }
    public void changeMode() {
        mode.changeMode(this);
    }
    public void setMode(ClockMode newMode) {
        this.mode = newMode;
    }
    public String returnTime() {
        String cur_time = hours + ":" + minutes;
        return cur_time; 
    }
    public void cancel() {
        mode.cancel(this);
    }

    private int hours, minutes;
    private ClockMode mode;
}

**************************************
ClockMode.java
**************************************
public interface ClockMode {
    void increment(Clock context);
    void changeMode(Clock context);
    void cancel(Clock context);
}

**************************************
ClockTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
public class ClockTest {
    @Test
    public void initial_time_is_midday() {
        Clock target = new Clock();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes());
    }
    @Test
    public void in_setting_hours_mode_increment_bumps_up_hours_by_one() {
        Clock target = new Clock();
        target.increment();
        assertEquals(13, target.getHours());
        assertEquals(0, target.getMinutes());        
    }
    @Test
    public void in_setting_minutes_mode_increment_bumps_up_minutes_by_one() {
        Clock target = new Clock();
        target.changeMode();
        target.increment();
        assertEquals(12, target.getHours());
        assertEquals(1, target.getMinutes());        
    }
   @Test
    public void in_display_current_time() {
        Clock target = new Clock();
        target.changeMode();
        target.changeMode();

        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes()); 
        assertEquals("12:0", target.returnTime());
        System.out.println(target.returnTime());       
    }

@Test
    public void in_test_cancel() {
        Clock target = new Clock();
        target.changeMode();
        assertEquals(12, target.getHours());
        assertEquals(0, target.getMinutes()); 
        target.cancel();
        assertEquals("12:0", target.returnTime());


    }
}

**************************************
SettingMinutes.java
**************************************
public class SettingMinutes implements ClockMode {
    public void increment(Clock context) {
        context.setMinutes(context.getMinutes() + 1);
    }
    public void changeMode(Clock context) {
        context.setMode(new DisplayTime());
    }
    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}

**************************************
DisplayTime.java
**************************************
public class DisplayTime implements ClockMode {   
    public void increment(Clock context) {
        context.setHours(context.getHours() + 1);
    }    

    public void changeMode(Clock context) {
        context.setMode(new SettingHours());
    }

    public void cancel(Clock context) {
        context.setMode(new DisplayTime());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1ECFF98539 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

**************************************
ISBN.java
**************************************
public class ISBN {

    String isbn;

    public ISBN(String value){
    this.isbn = value.replace("-", "");        
}
 
}


**************************************
ISBNtest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNtest {

    @Test
    public void testHyphensOk(){

       ISBN hasHyphens = new ISBN("978-0-471-48648-0");
       assertEquals(hasHyphens.isbn, "9780471486480");
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ISBN.java
**************************************
public class ISBN {

    String isbn;

    public ISBN(String value){
    this.isbn = value.replace("-", "");        
}
 
}


**************************************
ISBNtest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNtest {

    @Test
    public void testHyphensOk(){

       ISBN hasHyphens = new ISBN("978-0-471-48648-0");
       assertEquals(hasHyphens.isbn, "9780471486480");
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1ECFF98539 hippo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 43
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ISBN.java
**************************************
public class ISBN {

    public String isbn;

    public ISBN(String value){
        this.isbn = value.replace("-", "");
        this.isbn = this.isbn.replace(" ", "");       
    }

    public boolean isValid()
    {
        return this.isValid(this.isbn);
     }

    public boolean isValid(String isbnInput){
        this.isbn = isbnInput.replace("-", "");
        this.isbn = this.isbn.replace(" ", "");
        return (this.isbn.length() == 13 && this.isNumber(isbn));
    }    

    public boolean isNumber(String str) {
        return str.matches("[0123456789]*[Xx]$");
    }
}


**************************************
ISBNTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNTest {

    @Test
    public void testHyphensOk(){

       ISBN hasHyphens = new ISBN("978-0-471-48648-0");
       assertEquals(hasHyphens.isbn, "9780471486480");
    }
    
    @Test
    public void testSpacesOk(){

       ISBN isbn = new ISBN("978 0 471 48648 0");
       assertEquals(isbn.isbn, "9780471486480");
    }
    
    @Test
    public void testShortValidFalse(){

       ISBN isbn = new ISBN("978 0 471 48");
       assertFalse(isbn.isValid());
    }

    @Test
    public void testShortValidFalseWithInput()
    {
       ISBN isbn = new ISBN("978047148");
       assertFalse(isbn.isValid("978047148"));
    }

    @Test
    public void testValidTrue(){

       ISBN isbn = new ISBN("978 0 471 48648 0");
       assertTrue(isbn.isValid());
    }

    @Test
    public void testAllAreDigits(){

       ISBN isbn = new ISBN("9ji 0 471 48648 0");
       assertFalse(isbn.isValid());
    }
    
    @Test
    public void testWithCheckDigitX(){

       ISBN isbn = new ISBN("912 0 471 48648 X");
       assertTrue(isbn.isValid());
    }

    @Test
    public void testWithCheckDigitXInWrongPlace(){

       ISBN isbn = new ISBN("912 0 471 X8648 X");
       assertFalse(isbn.isValid());
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 43
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
ISBN.java
**************************************
public class ISBN {

    public String isbn;

    public ISBN(String value){
        this.isbn = value.replace("-", "");
        this.isbn = this.isbn.replace(" ", "");       
    }

    public boolean isValid()
    {
        return this.isValid(this.isbn);
     }

    public boolean isValid(String isbnInput){
        this.isbn = isbnInput.replace("-", "");
        this.isbn = this.isbn.replace(" ", "");
        return (this.isbn.length() == 13 && this.isNumber(isbn));
    }    

    public boolean isNumber(String str) {
        return str.matches("[0123456789]*[Xx]$");
    }
}


**************************************
ISBNTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class ISBNTest {

    @Test
    public void testHyphensOk(){

       ISBN hasHyphens = new ISBN("978-0-471-48648-0");
       assertEquals(hasHyphens.isbn, "9780471486480");
    }
    
    @Test
    public void testSpacesOk(){

       ISBN isbn = new ISBN("978 0 471 48648 0");
       assertEquals(isbn.isbn, "9780471486480");
    }
    
    @Test
    public void testShortValidFalse(){

       ISBN isbn = new ISBN("978 0 471 48");
       assertFalse(isbn.isValid());
    }

    @Test
    public void testShortValidFalseWithInput()
    {
       ISBN isbn = new ISBN("978047148");
       assertFalse(isbn.isValid("978047148"));
    }

    @Test
    public void testAllAreDigits(){

       ISBN isbn = new ISBN("9ji 0 471 48648 0");
       assertFalse(isbn.isValid());
    }
    
    @Test
    public void testWithCheckDigitX(){

       ISBN isbn = new ISBN("912 0 471 48648 X");
       assertTrue(isbn.isValid());
    }

    @Test
    public void testWithCheckDigitXInWrongPlace(){

       ISBN isbn = new ISBN("912 0 471 X8648 X");
       assertFalse(isbn.isValid());
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1D2AD58E60 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Timeline.java
**************************************
import java.util.List;


public class Timeline{

    public class Post{
        String text;
        int time;
    }


    List<Post> posts = new ArrayList<Post>();
    String nev;

    public Timeline(String nev){
        this.nev = nev;
    }

    public void Post(String p){

    }

    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        Timeline u1 = new Timeline("Alice");
        u1.Post("jo reggelt");
        u1.Post("reggeliztem");
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);

        Timeline u2 = new Timeline("Bob");
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Timeline.java
**************************************
import java.util.*;

public class Timeline{

    public class Post{
        String text;
        int time;
    }


    List<Post> posts = new ArrayList<Post>();
    String nev;

    public Timeline(String nev){
        this.nev = nev;
    }

    public void Post(String p){

    }

    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        Timeline u1 = new Timeline("Alice");
        u1.Post("jo reggelt");
        u1.Post("reggeliztem");
/*
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
*/
        Timeline u2 = new Timeline("Bob");
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1CBB2470D8 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 1;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
    @Test 
    public void test_1() {
        int actual = Untitled.answer();
        assertEquals(1, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 1;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test 
    public void test_1() {
        int actual = Untitled.answer();
        assertEquals(1, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1C743C4F38 zebra
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int howManyWaysOfGivingChange(int change) {
        if (change<5) {
            return 1;
        }
        else {
            return 1 + howManyWaysOfGivingChange(change-5);
        }    
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void changeFor1cent() {
        assertEquals(1, Untitled.howManyWaysOfGivingChange(1));
    }

    @Test
    public void changeFor5cent() {
        assertEquals(2, Untitled.howManyWaysOfGivingChange(5));
    }

    @Test
    public void changeFor10cent() {
        // 1 dime, 1 nick + 5cents, 10cents
        assertEquals(3, Untitled.howManyWaysOfGivingChange(10));
    }

    @Test
    public void changeFor11cent() {
        // 1 dime + 1cent, 1 nick + 6cents, 2nick + 1, 11cents
        assertEquals(4, Untitled.howManyWaysOfGivingChange(11));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int howManyWaysOfGivingChange(int change) {
        return change/10 + change/5 + 1;    
    }

}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void changeFor1cent() {
        assertEquals(1, Untitled.howManyWaysOfGivingChange(1));
    }

    @Test
    public void changeFor5cent() {
        assertEquals(2, Untitled.howManyWaysOfGivingChange(5));
    }

    @Test
    public void changeFor10cent() {
        // 1 dime, 1 nick + 5cents, 2 nick, 10cents
        assertEquals(4, Untitled.howManyWaysOfGivingChange(10));
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1C239FBEB7 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Anagrams.java
**************************************
import java.lang.Object;
public class Anagrams {
    
    public static String[] result(String i) {
        String[] retu;
retu=new String[]{"a"};

        return retu;
    }
}

**************************************
AnagramsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramsTest {
    
    @Test
    public void should_return_a_for_a() {
        String[] expect=new String[]{"a"};    
        assertEquals(expect, Anagrams.result("a"));
    }

    @Test
    public void should_return_ab_for_ba() {
        String[] expect=new String[]{"ab","ba"};    
        assertEquals(expect, Anagrams.result("ab"));
    }
}

//for "a",return "a"
//for "ab",return "ab","ba"
//for "abc",return "cab","acb","abc","cba","bca","bac"
//in general,the new character is added near a character of the previous result
//what about a string with the same lettres?

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 32
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Anagrams.java
**************************************
import java.lang.Object;
public class Anagrams {
    
    public static String[] result(String i) {
        String[] retu;
retu=new String[]{"a"};

        return retu;
    }
}

**************************************
AnagramsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramsTest {
    
    @Test
    public void should_return_a_for_a() {
        String[] expect=new String[]{"a"};    
        assertEquals(expect, Anagrams.result("a"));
    }


}

//for "a",return "a"
//for "ab",return "ab","ba"
//for "abc",return "cab","acb","abc","cba","bca","bac"
//in general,the new character is added near a character of the previous result
//what about a string with the same lettres?



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1C239FBEB7 gorilla
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 81
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Anagrams.java
**************************************
import java.lang.Object;
import java.util.*;

public class Anagrams {
    
    public static String[] result(String i) {

        int a;
        int count=0;
        int number=1;
        for(int j=i.length();j>0;j--) number=j*number;
        String[] resu=new String[number];
        String[] tem=new String[]{};
        String temp;

        if(i.length()>1) 
        {    
            char c=i.charAt(i.length()-1);
            i = i.substring(0,i.length()-1);
            tem=result(i);
            for(String element:tem)
            {
                for(a=0;a<i.length()+1;a++)
                {
                    temp=element.substring(0, a) + c + element.substring(a, i.length());
                    resu[count]=temp;
                    count++;
                }
            }
        } 
        else resu[0]=i;

//        TreeSet<String> tr = new TreeSet<String>();
//        for(int j=0;j<resu.length;j++) tr.add(resu[j]);
//        String[] resul= new String[tr.size()];
//        for(int j=0;j<resul.length;j++) resul[j]=tr.pollFirst();


        return resu ;

    }
}

**************************************
AnagramsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramsTest {
    
    @Test
    public void should_return_a_for_a() {
        String[] expect=new String[]{"a"};    
        assertEquals(expect, Anagrams.result("a"));
    }

    @Test
    public void should_return_ab_for_ba() {
        String[] expect=new String[]{"ab","ba"};    
        assertEquals(expect, Anagrams.result("ab"));
    }

    @Test
    public void should_return_abc_for_cba() {
        String[] expect=new String[]{"abc","acb","bac","bca","cab","cba"};    
        assertEquals(expect, Anagrams.result("abc"));
    }

    @Test
    public void should_return_aaa_for_aaa() {
        String[] expect=new String[]{"aaa","aaa","aaa","aaa","aaa","aaa"}; 
        assertEquals(expect, Anagrams.result("aaa")); 

    }

}

//for "a",return "a"
//for "ab",return "ab","ba"
//for "abc",return "cab","acb","abc","cba","bca","bac"
//in general,the new character is added near a character of the previous result
//what about a string with the same lettres?

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 81
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Anagrams.java
**************************************
import java.lang.Object;
import java.util.*;

public class Anagrams {
    
    public static String[] result(String i) {

        int a;
        int count=0;
        int number=1;
        for(int j=i.length();j>0;j--) number=j*number;
        String[] resu=new String[number];
        String[] tem=new String[]{};
        String temp;

        if(i.length()>1) 
        {    
            char c=i.charAt(i.length()-1);
            i = i.substring(0,i.length()-1);
            tem=result(i);
            for(String element:tem)
            {
                for(a=0;a<i.length()+1;a++)
                {
                    temp=element.substring(0, a) + c + element.substring(a, i.length());
                    resu[count]=temp;
                    count++;
                }
            }
        } 
        else resu[0]=i;

//        TreeSet<String> tr = new TreeSet<String>();
//        for(int j=0;j<resu.length;j++) tr.add(resu[j]);
//        String[] resul= new String[tr.size()];
//        for(int j=0;j<resul.length;j++) resul[j]=tr.pollFirst();


        return resu ;

    }
}

**************************************
AnagramsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramsTest {
    
    @Test
    public void should_return_a_for_a() {
        String[] expect=new String[]{"a"};    
        assertEquals(expect, Anagrams.result("a"));
    }


    @Test
    public void should_return_aaa_for_aaa() {
        String[] expect=new String[]{"aaa","aaa","aaa","aaa","aaa","aaa"}; 
        assertEquals(expect, Anagrams.result("aaa")); 

    }

}

//for "a",return "a"
//for "ab",return "ab","ba"
//for "abc",return "cab","acb","abc","cba","bca","bac"
//in general,the new character is added near a character of the previous result
//what about a string with the same lettres?



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1B53018BDA snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 57
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {

    boolean status = false;

    public Door () {
    
    }

    public Door (boolean status) {
        this.status = status;
    }

    public boolean isOpened() {
        return status;
    }

    public void toggle() {
        status = ! status;
    }

    public String toString() {
        return (status)? "Opened":"Closed";
    }

}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void testInitialDoorIsNotOpened() {
        Door door = new Door();
        assertFalse(door.isOpened());
    }

    @Test
    public void testInitialWithTrueShouldBeOpenedDoor() {
        Door door = new Door(true);
        assertTrue(door.isOpened());
    }

    
    @Test
    public void testToggleTheDoorShouldBeChangeClosedToOpened() {
        Door door = new Door();
        door.toggle();
        assertTrue(door.isOpened());
    }
    
    @Test
    public void testToggleTheDoorShouldBeChangeOpenedToClosed() {
        Door door = new Door(true);
        door.toggle();
        assertFalse(door.isOpened());
    }

    @Test
    public void testClosedDoorShouldBeReturnClosedAtToString () {
        Door door = new Door();
        assertEquals("Closed", door.toString());
    }

    @Test
    public void testOpenedDoorShouldBeReturnOpenedAtToString () {
        Door door = new Door(true);
        assertEquals("Opened", door.toString());
    }

}

**************************************
DoorVisitorTest.java
**************************************
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;


import static org.junit.Assert.assertEquals;

public class DoorVisitorTest {
    
    @Test
    public void testVisit1DoorWillToggleToOpened () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door());
        visitor.visit(doorList, 1);
        assertEquals("[Opened]", doorList.toString());

    }

    @Test
    public void testVisit3DoorWillToggleToOpened () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door());
        doorList.add(new Door());
        doorList.add(new Door());
        visitor.visit(doorList, 1);
        assertEquals("[Opened, Opened, Opened]", doorList.toString());

    }

    @Test
    public void testVisitOpenedClosedOpenedWillToggleToClosedOpenedClosed () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        doorList.add(new Door());
        doorList.add(new Door(true));
        visitor.visit(doorList, 1);
        assertEquals("[Closed, Opened, Closed]", doorList.toString());

    }

    @Test
    public void testVisit1DoorBy2WillNothingChange () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        visitor.visit(doorList, 2);
        assertEquals("[Opened]", doorList.toString());

    }

    @Test
    public void testVisit4DoorBy2WillChangeOnlySecondAndForthDoor () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        doorList.add(new Door(true));
        doorList.add(new Door(true));
        doorList.add(new Door(true));
        visitor.visit(doorList, 2);
        assertEquals("[Opened, Closed, Opened, Closed]", doorList.toString());

    }





}

**************************************
DoorVisitor.java
**************************************
import java.util.List;

public class DoorVisitor {

    public void visit(List<Door> doorList, int visitBy){
        int doorIndex = 1;
        for(Door door: doorList) {
            if(doorIndex % visitBy == 0) 
                door.toggle();
            doorIndex++;
        }

    }

}

**************************************
OneHundredDoorSolutionTest.java
**************************************
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class OneHundredDoorSolutionTest {

    @Test
    public void test100LoopVisitDoor () {
        List<Door> oneHundredrDoor = generateDoorList(100);
        DoorVisitor visitor = new DoorVisitor();

        for(int doorIndex=1; doorIndex <= 100; doorIndex++){
            visitor.visit(oneHundredrDoor, doorIndex);
        }

        int loop = 1;

        for (Door door : oneHundredrDoor) {
            if (Math.sqrt(loop) == Math.ceil(Math.sqrt(loop)))
                assertTrue(door.isOpened());
            loop++;
        }

        assertEquals("dsdada", oneHundredrDoor);
    }
    
    private List<Door> generateDoorList(int number) {
        List<Door> doorList = new ArrayList<Door>(); 
        for(int i=1; i <= number; i++){
            doorList.add(new Door());
        }
        return doorList;
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 57
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {

    boolean status = false;

    public Door () {
    
    }

    public Door (boolean status) {
        this.status = status;
    }

    public boolean isOpened() {
        return status;
    }

    public void toggle() {
        status = ! status;
    }

    public String toString() {
        return (status)? "Opened":"Closed";
    }

}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void testInitialDoorIsNotOpened() {
        Door door = new Door();
        assertFalse(door.isOpened());
    }

    @Test
    public void testInitialWithTrueShouldBeOpenedDoor() {
        Door door = new Door(true);
        assertTrue(door.isOpened());
    }

    
    @Test
    public void testToggleTheDoorShouldBeChangeClosedToOpened() {
        Door door = new Door();
        door.toggle();
        assertTrue(door.isOpened());
    }
    
    @Test
    public void testToggleTheDoorShouldBeChangeOpenedToClosed() {
        Door door = new Door(true);
        door.toggle();
        assertFalse(door.isOpened());
    }

    @Test
    public void testClosedDoorShouldBeReturnClosedAtToString () {
        Door door = new Door();
        assertEquals("Closed", door.toString());
    }

    @Test
    public void testOpenedDoorShouldBeReturnOpenedAtToString () {
        Door door = new Door(true);
        assertEquals("Opened", door.toString());
    }

}

**************************************
DoorVisitorTest.java
**************************************
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;


import static org.junit.Assert.assertEquals;

public class DoorVisitorTest {
    
    @Test
    public void testVisit1DoorWillToggleToOpened () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door());
        visitor.visit(doorList, 1);
        assertEquals("[Opened]", doorList.toString());

    }

    @Test
    public void testVisit3DoorWillToggleToOpened () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door());
        doorList.add(new Door());
        doorList.add(new Door());
        visitor.visit(doorList, 1);
        assertEquals("[Opened, Opened, Opened]", doorList.toString());

    }

    @Test
    public void testVisitOpenedClosedOpenedWillToggleToClosedOpenedClosed () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        doorList.add(new Door());
        doorList.add(new Door(true));
        visitor.visit(doorList, 1);
        assertEquals("[Closed, Opened, Closed]", doorList.toString());

    }

    @Test
    public void testVisit1DoorBy2WillNothingChange () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        visitor.visit(doorList, 2);
        assertEquals("[Opened]", doorList.toString());

    }

    @Test
    public void testVisit4DoorBy2WillChangeOnlySecondAndForthDoor () {
        List<Door> doorList = new ArrayList<Door>();
        DoorVisitor visitor = new DoorVisitor();

        doorList.add(new Door(true));
        doorList.add(new Door(true));
        doorList.add(new Door(true));
        doorList.add(new Door(true));
        visitor.visit(doorList, 2);
        assertEquals("[Opened, Closed, Opened, Closed]", doorList.toString());

    }





}

**************************************
DoorVisitor.java
**************************************
import java.util.List;

public class DoorVisitor {

    public void visit(List<Door> doorList, int visitBy){
        int doorIndex = 1;
        for(Door door: doorList) {
            if(doorIndex % visitBy == 0) 
                door.toggle();
            doorIndex++;
        }

    }

}

**************************************
OneHundredDoorSolutionTest.java
**************************************
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class OneHundredDoorSolutionTest {

    @Test
    public void test100LoopVisitDoor () {
        List<Door> oneHundredrDoor = generateDoorList(100);
        DoorVisitor visitor = new DoorVisitor();

        for(int doorIndex=1; doorIndex <= 100; doorIndex++){
            visitor.visit(oneHundredrDoor, doorIndex);
        }

        int loop = 1;

        for (Door door : oneHundredrDoor) {
            if (Math.sqrt(loop) == Math.ceil(Math.sqrt(loop)))
                assertTrue(door.isOpened());
            loop++;
        }
    }
    
    private List<Door> generateDoorList(int number) {
        List<Door> doorList = new ArrayList<Door>(); 
        for(int i=1; i <= number; i++){
            doorList.add(new Door());
        }
        return doorList;
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1A28D10ECB snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.List;
import java.util.ArrayList;


public class RecentlyUsedList {

    private List<String> items;    

    public RecentlyUsedList(){
        items = new ArrayList<String>();
    }

    public int getCapacity(){

        return items.size();
    }

    public void addItem(String item){
        items.add(0,item);
    }

    public String getItem(){
        return items.remove(0);
    }

    public String getItemByIndex(int index){
        return items.get(index);
    }
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;

public class RecentlyUsedListTest {
    
    //First test check Recently Used List is Empty at creation

    @Test
    public void recently_used_list_is_empty_on_creation() {
       //given
        RecentlyUsedList newList = new RecentlyUsedList();
        //when
        int actualCapacity = newList.getCapacity();
        //then
        assertEquals(0,actualCapacity);
    }

    @Test
    public void recently_used_list_returns_by_lifo_order_for_3_items(){

        //given
        String firstItem = "first";
        String secondItem = "second";
        String thirdItem = "third";
        RecentlyUsedList threeItemList = new RecentlyUsedList();

        //when
        threeItemList.addItem(firstItem);
         threeItemList.addItem(secondItem);
         threeItemList.addItem(thirdItem);

        //then
        assertEquals(3,threeItemList.getCapacity());
        assertEquals(thirdItem,threeItemList.getItem());

        assertEquals(firstItem,threeItemList.getItemByIndex(0));

    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
RecentlyUsedList.java
**************************************
import java.util.List;
import java.util.ArrayList;


public class RecentlyUsedList {

    private List<String> items;    

    public RecentlyUsedList(){
        items = new ArrayList<String>();
    }

    public int getCapacity(){

        return items.size();
    }

    public void addItem(String item){
        items.add(0,item);
    }

    public String getItem(){
        return items.remove(0);
    }

    public String getItemByIndex(int index){
        return items.get(index);
    }
}

**************************************
RecentlyUsedListTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.List;
import java.util.ArrayList;

public class RecentlyUsedListTest {
    
    //First test check Recently Used List is Empty at creation

    @Test
    public void recently_used_list_is_empty_on_creation() {
       //given
        RecentlyUsedList newList = new RecentlyUsedList();
        //when
        int actualCapacity = newList.getCapacity();
        //then
        assertEquals(0,actualCapacity);
    }

    @Test
    public void recently_used_list_returns_by_lifo_order_for_3_items(){

        //given
        String firstItem = "first";
        String secondItem = "second";
        String thirdItem = "third";
        RecentlyUsedList threeItemList = new RecentlyUsedList();

        //when
        threeItemList.addItem(firstItem);
         threeItemList.addItem(secondItem);
         threeItemList.addItem(thirdItem);

        //then
        assertEquals(3,threeItemList.getCapacity());
        assertEquals(thirdItem,threeItemList.getItem());

    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 1754A77B3C buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Doors.java
**************************************
import java.util.Random;

public class Doors {
    boolean[] doors;
    
    public void init(){
    int size = 100;
    doors = new boolean[size];
    
    Random random = new Random();
    for (int i=0; i<size; i++){
        doors[i]= random.nextBoolean();
    }    

    }    

    public String someOutput(){
        return "test";
    }
}

**************************************
DoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorsTest{
    @Test
    public void testoutput(){
    Doors doors = new Doors();

    String s = doors.someOutput();

    assertEquals("test", s);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Doors.java
**************************************
import java.util.Random;

public class Doors {
    boolean[] doors;
    
    public void init(){
    int size = 100;
    doors = new boolean[size];
    
    Random random = new Random();
    for (int i=0; i<size; i++){
        doors[i]= random.nextBoolean();
    }    

    }    

    public String someOutput(){
        return "test";
    }
}

**************************************
DoorsTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorsTest{
    @Test
    public void testoutput(){
    Doors doors = new Doors();

    String s = doors.someOutput();

    assertEquals("test", s);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 12E1BBC037 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String returnString(int number) {
        if (FizzBuzz.isMultipleOfThree(number) && FizzBuzz.isMultipleOfFive(number)) {
            return "FizzBuzz";
        }
        if (number == 1) {
            return "1";
        } else if (number == 2) {
            return "2";
        } else if (number == 4) {
            return "4";
        } else if (number == 3) {
            return "Fizz";
        } else {
            return "Buzz";
        }
    }

    public static boolean isMultipleOfThree(int number) {
        if (number % 3 == 0) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean isMultipleOfFive(int number) {
        if (number % 5 == 0) {
            return true;
        } else {
            return false;
        }
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void OneReturnOneString() {
        String expected = "1";
        String actual = FizzBuzz.returnString(1);
        assertEquals(expected, actual);
    }

    @Test
    public void TwoReturnTwoString() {
        String expected = "2";
        String actual = FizzBuzz.returnString(2);
        assertEquals(expected, actual);
    }

    @Test
    public void ThreeReturnFizz() {
        String expected = "Fizz";
        String actual = FizzBuzz.returnString(3);
        assertEquals(expected, actual);
    }
    
    @Test
    public void FourReturnFourString() {
        String expected = "4";
        String actual = FizzBuzz.returnString(4);
        assertEquals(expected, actual);
    }

    @Test
    public void FiveReturnBuzz() {
        String expected = "Buzz";
        String actual = FizzBuzz.returnString(5);
        assertEquals(expected, actual);
    }

    @Test 
    public void MultiplesOfThreeUntilOneHundredReturnFizz() {
        String expected = "Fizz";
        String actual = null;
        for (int i=1; i*3<=100; i++) {
            actual = FizzBuzz.returnString(i * 3);
            assertEquals(expected, actual);
        }
    }

    @Test
    public void FifteenReturnFizzBuzz() {
        String expected = "FizzBuzz";
        String actual = FizzBuzz.returnString(15);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 27
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz {
    
    public static String returnString(int number) {
        if (FizzBuzz.isMultipleOfThree(number) && FizzBuzz.isMultipleOfFive(number)) {
            return "FizzBuzz";
        }
        if (number == 1) {
            return "1";
        } else if (number == 2) {
            return "2";
        } else if (number == 4) {
            return "4";
        } else if (number == 3) {
            return "Fizz";
        } else {
            return "Buzz";
        }
    }

    public static boolean isMultipleOfThree(int number) {
        if (number % 3 == 0) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean isMultipleOfFive(int number) {
        if (number % 5 == 0) {
            return true;
        } else {
            return false;
        }
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void OneReturnOneString() {
        String expected = "1";
        String actual = FizzBuzz.returnString(1);
        assertEquals(expected, actual);
    }

    @Test
    public void TwoReturnTwoString() {
        String expected = "2";
        String actual = FizzBuzz.returnString(2);
        assertEquals(expected, actual);
    }

    @Test
    public void ThreeReturnFizz() {
        String expected = "Fizz";
        String actual = FizzBuzz.returnString(3);
        assertEquals(expected, actual);
    }
    
    @Test
    public void FourReturnFourString() {
        String expected = "4";
        String actual = FizzBuzz.returnString(4);
        assertEquals(expected, actual);
    }

    @Test
    public void FiveReturnBuzz() {
        String expected = "Buzz";
        String actual = FizzBuzz.returnString(5);
        assertEquals(expected, actual);
    }

    @Test
    public void FifteenReturnFizzBuzz() {
        String expected = "FizzBuzz";
        String actual = FizzBuzz.returnString(15);
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 104F0CB3C5 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
TennisPoints.java
**************************************

public class TennisPoints {
    
    private int score = 0;

    public void scorePoint(){
        if(score < 4)
            score += 1;
    }

    public String getScore(){
        if(score < 4)
            return String.valueOf(score);
        else 
            return "Player Won!";
    }


}

**************************************
PlayerOneTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PlayerOneTest {
    
    private PlayerOne playerOne;
    
    public PlayerOneTest (){
        playerOne = new PlayerOne();
    }

    @Test
    public void incrementScoreByOne() {
        playerOne.scorePoint();
        assertEquals(1, playerOne.getScore());
    }

    @Test
    public void playerHasWon(){
        for(int i = 0; i < 4; i++){
             playerOne.scorePoint();
        }
        assertTrue(playerOne.hasPlayerWon(2));
    }

    @Test
    public void playerHasNotWon(){
        for(int i = 0; i < 4; i++){
             playerOne.scorePoint();
        }
        assertTrue(playerOne.hasPlayerWon(3));
    }


}

**************************************
PlayerOne.java
**************************************
public class PlayerOne extends Player{
    
    public boolean hasPlayerWon(int playerScore){
        if(getScore() < playerScore-2)
            return true;
        return false;
    }
    
}

**************************************
PlayerTwo.java
**************************************
public class PlayerTwo extends Player{

    public boolean hasPlayerWon(int playerScore){
        if(getScore() >= playerScore-2)
            return true;
        return false;
    }

}

**************************************
Player.java
**************************************
public abstract class Player {
    
    private int score = 0;

    public abstract boolean hasPlayerWon(int playerScore);

    public void scorePoint(){
        score += 1;
    }

    public int getScore(){
        return score;
    }

    
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 26
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
TennisPoints.java
**************************************

public class TennisPoints {
    
    private int score = 0;

    public void scorePoint(){
        if(score < 4)
            score += 1;
    }

    public String getScore(){
        if(score < 4)
            return String.valueOf(score);
        else 
            return "Player Won!";
    }


}

**************************************
PlayerOneTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class PlayerOneTest {
    
    private PlayerOne playerOne;
    
    public PlayerOneTest (){
        playerOne = new PlayerOne();
    }

    @Test
    public void incrementScoreByOne() {
        playerOne.scorePoint();
        assertEquals(1, playerOne.getScore());
    }

    @Test
    public void playerHasWon(){
        for(int i = 0; i < 4; i++){
             playerOne.scorePoint();
        }
        assertTrue(playerOne.hasPlayerWon(2));
    }

    @Test
    public void playerHasNotWon(){
        for(int i = 0; i < 4; i++){
             playerOne.scorePoint();
        }
        //assertTrue(playerOne.hasPlayerWon(3));
    }


}

**************************************
PlayerOne.java
**************************************
public class PlayerOne extends Player{
    
    public boolean hasPlayerWon(int playerScore){
        if(getScore() >= playerScore+2)
            return true;
        return false;
    }
    
}

**************************************
PlayerTwo.java
**************************************
public class PlayerTwo extends Player{

    public boolean hasPlayerWon(int playerScore){
        if(getScore() >= playerScore-2)
            return true;
        return false;
    }

}

**************************************
Player.java
**************************************
public abstract class Player {
    
    private int score = 0;

    public abstract boolean hasPlayerWon(int playerScore);

    public void scorePoint(){
        score += 1;
    }

    public int getScore(){
        return score;
    }

    
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0FF0C2CA8A deer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Doors.java
**************************************

public class Doors {
    
    public boolean[] open() {
        boolean[] ret = new boolean[100];
        for (int i = 0; i < ret.length; i++)
        {
            ret[i] = false;
        }
        
        return ret;
    }
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void doorTest() {
        boolean[] expected = new boolean[100];
        for (int i = 0; i < expected.length; i++)
        {
            expected[i] = false;
        }
        Doors doors = new Doors();
        //boolean[] actual = doors.open();
        boolean[] actual = new boolean[100];
        for (int i = 0; i < actual.length; i++)
        {
            actual[i] = false;
        }
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Doors.java
**************************************

public class Doors {
    
    public boolean[] open() {
        boolean[] ret = new boolean[100];
        for (int i = 0; i < ret.length; i++)
        {
            ret[i] = false;
        }
        
        return ret;
    }
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void doorTest() {
        boolean[] expected = new boolean[100];
        for (int i = 0; i < expected.length; i++)
        {
            expected[i] = false;
        }
        Doors doors = new Doors();
        //boolean[] actual = doors.open();
        boolean[] actual = new boolean[100];
        for (int i = 0; i < actual.length; i++)
        {
            actual[i] = false;
        }
        //assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0FB4D00522 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.Random;

public class Untitled {
    
    static int[] dice;

    public static int[] generateRandomNums() {
        Random r = new Random();
        dice = new int[5];

        for(int i = 0; i < dice.length; i++){
            dice[i] = r.nextInt(6)+1;
        }

        return dice;
    }

    public static boolean isValidNums(){
        for(int i = 0; i < dice.length; i++){
            if(dice[i] <= 0 && dice[i] > 6){
                return false;
            }
        }
        return true;
    }    

    public static int isYahtzaa(int[] rolls){
        int rollResult = rolls[1];

        for (int i = 0 ; i < rolls.length; i++) {
            if (rolls[i] != rollResult) {
                return 0;
            }
        }
        return 50;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testIfDiceIsBetween1And6() {
        for(int i = 0; i < 100; i++){
            Untitled.generateRandomNums();
            assertTrue(Untitled.isValidNums());
        }
    }

    @Test
    public void testYahtzeeAll1(){
        int [] rolls = {1, 1, 1, 1, 1};
        int result = Untitled.isYahtzaa(rolls);
        assertEquals(50, result);
    }

    @Test
    public void testYahtzeeAll2(){
        int [] rolls = {2, 2, 2, 2, 2};
        int result = Untitled.isYahtzaa(rolls);
        assertEquals(50, result);
    }

    @Test
    public void DontJudgeMyLoop() {
for(int i = 0; i < 100; i++){
        for(int i = 0; i < 5; i++){
            int [] rolls = {i+1, i+1, i+1, i+1, i+1};
            int result = Untitled.isYahtzaa(rolls);
            assertEquals(50, result);
        }
}
    }



   
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 23
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.Random;

public class Untitled {
    
    static int[] dice;

    public static int[] generateRandomNums() {
        Random r = new Random();
        dice = new int[5];

        for(int i = 0; i < dice.length; i++){
            dice[i] = r.nextInt(6)+1;
        }

        return dice;
    }

    public static boolean isValidNums(){
        for(int i = 0; i < dice.length; i++){
            if(dice[i] <= 0 && dice[i] > 6){
                return false;
            }
        }
        return true;
    }    

    public static int isYahtzaa(int[] rolls){
        int rollResult = rolls[1];

        for (int i = 0 ; i < rolls.length; i++) {
            if (rolls[i] != rollResult) {
                return 0;
            }
        }
        return 50;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testIfDiceIsBetween1And6() {
        for(int i = 0; i < 100; i++){
            Untitled.generateRandomNums();
            assertTrue(Untitled.isValidNums());
        }
    }

    @Test
    public void testYahtzeeAll1(){
        int [] rolls = {1, 1, 1, 1, 1};
        int result = Untitled.isYahtzaa(rolls);
        assertEquals(50, result);
    }

    @Test
    public void testYahtzeeAll2(){
        int [] rolls = {2, 2, 2, 2, 2};
        int result = Untitled.isYahtzaa(rolls);
        assertEquals(50, result);
    }   
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0FB4D00522 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
YahtzeeRandomNum.java
**************************************
import java.util.Random;


public class YahtzeeRandomNum {
    
    Random r = new Random();
    int[] dice;

    private int roll() {
       return r.nextInt(6) + 1;
    }

    public YahtzeeRandomNum() {
        dice = new int[6];

        for(int i = 0; i < dice.length; i++)
            dice[i] = roll();
    }
}

**************************************
YahtzeeRandomNumTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YahtzeeRandomNumTest {

    @Test
    public void noNumberOutwith1To6Appear(){
       

        for(int i = 0; i < 1500; i++) {
             YahtzeeRandomNum yah = new YahtzeeRandomNum();
             for(int die: yah.dice) {
                 assertTrue(die >= 1 && die <= 6);  
             }          
        }

    }

    @Test
    public void thereIsAtLeastOneOccuranceOfEachNumber() {
        int[] occurances = new int[6];

        for(int i = 0; i < 1500; i++) {
            YahtzeeRandomNum yah = new YahtzeeRandomNum();
            for(int die: yah.dice) {
                occurances[die-1]++;  
            }          
        }

        for(int i = 0; i < occurances.length; i++) {   
             assertTrue(occurances[i] > 0);
        }
    }

    @Test
    public void chanceShouldAddAllDice() {
        YahtzeeRandomNum yah = new YahtzeeRandomNum();

        assertEquals()
    }
}

**************************************
YahtzeeScoring.java
**************************************


public class YahtzeeScoring {
    public static int chance(int... dice){
        int total = 0;

        for(int die:dice)
            total += die;

        return total;
    }
}

**************************************
YahtzeeScoringTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YahtzeeScoringTest {
    @Test
    public void chanceAddsAllDiceGiven(){

        int[] dice = {1,2,3,4,5};

        assertEquals(15 , YahtzeeScoring.chance(dice)); 
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 16
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
YahtzeeRandomNum.java
**************************************
import java.util.Random;


public class YahtzeeRandomNum {
    
    Random r = new Random();
    int[] dice;

    private int roll() {
       return r.nextInt(6) + 1;
    }

    public YahtzeeRandomNum() {
        dice = new int[6];

        for(int i = 0; i < dice.length; i++)
            dice[i] = roll();
    }
}

**************************************
YahtzeeRandomNumTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YahtzeeRandomNumTest {

    @Test
    public void noNumberOutwith1To6Appear(){
       

        for(int i = 0; i < 1500; i++) {
             YahtzeeRandomNum yah = new YahtzeeRandomNum();
             for(int die: yah.dice) {
                 assertTrue(die >= 1 && die <= 6);  
             }          
        }

    }

    @Test
    public void thereIsAtLeastOneOccuranceOfEachNumber() {
        int[] occurances = new int[6];

        for(int i = 0; i < 1500; i++) {
            YahtzeeRandomNum yah = new YahtzeeRandomNum();
            for(int die: yah.dice) {
                occurances[die-1]++;  
            }          
        }

        for(int i = 0; i < occurances.length; i++) {   
             assertTrue(occurances[i] > 0);
        }
    }

}

**************************************
YahtzeeScoring.java
**************************************


public class YahtzeeScoring {
    public static int chance(int... dice){
        int total = 0;

        for(int die:dice)
            total += die;

        return total;
    }
}

**************************************
YahtzeeScoringTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class YahtzeeScoringTest {
    @Test
    public void chanceAddsAllDiceGiven(){

        int[] dice = {1,2,3,4,5};

        assertEquals(15 , YahtzeeScoring.chance(dice)); 
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0FB4D00522 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
DieRoller.java
**************************************

public class DieRoller {
    
    public static int roll() {
        return 2;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void randomDieIsBetweenOneAndSix() {
        assertTrue(1==2);
        int die = DieRoller.roll();
        assertTrue(die >= 1);
        assertTrue(die <= 6);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
DieRoller.java
**************************************

public class DieRoller {
    
    public static int roll() {
        return 2;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void randomDieIsBetweenOneAndSix() {
        int die = DieRoller.roll();
        assertTrue(die >= 1);
        assertTrue(die <= 6);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0FB4D00522 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
DiceRoller.java
**************************************

public class DiceRoller{
    
    public static int[] rollDice() {
        int[] result = {1,2,3,4,5};
        return result;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

**************************************
DiceRollerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiceRollerTest {

    @Test
    public void provides5Integers() {
        int[] dice = DiceRoller.rollDice();
        assertEquals(5, dice.length);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
DiceRoller.java
**************************************

public class DiceRoller{
    
    public static int[] rollDice() {
        int[] result = {1,2,3,4,5};
        return result;
    }
}

**************************************
DiceRollerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DiceRollerTest {

    @Test
    public void provides5Integers() {
        int[] dice = DiceRoller.rollDice();
        assertEquals(5, dice.length);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0E49487679 lion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        //assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0E105E596D alligator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int i) {
        return checkFizz(i);
    }

    public static String checkFizz(int i) {
      if ( i % 3 == 0 ) {
        return "Fizz";
      } else {
        return new Integer(i).toString();
      }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void fizz() {
        assertEquals("1", Untitled.answer(1));
        assertEquals("2", Untitled.answer(2));
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("4", Untitled.answer(4));
        assertEquals("Buzz", Untitled.answer(5));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 12
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static String answer(int i) {
        return checkFizz(i);
    }

    public static String checkFizz(int i) {
      if ( i % 3 == 0 ) {
        return "Fizz";
      } else {
        return new Integer(i).toString();
      }
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void fizz() {
        assertEquals("1", Untitled.answer(1));
        assertEquals("2", Untitled.answer(2));
        assertEquals("Fizz", Untitled.answer(3));
        assertEquals("4", Untitled.answer(4));
//        assertEquals("Buzz", Untitled.answer(5));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0D7615F3C1 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 36
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.*;

public class Untitled {
    private List<Integer> integerList;
    
    public Untitled()
    {
        integerList= new ArrayList<Integer>();
    }

    public void computeList() {
        //Random random = new Random();   
        //for (int i=0;i<6;i++)
        //{
        //   integerList.add(random.nextInt(100));
        //}        
        integerList.add(10);
        integerList.add(-2);
        integerList.add(60);
        integerList.add(15);
        integerList.add(99);
        integerList.add(7);
    }
    public List getList()
    {
        return integerList;
    }
    
    public Integer maxList(List list)
    {
     Integer max=0;
     for (int i=0;i<list.size();i++)
        {
            if((Integer)list.get(i)>max) max = (Integer)list.get(i);
        }
     return max;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

public class UntitledTest {
    public List<Integer> expectedList;
    public Untitled untitled;

    @Before
    public void setUp() {
        //expectedList = new ArrayList<Integer>();
        untitled = new Untitled();
        untitled.computeList();
        expectedList = untitled.getList() ;    
        System.out.println("@Before - setUp");
    }
 
    //@After
    //public void tearDown() {
    //    expectedList.clear();
    //    System.out.println("@After - tearDown");
    //}
    @Test
    public void numberOfList() {
        
        assertEquals(expectedList.size(), 6);
    }
    @Test
    public void maxList() {     
        assertEquals(untitled.maxList(expectedList ), 99);
    }

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 36
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.util.*;

public class Untitled {
    private List<Integer> integerList;
    
    public Untitled()
    {
        integerList= new ArrayList<Integer>();
    }

    public void computeList() {
        //Random random = new Random();   
        //for (int i=0;i<6;i++)
        //{
        //   integerList.add(random.nextInt(100));
        //}        
        integerList.add(10);
        integerList.add(-2);
        integerList.add(60);
        integerList.add(15);
        integerList.add(99);
        integerList.add(7);
    }
    public List getList()
    {
        return integerList;
    }
    
    public Integer maxList(List list)
    {
     Integer max=0;
     for (int i=0;i<list.size();i++)
        {
            if((Integer)list.get(i)>max) max = (Integer)list.get(i);
        }
     System.out.println(max.toString());
     return max;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import java.util.*;
import static org.junit.Assert.*;

public class UntitledTest {
    public List<Integer> expectedList;
    public Untitled untitled;

    @Before
    public void setUp() {
        //expectedList = new ArrayList<Integer>();
        untitled = new Untitled();
        untitled.computeList();
        expectedList = untitled.getList() ;    
        System.out.println("@Before - setUp");
    }
 
    //@After
    //public void tearDown() {
    //    expectedList.clear();
    //    System.out.println("@After - tearDown");
    //}
    @Test
    public void numberOfList() {
        
        assertEquals(expectedList.size(), 6);
    }
    @Test
    public void maxList() {     
        //assertEquals(untitled.maxList(expectedList), 99);
untitled.maxList(expectedList);
    }

}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0C885CB6DC buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Game.java
**************************************

public class Game{

    public void roll(int pins) {
    }    

    public int score() {
        return 300;
    }
}

**************************************
GameTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class GameTest {
    
    @Test
    public void score() {
        Game game = new Game();
        for(int i = 0 ; i < 12 ; i++) {
            game.roll(10);
        }
        Assert.assertEquals(300, game.score());
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0A0D302A01 cheetah
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
    public static String answer(int number) {

        if(number%3==0 && number%5==0 ){
        return "FizzBuzz";
        }
        if(number%3 ==0){
        return "Fizz";
        }
        if(number%5 ==0){
        return "Buzz";
        }
        
        
        return number+"";
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void test1() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }
    @Test
    public void test2() {
        String expected = "2";
        String actual = FizzBuzz.answer(2);
        assertEquals(expected, actual);
    }
    @Test
    public void test3() {
        String expected = "Fizz";
        String actual = FizzBuzz.answer(3);
        assertEquals(expected, actual);
    }
    @Test
    public void test4() {
        String expected = "4";
        String actual = FizzBuzz.answer(4);
        assertEquals(expected, actual);
    }
    @Test
    public void test5() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }
    @Test
    public void test6() {
        String expected = "6";
        String actual = FizzBuzz.answer(6);
        assertEquals(expected, actual);
    }
    @Test
    public void test15() {
        String expected = "FizzBuzz";
        String actual = FizzBuzz.answer(15);
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
FizzBuzz.java
**************************************

public class FizzBuzz{
    
    public static String answer(int number) {

        if(number%3==0 && number%5==0 ){
        return "FizzBuzz";
        }
        if(number%3 ==0){
        return "Fizz";
        }
        if(number%5 ==0){
        return "Buzz";
        }
        
        
        return number+"";
    }
}

**************************************
FizzBuzzTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class FizzBuzzTest {
    
    @Test
    public void test1() {
        String expected = "1";
        String actual = FizzBuzz.answer(1);
        assertEquals(expected, actual);
    }
    @Test
    public void test2() {
        String expected = "2";
        String actual = FizzBuzz.answer(2);
        assertEquals(expected, actual);
    }
    @Test
    public void test3() {
        String expected = "Fizz";
        String actual = FizzBuzz.answer(3);
        assertEquals(expected, actual);
    }
    @Test
    public void test4() {
        String expected = "4";
        String actual = FizzBuzz.answer(4);
        assertEquals(expected, actual);
    }
    @Test
    public void test5() {
        String expected = "Buzz";
        String actual = FizzBuzz.answer(5);
        assertEquals(expected, actual);
    }

    @Test
    public void test15() {
        String expected = "FizzBuzz";
        String actual = FizzBuzz.answer(15);
        assertEquals(expected, actual);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 09C73253D7 buffalo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Line.java
**************************************

public class Line {
    
    public static int answer() {
        return 42;
    }
}

**************************************
LineTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LineTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Line.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Line.java
**************************************

public class Line {
    
    public static int answer() {
        return 42;
    }
}

**************************************
LineTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class LineTest {
    
    @Test
    public void lineCanBeConstructed() {
        Line line = new Line();        
        assertNotNull(line);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 06D567F116 snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.lang.Exception.*;

public class Untitled {
    
    
	public static String convertOnes(int digit){
		String returnValue="fail";
		if (digit==1) 
		{ returnValue="one"; }
		else if (digit==2)
		{returnValue="two"; }
		else if (digit==3)
		{returnValue="three"; }
		else if (digit==4)
		{returnValue="four"; }
		else if (digit==5)
		{returnValue="five"; }
		else if (digit==6)
		{returnValue="six"; }
		else if (digit==7)
		{returnValue="seven"; }
		else if (digit==8)
		{returnValue="eight"; }
		else if (digit==9)
		{returnValue="nine"; }
		else if (digit==0)
		{returnValue="zero"; }

		return returnValue;
	}


	public static String convertTens(int digits){
		String returnValue="fail";
		if (digits<10) { // bad to handle this with runtime exception.
			throw new RuntimeException("Digits must be greater than ten");
		} 
		else if (digits>19) { // bad to handle this with runtime exception.
			throw new RuntimeException("Digits must be less than 20");
		} 
		else if (digits==10) {
			returnValue="ten";
		}
		else if (digits==11) {
			returnValue="eleven";
		}
		return returnValue;

	}
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void onePass(){
        String expected="one";
        String actual = Untitled.convertOnes(1);
        assertEquals(expected, actual);
    }
   @Test
    public void twoPass(){
        String expected="two";
        String actual = Untitled.convertOnes(2);
        assertEquals(expected, actual);
    }

 @Test
    public void threePass(){
        String expected="three";
        String actual = Untitled.convertOnes(3);
        assertEquals(expected, actual);
    }

 @Test
    public void four(){
        String expected="four";
        String actual = Untitled.convertOnes(4);
        assertEquals(expected, actual);
    }

 @Test
    public void five(){
        String expected="five";
        String actual = Untitled.convertOnes(5);
        assertEquals(expected, actual);
    }

 @Test
    public void six(){
        String expected="six";
        String actual = Untitled.convertOnes(6);
        assertEquals(expected, actual);
    }

 @Test
    public void seven(){
        String expected="seven";
        String actual = Untitled.convertOnes(7);
        assertEquals(expected, actual);
    }

 @Test
    public void eight(){
        String expected="eight";
        String actual = Untitled.convertOnes(8);
        assertEquals(expected, actual);
    }

 @Test
    public void nine(){
        String expected="nine";
        String actual = Untitled.convertOnes(9);
        assertEquals(expected, actual);
    }

 @Test
    public void zero(){
        String expected="zero";
        String actual = Untitled.convertOnes(0);
        assertEquals(expected, actual);
    }

 @Test
    public void ten(){
        String expected="ten";
        String actual = Untitled.convertTens(10);
        assertEquals(expected, actual);
    }


/*
@Rule
public ExpectedException expectedEx = ExpectedException.none();
*/

@Test (expected=RuntimeException.class )
public void shouldThrowRuntimeExceptionWhenConvertTensLessThanTen() {
    //expectedEx.expect(RuntimeException.class);
    //expectedEx.expectMessage("Digits must be greater than ten");
    // do something that should throw the exception...
    //Exception expected = RuntimeException.class;
    Untitled.convertTens(9);
}






 @Test
    public void tenFailLessThan(){
        String expected="";
        String actual = Untitled.convertTens(10);
        assertEquals(expected, actual);
    }
        
}


%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 20
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************
import java.lang.Exception.*;

public class Untitled {
    
    
	public static String convertOnes(int digit){
		String returnValue="fail";
		if (digit==1) 
		{ returnValue="one"; }
		else if (digit==2)
		{returnValue="two"; }
		else if (digit==3)
		{returnValue="three"; }
		else if (digit==4)
		{returnValue="four"; }
		else if (digit==5)
		{returnValue="five"; }
		else if (digit==6)
		{returnValue="six"; }
		else if (digit==7)
		{returnValue="seven"; }
		else if (digit==8)
		{returnValue="eight"; }
		else if (digit==9)
		{returnValue="nine"; }
		else if (digit==0)
		{returnValue="zero"; }

		return returnValue;
	}


	public static String convertTens(int digits){
		String returnValue="fail";
		if (digits<10) { // bad to handle this with runtime exception.
			throw new RuntimeException("Digits must be greater than ten");
		} 
		else if (digits>19) { // bad to handle this with runtime exception.
			throw new RuntimeException("Digits must be less than 20");
		} 
		else if (digits==10) {
			returnValue="ten";
		}
		else if (digits==11) {
			returnValue="eleven";
		}
		return returnValue;

	}
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void onePass(){
        String expected="one";
        String actual = Untitled.convertOnes(1);
        assertEquals(expected, actual);
    }
   @Test
    public void twoPass(){
        String expected="two";
        String actual = Untitled.convertOnes(2);
        assertEquals(expected, actual);
    }

 @Test
    public void threePass(){
        String expected="three";
        String actual = Untitled.convertOnes(3);
        assertEquals(expected, actual);
    }

 @Test
    public void four(){
        String expected="four";
        String actual = Untitled.convertOnes(4);
        assertEquals(expected, actual);
    }

 @Test
    public void five(){
        String expected="five";
        String actual = Untitled.convertOnes(5);
        assertEquals(expected, actual);
    }

 @Test
    public void six(){
        String expected="six";
        String actual = Untitled.convertOnes(6);
        assertEquals(expected, actual);
    }

 @Test
    public void seven(){
        String expected="seven";
        String actual = Untitled.convertOnes(7);
        assertEquals(expected, actual);
    }

 @Test
    public void eight(){
        String expected="eight";
        String actual = Untitled.convertOnes(8);
        assertEquals(expected, actual);
    }

 @Test
    public void nine(){
        String expected="nine";
        String actual = Untitled.convertOnes(9);
        assertEquals(expected, actual);
    }

 @Test
    public void zero(){
        String expected="zero";
        String actual = Untitled.convertOnes(0);
        assertEquals(expected, actual);
    }

 @Test
    public void ten(){
        String expected="ten";
        String actual = Untitled.convertTens(10);
        assertEquals(expected, actual);
    }


/*
@Rule
public ExpectedException expectedEx = ExpectedException.none();
*/

@Test (expected=RuntimeException.class )
public void shouldThrowRuntimeExceptionWhenConvertTensLessThanTen() {
    //expectedEx.expect(RuntimeException.class);
    //expectedEx.expectMessage("Digits must be greater than ten");
    // do something that should throw the exception...
    //Exception expected = RuntimeException.class;
    Untitled.convertTens(9);
}





/*
 @Test
    public void tenFailLessThan(){
        String expected="";
        String actual = Untitled.convertTens(10);
        assertEquals(expected, actual);
    }
*/
        
}




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 0356D887FC raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {
    
    private boolean isOpen;
    public Door (boolean isOpen){
        this.isOpen = isOpen;
    }

    public void toggleState(){
        isOpen = !isOpen;
    }

    public boolean getState(){
        return isOpen;
    }

    
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void toggleDoorState(){
        Boolean isOpen = false;
        Boolean expected = !isOpen;
        Door door = new Door(isOpen);
        door.toggleState();
        Boolean actual = door.getState();
        assertEquals(actual, expected);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Door.java
**************************************

public class Door {
    
    private boolean isOpen;
    public Door (boolean isOpen){
        this.isOpen = isOpen;
    }

    public void toggleState(){
        isOpen = !isOpen;
    }

    public boolean getState(){
        return isOpen;
    }

    
}

**************************************
DoorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class DoorTest {
    


    @Test
    public void toggleDoorState(){
        Boolean isOpen = false;
        Boolean expected = !isOpen;
        Door door = new Door(isOpen);
        door.toggleState();
        Boolean actual = door.getState();
        assertEquals(actual, expected);
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 00E6723CBC raccoon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Anagrams.java
**************************************
import java.util.HashSet;

public class Anagrams {

	public static HashSet<String> anagrams = new HashSet<String>();

	public static void permute(String str) {
		permute("", str);
	}

	private static void permute(String prefix, String str) {
		int len = str.length();
		if (len == 0) {
			anagrams.add(prefix);
		} else {
			// iterate over permutations of n-1
			for (int i = 0; i < len; i++) {
				// insert character
				permute(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, len));
			}
		}
	}
}

**************************************
AnagramsTest.java
**************************************
import org.junit.Test;

import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.*;

public class AnagramsTest {

	@Test
	public void permute() {

		String str = "biro";

		String[] permutations = {
				"biro", "bior", "brio", "broi", "boir", "bori",
				"ibro", "ibor", "irbo", "irob", "iobr", "iorb",
				"rbio", "rboi", "ribo", "riob", "roib", "robi",
				"obir", "obri", "oibr", "oirb", "orbi", "orib"
		};

		Anagrams.permute(str);
		HashSet<String> anagrams = Anagrams.anagrams;

		for (String perm : permutations) {
			boolean contains = anagrams.contains(perm);
			System.out.println("Contains " + perm + "? : " + contains);
			assert contains;
		}
	}
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 00E6723CBC snake
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: amber TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
AnagramDetector.java
**************************************
import java.util.*;

public class AnagramDetector {

    public Set<String> getAllAnagrams(String word) {

        char[] wordChars = word.toCharArray();
        Set<String> allPossibleWords = new HashSet<String>();

        for (int i=0; i < wordChars.length; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append(wordChars[i]);

            for (int j=0; j < wordChars.length; j++) {
                if ( i != j) {
                
                }
            }    
        }  

        return allPossibleWords;  

    }

    public int numberOfPossibilities(String word) {
        int size = word.length();
        int product = size;
        for (int i = size-1 ; i > 0; i--) {
           product *= i;
        }    
        return product;
    }
}

**************************************
AnagramDetectorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramDetectorTest {

    AnagramDetector detector;

    @Before
    public void setUp() {
        detector = new AnagramDetector();    
    }
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = AnagramDetector.answer();
        assertEquals(expected, actual);
    }

    @Test
    public void testDecipherAnagram() {
        //AnagramDetector detector = new AnagramDetector();
        assertEquals(24, detector.numberOfPossibilities("roib"));
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: amber TAG: 13
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
AnagramDetector.java
**************************************
import java.util.*;

public class AnagramDetector {

    public Set<String> getAllAnagrams(String word) {

        char[] wordChars = word.toCharArray();
        Set<String> allPossibleWords = new HashSet<String>();

        for (int i=0; i < wordChars.length; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append(wordChars[i]);

            for (int j=0; j < wordChars.length; j++) {
                if ( i != j) {
                
                }
            }    
        }  

        return allPossibleWords;  

    }

    public int numberOfPossibilities(String word) {
        int size = word.length();
        int product = size;
        for (int i = size-1 ; i > 0; i--) {
           product *= i;
        }    
        return product;
    }
}

**************************************
AnagramDetectorTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class AnagramDetectorTest {

    AnagramDetector detector;

    @Before
    public void setUp() {
        detector = new AnagramDetector();    
    }
    

    @Test
    public void testDecipherAnagram() {
        //AnagramDetector detector = new AnagramDetector();
        assertEquals(24, detector.numberOfPossibilities("roib"));
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 00E0B3A302 frog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void hitch_hiker() {
        int expected = 6 * 9;
        int actual = Untitled.answer();
        assertEquals(expected, actual);
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
Untitled.java
**************************************

public class Untitled {
    
    public static int answer() {
        return 42;
    }
}

**************************************
UntitledTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class UntitledTest {
    
    @Test
    public void testNotAMultiple() {
          
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 004E826323 koala
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class HikerTest {

    @Test
    public void life_the_universe_and_everything() {
        int expected = 42;
        int actual = Hiker.answer();
        assertEquals(expected, actual);
    }
}

**************************************
Hiker.java
**************************************

public class Hiker {

    public static int answer() {
        return 6 * 9;
    }
}

**************************************
CellTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class CellTest {
    @Test
    public void testGetLiveCell () {
        Cell target = LiveCell.INSTANCE;

        assertTrue(target.isAlive());
    }
}

**************************************
Cell.java
**************************************
public abstract class Cell {
    public abstract boolean isAlive();
}

**************************************
LiveCell.java
**************************************
public class LiveCell extends Cell {
    public static final Cell INSTANCE = new LiveCell();

    private LiveCell(){
    }

    public boolean isAlive(){
        return true;
    }
}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
CellTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;

public class CellTest {
    @Test
    public void testGetLiveCell () {
        Cell target = LiveCell.INSTANCE;

        assertTrue(target.isAlive());
    }
}

**************************************
Cell.java
**************************************
public abstract class Cell {
    public abstract boolean isAlive();
}

**************************************
LiveCell.java
**************************************
public class LiveCell extends Cell {
    public static final Cell INSTANCE = new LiveCell();

    private LiveCell(){
    }

    public boolean isAlive(){
        return true;
    }
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 ID: 001B95D8E4 panda
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BEFORE-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
 

public class HikerTest {

    ArrayList<Integer> listNumbers;
    
    @Test
    public void minTest() {
         listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 4;
        int actual = Hiker.getMin(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void maxTest() {
         listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 42;
        int actual = Hiker.getMax(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void sizeTest() {
        listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 3;
        int actual = Hiker.getSize(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void avgTest() {
        listNumbers = new ArrayList<Integer>();
        listNumbers.add(5);
        listNumbers.add(6);
        listNumbers.add(4);

        double expected = 5;
        double actual = Hiker.getAvg(listNumbers);
        assertEquals(expected, actual);

    }

}

**************************************
Hiker.java
**************************************
import java.util.ArrayList;
 
public class Hiker {


    public static int getMin(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int tempMin = listNumbers.get(0);
        for (int i=1; i<listSize;i++){
              if (listNumbers.get(i) < tempMin) { 
                tempMin = listNumbers.get(i); 
                }
        }
        return tempMin;
    }
     public static int getMax(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int tempMax = listNumbers.get(0);
        for (int i=1; i<listSize;i++){
              if (listNumbers.get(i) > tempMax) { 
                tempMax = listNumbers.get(i); 
                }
           }
        return tempMax;
    }
    public static int getSize(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();  
        return listSize;
    }
    public static double getAvg(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int Sum = 0;
        for (int i=0; i<listSize;i++){
              Sum = Sum + listNumbers.get(i);
           }
        return  Sum / listSize;
    }
    

}

%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AFTER-------
COLOR: red TAG: 18
^^^^^^^^^^^^^^^^^^^^^^^^^^^^



**************************************
HikerTest.java
**************************************
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
 

public class HikerTest {

    ArrayList<Integer> listNumbers;
    
    @Test
    public void minTest() {
         listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 4;
        int actual = Hiker.getMin(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void maxTest() {
         listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 42;
        int actual = Hiker.getMax(listNumbers);
        assertEquals(expected, actual);

    }
    @Test
    public void sizeTest() {
        listNumbers = new ArrayList<Integer>();
        listNumbers.add(42);
        listNumbers.add(11);
        listNumbers.add(4);

        int expected = 3;
        int actual = Hiker.getSize(listNumbers);
        assertEquals(expected, actual);

    }
   

}

**************************************
Hiker.java
**************************************
import java.util.ArrayList;
 
public class Hiker {


    public static int getMin(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int tempMin = listNumbers.get(0);
        for (int i=1; i<listSize;i++){
              if (listNumbers.get(i) < tempMin) { 
                tempMin = listNumbers.get(i); 
                }
        }
        return tempMin;
    }
     public static int getMax(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int tempMax = listNumbers.get(0);
        for (int i=1; i<listSize;i++){
              if (listNumbers.get(i) > tempMax) { 
                tempMax = listNumbers.get(i); 
                }
           }
        return tempMax;
    }
    public static int getSize(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();  
        return listSize;
    }
    public static double getAvg(ArrayList<Integer> listNumbers) {
        int listSize = listNumbers.size();
        int Sum = 0;
        for (int i=0; i<listSize;i++){
              Sum = Sum + listNumbers.get(i);
           }
        return  Sum / listSize;
    }
    

}
