{"created":[2014,5,19,7,54,23],"id":"0C4D89C255","language":"C#-NUnit","exercise":"Verbal","unit_test_framework":"nunit","tab_size":4,"visible_files":{"ITennisGame.cs":"using System;\n\nnamespace TennisRefactoringKata\n{\n  public interface ITennisGame\n  {\n    void WonPoint (string playerName);\n    string GetScore ();\n  }\n}\n\n","TennisGameTests.cs":"using System;\nusing NUnit.Framework;\nusing TennisRefactoringKata;\n\nnamespace TennisRefactoringKataTests\n{\n\n  [TestFixture(0, 0, \"Love-All\")]\n  [TestFixture( 1, 1, \"Fifteen-All\" )]\n  [TestFixture( 2, 2, \"Thirty-All\")]\n  [TestFixture( 3, 3, \"Deuce\")]\n  [TestFixture( 4, 4, \"Deuce\")]\n  [TestFixture( 1, 0, \"Fifteen-Love\")]\n  [TestFixture( 0, 1, \"Love-Fifteen\")]\n  [TestFixture( 2, 0, \"Thirty-Love\")]\n  [TestFixture( 0, 2, \"Love-Thirty\")]\n  [TestFixture( 3, 0, \"Forty-Love\")]\n  [TestFixture( 0, 3, \"Love-Forty\")]\n  [TestFixture( 4, 0, \"Win for player1\")]\n  [TestFixture( 0, 4, \"Win for player2\")]\n  [TestFixture( 2, 1, \"Thirty-Fifteen\")]\n  [TestFixture( 1, 2, \"Fifteen-Thirty\")]\n  [TestFixture( 3, 1, \"Forty-Fifteen\")]\n  [TestFixture( 1, 3, \"Fifteen-Forty\")]\n  [TestFixture( 4, 1, \"Win for player1\")]\n  [TestFixture( 1, 4, \"Win for player2\")]\n  [TestFixture( 3, 2, \"Forty-Thirty\")]\n  [TestFixture( 2, 3, \"Thirty-Forty\")]\n  [TestFixture( 4, 2, \"Win for player1\")]\n  [TestFixture( 2, 4, \"Win for player2\")]\n  [TestFixture( 4, 3, \"Advantage player1\")]\n  [TestFixture( 3, 4, \"Advantage player2\")]\n  [TestFixture( 5, 4, \"Advantage player1\")]\n  [TestFixture( 4, 5, \"Advantage player2\")]\n  [TestFixture( 15, 14, \"Advantage player1\")]\n  [TestFixture( 14, 15, \"Advantage player2\")]\n  [TestFixture( 6, 4, \"Win for player1\")]\n  [TestFixture( 4, 6, \"Win for player2\")]\n  [TestFixture( 16, 14, \"Win for player1\")]\n  [TestFixture( 14, 16, \"Win for player2\")]\n  public class TennisGameTests\n  {\n    private int player1Score;\n    private int player2Score;\n    private string expectedScore;\n\n    public TennisGameTests(int player1Score, int player2Score, string expectedScore) {\n      this.player1Score = player1Score;\n      this.player2Score = player2Score;\n      this.expectedScore = expectedScore;\n    }\n\n    [Test]\n    public void checkTennisGame() {\n      TennisGame game = new TennisGame(\"player1\", \"player2\");\n      checkAllScores(game);\n    }\n\n\n    public void checkAllScores(TennisGame game) {\n      int highestScore = Math.Max(this.player1Score, this.player2Score);\n      for (int i = 0; i < highestScore; i++) {\n        if (i < this.player1Score)\n          game.WonPoint(\"player1\");\n        if (i < this.player2Score)\n          game.WonPoint(\"player2\");\n      }\n      Assert.AreEqual(this.expectedScore, game.GetScore());\n    }\n  }\n\n  [TestFixture()]\n  public class ExampleGameTennisTest\n  {\n      [Test()]\n      public void CheckGame()\n      {\n          TennisGame game = new TennisGame(\"player1\", \"player2\");\n          RealisticTennisGame(game);\n      }\n\n    public void RealisticTennisGame(TennisGame game)\n    {\n      String[] points =          {\"player1\", \"player1\", \"player2\", \"player2\", \"player1\", \"player1\"};\n      String[] expected_scores = {\"Fifteen-Love\", \"Thirty-Love\", \"Thirty-Fifteen\", \"Thirty-All\", \"Forty-Thirty\", \"Win for player1\"};\n      for (int i = 0; i < 6; i++) {\n        game.WonPoint(points[i]);\n        Assert.AreEqual(expected_scores[i], game.GetScore());\n      }\n    }\n  }\n\n}\n\n","cyber-dojo.sh":"dmcs -t:library -r:/usr/lib/cli/nunit.framework-2.6/nunit.framework.dll -out:TennisGameTests.dll *.cs\nif [ $? -eq 0 ]; then\n  nunit-console -nologo TennisGameTests.dll\nfi","instructions":"Tennis Refactoring Kata\n=======================\nImagine you work for a consultancy company, and one of your colleagues has been \ndoing some work for the Tennis Society. \n\nThe contract is for 10 hours billable work, and your colleague has spent 8.5 \nhours working on it. Unfortunately he has now fallen ill. He says he has \ncompleted the work, and the tests all pass. \n\nYour boss has asked you to take over from him. She wants you to spend an hour \nor so on the code so she can bill the client for the full 10 hours. She \ninstructs you to tidy up the code a little and perhaps make some notes so you \ncan give your colleague some feedback on his chosen design.\n\n** Note down example problems you found, and the approach taken to correct\n\nOriginal Brief\n===============\nYour task is to write a “TennisGame” class containing the logic which outputs \nthe correct score as a string for display on the scoreboard. \n\nWhen a player scores a point, it triggers a method to be called on your class \nletting you know who scored the point. Later, you will get a call “score()” \nfrom the scoreboard class asking what it should display. This method should \nreturn a string with the current score.\n\nRule 1\nA game is won by the first player to have won at least four points in total and \nat least two points more than the opponent.\n\nRule 2\nThe running score of each game is described in a manner peculiar to tennis: \nscores from zero to three points are described as \"love\", \"fifteen\", \"thirty\", \nand \"forty\" respectively.\n\nRule 3\nIf at least three points have been scored by each player, and the scores are \nequal, the score is \"deuce\".\n\nRule 4\nIf at least three points have been scored by each side and a player has one \nmore point than his opponent, the score of the game is \"advantage\" for the \nplayer in the lead.\n\nNOTE.\nYou need only report the score for the current game. Sets and Matches are out \nof scope.\n","TennisGame.cs":"using System;\n\nnamespace TennisRefactoringKata\n{\n  public class TennisGame : ITennisGame\n  {\n    private int m_score1 = 0;\n    private int m_score2 = 0;\n    private string player1Name;\n    private string player2Name;\n\n    public TennisGame (string player1Name, string player2Name)\n    {\n      this.player1Name = player1Name;\n      this.player2Name = player2Name;\n    }\n\n    public void WonPoint (string playerName)\n    {\n      if (playerName == \"player1\")\n        m_score1 += 1;\n      else\n        m_score2 += 1;\n    }\n\n    public string GetScore ()\n    {\n      String score = \"\";\n      int tempScore=0;\n      if (m_score1==m_score2)\n      {\n        switch (m_score1)\n        {\n        case 0:\n          score = \"Love-All\";\n          break;\n        case 1:\n          score = \"Fifteen-All\";\n          break;\n        case 2:\n          score = \"Thirty-All\";\n          break;\n        default:\n          score = \"Deuce\";\n          break;\n          \n        }\n      }\n      else if (m_score1>=4 || m_score2>=4)\n      {\n        int minusResult = m_score1-m_score2;\n        if (minusResult==1) score =\"Advantage player1\";\n        else if (minusResult ==-1) score =\"Advantage player2\";\n        else if (minusResult>=2) score = \"Win for player1\";\n        else score =\"Win for player2\";\n      }\n      else\n      {\n        for (int i=1; i<3; i++)\n        {\n          if (i==1) tempScore = m_score1;\n          else { score+=\"-\"; tempScore = m_score2;}\n          switch(tempScore)\n          {\n          case 0:\n            score+=\"Love\";\n            break;\n          case 1:\n            score+=\"Fifteen\";\n            break;\n          case 2:\n            score+=\"Thirty\";\n            break;\n          case 3:\n            score+=\"Forty\";\n            break;\n          }\n        }\n      }\n      return score;\n    }\n  }\n\n}\n","output":"TennisGame.cs(9,20): warning CS0414: The private field `TennisRefactoringKata.TennisGame.player1Name' is assigned but its value is never used\nTennisGame.cs(10,20): warning CS0414: The private field `TennisRefactoringKata.TennisGame.player2Name' is assigned but its value is never used\nCompilation succeeded - 2 warning(s)\nProcessModel: Default    DomainUsage: Single\nExecution Runtime: mono-4.0\n..................................\nTests run: 34, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.139033 seconds\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\n\n"}}