{"created":[2014,6,4,5,36,58],"id":"0C6FC6A37F","language":"C++-GoogleTest","exercise":"Print_Diamond","unit_test_framework":"google_test","tab_size":4,"visible_files":{"diamond.cpp":"#include \"diamond.hpp\"\n\ndiamond::diamond(char widest)\n    : widest(widest)\n{\n}\n\nstd::vector<std::string> diamond::lines() const\n{\n    std::vector<std::string> result;\n    char m[64][64];\n\n    for (int x = -radius(); x <= +radius(); x++)\n        for (int y = -radius(); y <= +radius(); y++)\n            m[x+radius()][y+radius()] = char_at(x,y);\n\n    for (int i = 0; i != diameter(); i++)\n        result.push_back(std::string(&m[i][0], &m[i][diameter()]));\n\n    return result;\n}\n\nchar diamond::char_at(int x, int y) const\n{    \n    static const char * alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    return abs(x) + abs(y) == radius() ? alphabet[radius()-abs(x)] : ' ';\n}\n\nint diamond::radius() const\n{\n    return widest - 'A';\n}\n\nint diamond::diameter() const\n{\n    return radius() * 2 + 1;\n}\n\n","diamond.tests.cpp":"#include \"diamond.hpp\"\n#include \"gtest/gtest.h\"\n#include <iostream>\n\nusing namespace std;\nusing namespace ::testing;\n\ntemplate<size_t N>\nvoid my_diamond_assert_eq(const std::vector<std::string> & actual,\n                          std::string (&expected)[N])\n{\n    if (N != actual.size())\n    {\n        FAIL() << \"sizes are not equal\";\n    }\n\n    bool same = true;\n    for (size_t i = 0; i != actual.size(); i++)\n    {\n        if (expected[i] != actual[i])\n        {\n            same = false;\n            break;\n        }\n    }\n            \n    if (!same)\n    {\n        cout << \"EXPECTED\" << endl;\n        for (size_t i = 0; i != N; i++) \n        {\n            cout << expected[i] << '|' << endl;\n        }\n        cout << endl;\n        cout << \"ACTUAL\" << endl;\n        for (size_t i = 0; i != actual.size(); i++) \n        {\n            cout << actual[i] << '|' << endl;\n        }\n        cout << endl;\n        FAIL();\n    }\n    else\n    {\n        SUCCEED();\n    }\n}\n\nTEST(DiamondTest, A)\n{\n    std::string expected[] = {\n        \"A\",\n    };\n    my_diamond_assert_eq(diamond('A').lines(), expected);\n}\n\nTEST(DiamondTest, B)\n{\n    std::string expected[] = {\n        \" A \",\n        \"B B\",\n        \" A \"\n    };\n    my_diamond_assert_eq(diamond('B').lines(), expected);\n}\n\nTEST(DiamondTest, C)\n{\n    std::string expected[] = {\n        \"  A  \",\n        \" B B \",\n        \"C   C\",\n        \" B B \",\n        \"  A  \"\n    };\n    my_diamond_assert_eq(diamond('C').lines(), expected);\n}\n\nTEST(DiamondTest, D)\n{\n    std::string expected[] = {\n        \"   A   \",\n        \"  B B  \",\n        \" C   C \",\n        \"D     D\",\n        \" C   C \",\n        \"  B B  \",\n        \"   A   \"\n    };\n    my_diamond_assert_eq(diamond('D').lines(), expected);\n}\n\n#include <iostream>\n\nTEST(DiamondTest, print_Z)\n{\n    std::vector<std::string> lines = diamond('Z').lines();\n    for (size_t i = 0; i != lines.size(); i++)\n        std::cout << lines[i] << std::endl;\n    std::cout << std::endl;\n}\n\n\n\n\n\n\n\n","diamond.hpp":"#ifndef DIAMOND_INCLUDED\n#define DIAMOND_INCLUDED\n\n#include <vector>\n#include <string>\n\nclass diamond\n{\npublic:\n    explicit diamond(char widest);        \n    std::vector<std::string> lines() const;\n\nprivate:\n    char char_at(int x, int y) const;\n    int radius() const;\n    int diameter() const;\n\nprivate:\n    char widest;\n};\n\n#endif\n","makefile":"CXXFLAGS += -g -std=c++11 -Wall -Wextra -Werror -pthread\nGTEST_LIBS = -lgtest -lgtest_main\n\nrun.tests.output : makefile run.tests\n\t./run.tests\n\nrun.tests : makefile *.cpp *.hpp\n\t$(CXX) -I. $(CXXFLAGS) -O *.cpp $(GTEST_LIBS) -o $@","cyber-dojo.sh":"LANG=c\nmake","instructions":"\nGiven a letter print a diamond starting with 'A'\nwith the supplied letter at the widest point.\n\nFor example: print-diamond 'E' prints\n\n    A\n   B B\n  C   C\n D     D\nE       E\n D     D\n  C   C\n   B B\n    A\n\nFor example: print-diamond 'C' prints\n\n  A\n B B\nC   C\n B B\n  A\n  ","output":"g++ -I. -g -std=c++11 -Wall -Wextra -Werror -pthread -O *.cpp -lgtest -lgtest_main -o run.tests\n./run.tests\nRunning main() from gtest_main.cc\n[==========] Running 5 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 5 tests from DiamondTest\n[ RUN      ] DiamondTest.A\n[       OK ] DiamondTest.A (0 ms)\n[ RUN      ] DiamondTest.B\n[       OK ] DiamondTest.B (0 ms)\n[ RUN      ] DiamondTest.C\n[       OK ] DiamondTest.C (0 ms)\n[ RUN      ] DiamondTest.D\n[       OK ] DiamondTest.D (0 ms)\n[ RUN      ] DiamondTest.print_Z\n                         A                         \n                        B B                        \n                       C   C                       \n                      D     D                      \n                     E       E                     \n                    F         F                    \n                   G           G                   \n                  H             H                  \n                 I               I                 \n                J                 J                \n               K                   K               \n              L                     L              \n             M                       M             \n            N                         N            \n           O                           O           \n          P                             P          \n         Q                               Q         \n        R                                 R        \n       S                                   S       \n      T                                     T      \n     U                                       U     \n    V                                         V    \n   W                                           W   \n  X                                             X  \n Y                                               Y \nZ                                                 Z\n Y                                               Y \n  X                                             X  \n   W                                           W   \n    V                                         V    \n     U                                       U     \n      T                                     T      \n       S                                   S       \n        R                                 R        \n         Q                               Q         \n          P                             P          \n           O                           O           \n            N                         N            \n             M                       M             \n              L                     L              \n               K                   K               \n                J                 J                \n                 I               I                 \n                  H             H                  \n                   G           G                   \n                    F         F                    \n                     E       E                     \n                      D     D                      \n                       C   C                       \n                        B B                        \n                         A                         \n\n[       OK ] DiamondTest.print_Z (10 ms)\n[----------] 5 tests from DiamondTest (11 ms total)\n\n[----------] Global test environment tear-down\n[==========] 5 tests from 1 test case ran. (12 ms total)\n[  PASSED  ] 5 tests.\n"}}