{"created":[2013,9,30,8,22,17],"id":"0CCB1FC797","browser":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:23.0) Gecko/20100101 Firefox/23.0","language":"Java-JUnit","exercise":"Verbal","unit_test_framework":"junit","tab_size":4,"visible_files":{"TelemetryClient.java":"\nimport java.util.Random;\n\npublic class TelemetryClient\n{\n    public static final String DIAGNOSTIC_MESSAGE = \"AT#UD\";\n\n    private boolean onlineStatus;\n    private String diagnosticMessageResult = \"\";\n\n    private final Random connectionEventsSimulator = new Random(42);\n\n    public boolean getOnlineStatus()\n    {\n        return onlineStatus; \n    }\n\n    public void connect(String telemetryServerConnectionString)\n    {\n        if (telemetryServerConnectionString == null || \"\".equals(telemetryServerConnectionString))\n        {\n            throw new IllegalArgumentException();\n        }\n\n        // simulate the operation on a real modem\n        boolean success = connectionEventsSimulator.nextInt(10) <= 8;\n\n        onlineStatus = success;\n    }\n\n    public void disconnect()\n    {\n        onlineStatus = false;\n    }\n\n    public void send(String message)\n    {\n        if (message == null || \"\".equals(message))\n        {\n            throw new IllegalArgumentException();\n        }\n\n        if (message == DIAGNOSTIC_MESSAGE)\n        {\n            // simulate a status report\n            diagnosticMessageResult =\n                  \"LAST TX rate................ 100 MBPS\\r\\n\"\n                + \"HIGHEST TX rate............. 100 MBPS\\r\\n\"\n                + \"LAST RX rate................ 100 MBPS\\r\\n\"\n                + \"HIGHEST RX rate............. 100 MBPS\\r\\n\"\n                + \"BIT RATE.................... 100000000\\r\\n\"\n                + \"WORD LEN.................... 16\\r\\n\"\n                + \"WORD/FRAME.................. 511\\r\\n\"\n                + \"BITS/FRAME.................. 8192\\r\\n\"\n                + \"MODULATION TYPE............. PCM/FM\\r\\n\"\n                + \"TX Digital Los.............. 0.75\\r\\n\"\n                + \"RX Digital Los.............. 0.10\\r\\n\"\n                + \"BEP Test.................... -5\\r\\n\"\n                + \"Local Rtrn Count............ 00\\r\\n\"\n                + \"Remote Rtrn Count........... 00\";\n\n            return;\n        }\n\n        // here should go the real Send operation (not needed for this exercise)\n    }\n\n    public String receive()\n    {\n        String message;\n\n        if (diagnosticMessageResult == null || \"\".equals(diagnosticMessageResult))\n        {\n            // simulate a received message (just for illustration - not needed for this exercise)\n            message = \"\";\n            int messageLength = connectionEventsSimulator.nextInt(50) + 60;\n            for(int i = messageLength; i >=0; --i)\n            {\n                message += (char)connectionEventsSimulator.nextInt(40) + 86;\n            }\n            \n        } \n        else\n        {                \n            message = diagnosticMessageResult;\n            diagnosticMessageResult = \"\";\n        }\n\n        return message;\n    }\n}\n\n","TelemetryDiagnosticsTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class TelemetryDiagnosticsTest {\n    \n    @Test\n    public void foo() {\n        TelemetryDiagnostics diagnostics = new TelemetryDiagnostics();\n        String message = diagnostics.getDiagnosticInfo();\n        assertEquals(\"fixme\", message);\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\njavac -cp .:./junit-4.11.jar *.java \nif [ $? -eq 0 ]; then\n  java -cp .:./junit-4.11.jar org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","instructions":"\nWrite the unit tests for the TelemetryDiagnostics class. \nInitially, do not change the code for this class. When you have an \ninitial test in  place, review your test code together with the \nsession facilitator.\n\nWhen you have had your initial tests reviewed, then you may \nrefactor the code to make it testable. Take care when \nrefactoring not to alter the functionality, or change interfaces which \nother client code may rely on. Add more tests to cover the functionality \nof the TelemetryDiagnostics class. \n\nNote\n====\n\nThe TelemetryDiagnostics class uses a TelemetryClient to connect to a \nracing car that is currently whizzing around a track, via a modem. \nThe implementation given here doesn't actually do that, but for the \npurposes of this exercise, imagine it does.\n","TelemetryDiagnostics.java":"\npublic class TelemetryDiagnostics\n{\n    private final String DiagnosticChannelConnectionString = \"*111#\";\n    \n    private final TelemetryClient telemetryClient;\n    private String diagnosticInfo = \"\";\n\n        public TelemetryDiagnostics()\n        {\n            telemetryClient = new TelemetryClient();\n        }\n        \n        public String getDiagnosticInfo(){\n            return diagnosticInfo;\n        }\n        \n        public void setDiagnosticInfo(String diagnosticInfo){\n            this.diagnosticInfo = diagnosticInfo;\n        }\n \n        public void checkTransmission() throws Exception\n        {\n            diagnosticInfo = \"\";\n\n            telemetryClient.disconnect();\n    \n            int retryLeft = 3;\n            while (telemetryClient.getOnlineStatus() == false && retryLeft > 0)\n            {\n                telemetryClient.connect(DiagnosticChannelConnectionString);\n                retryLeft -= 1;\n            }\n             \n            if(telemetryClient.getOnlineStatus() == false)\n            {\n                throw new Exception(\"Unable to connect.\");\n            }\n    \n            telemetryClient.send(TelemetryClient.DIAGNOSTIC_MESSAGE);\n            diagnosticInfo = telemetryClient.receive();\n    }\n}\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E\nTime: 0.009\nThere was 1 failure:\n1) foo(TelemetryDiagnosticsTest)\norg.junit.ComparisonFailure: expected:<[fixme]> but was:<[]>\n\tat org.junit.Assert.assertEquals(Assert.java:124)\n\tat org.junit.Assert.assertEquals(Assert.java:146)\n\tat TelemetryDiagnosticsTest.foo(TelemetryDiagnosticsTest.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:616)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 1,  Failures: 1\n\n"}}