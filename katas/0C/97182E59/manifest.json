{"created":[2014,8,9,8,51,14],"id":"0C97182E59","language":"Java-1.8_JUnit","exercise":"Verbal","unit_test_framework":"junit","tab_size":4,"visible_files":{"Patient.java":"\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class Patient {\n\n    private Collection<Medicine> medicines = new ArrayList<Medicine>();\n    private String name;\n\n    public Patient(String name) {\n        this.name = name;\n    }\n\n    public void addMedicine(Medicine medicine) {\n\tthis.medicines.add(medicine);\n    }\n\n    public Collection<Date> clash(Collection<String> medicineNames) {\n        return clash(medicineNames, 90);\n    }\n\n    public Collection<Date> clash(Collection<String> medicineNames, int daysBack) {\n        // TODO: implement this method\n        return null;\n    }\n}\n","PatientTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.Date;\n\npublic class PatientTest {\n    \n    @Test\n    public void clash() {\n        Patient patient = new Patient(\"Bob\");\n        assertEquals(new ArrayList<Date>(), patient.clash(new ArrayList<String>()));\n    }\n}","cyber-dojo.sh":"javac -cp .:./junit-4.11.jar *.java \nif [ $? -eq 0 ]; then\n  java -cp .:./junit-4.11.jar org.junit.runner.JUnitCore `ls -1 *Test*.class | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E\nTime: 0.015\nThere was 1 failure:\n1) clash(PatientTest)\njava.lang.AssertionError: expected:<[]> but was:<null>\n\tat org.junit.Assert.fail(Assert.java:92)\n\tat org.junit.Assert.failNotEquals(Assert.java:646)\n\tat org.junit.Assert.assertEquals(Assert.java:127)\n\tat org.junit.Assert.assertEquals(Assert.java:146)\n\tat PatientTest.clash(PatientTest.java:12)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:616)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 1,  Failures: 1\n\n","instructions":"\n\nAs a Health Insurer,\n\nI want to be able to search for patients who have a medicine clash,\n\nSo that I can alert their doctors and get their prescriptions changed.\n\nSome medicines interact in unfortunate ways when they \nget into your body at the same time, and your doctor isn't always \nalert enough to spot the clash when writing your prescriptions. \n\nFor this Kata, you have a recently discovered medicine clash, \nand you want to look through a database of patient medicine \nand prescription records, to find if any need to be alerted \nto the problem. On the \"Patient\" class, implement the \"clash\" \nmethod. It should return a collection of days on which all the \n\"medicines\" given were being taken during the last \"days_back\" days.\n","Medicine.java":"import java.util.ArrayList;\nimport java.util.Collection;\n\npublic class Medicine {\n    \n    private Collection<Prescription> prescriptions = new ArrayList<Prescription>();\n    \n    private final String name;\n\n    public Medicine(String name) {\n        this.name = name;\n    }\n    \n    public void addPrescription(Prescription prescription) {\n        this.prescriptions.add(prescription);\n    }\n}","Prescription.java":"import java.util.Date;\n\npublic class Prescription {\n    \n    private Date dispenseDate = new Date();\n    private int daysSupply = 30;\n    \n    public Prescription(Date dispenseDate, int daysSupply) {\n        this.dispenseDate = dispenseDate;\n        this.daysSupply = daysSupply;\n    }\n\n}"}}