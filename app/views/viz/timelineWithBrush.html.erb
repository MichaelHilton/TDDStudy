<!DOCTYPE html>
<meta charset="utf-8">
<%= include_gon %>
<style>

.chart {
  background-color: #efefef;
}
.chart text {
  fill: black;
  font: 10px sans-serif;
  text-anchor: end;
}

.axis text {
  font: 11px sans-serif;
}

.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.grid-background {
  fill: #ddd;
}

.grid line,
.grid path {
  fill: none;
  stroke: #fff;
  shape-rendering: crispEdges;
}

.grid .minor.tick line {
  stroke-opacity: .5;
}

.brush .extent {
  stroke: #000;
  fill-opacity: .125;
  shape-rendering: crispEdges;
}

.axis text {
  font: 10px sans-serif;
}

.axis line,
.axis path {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}


</style>
<h1>Timeline With Brush</h1>

<body>
<BR>
<div id="viz"></div>
<svg class="chart"></svg>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var data = gon.compiles;
console.log(gon.compiles);

var phaseData = gon.phases[0];
console.log(phaseData);

var margin = {top: 20, right: 20, bottom: 30, left: 10},
  width = 530 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;

var  barHeight = 50,
  color = d3.scale.category20c();

var x = d3.scale.linear()
.domain([1, gon.compiles.length])
.range([1, width-40]);

var brush = d3.svg.brush()
.x(x)
.extent([3, 5])
.on("brushend", brushended);

var xAxis = d3.svg.axis()
.scale(x)
.orient("bottom");

var chart = d3.select(".chart")
.attr("width", width)
.attr("height", barHeight *3);

chart.selectAll("f")
.data(phaseData)
.enter().append("rect")
.attr("x" ,function(d, i) {
        return x(d.first_compile_in_phase);
})
.attr("y", 10)
.attr("width",function(d, i) {
        return x(Math.max(d.last_compile_in_phase - d.first_compile_in_phase,1)+1);
})
.attr("height", 10)
.attr("stroke", "grey")
.attr("fill", function(d) {
        if(d.tdd_color == "white"){return "gray";}
        else{return d.tdd_color;}})
          .attr("transform", "translate("+margin.left+",10)");

          var myLine = chart.append("svg:line")
          .attr("x1", margin.left)
          .attr("y1", 45)
          .attr("x2" ,function(d, i) {
                  return x(gon.compiles.length);
          })
          .attr("y2", 45)
          .style("stroke", "#737373");

          var bar = chart.selectAll("g")
          .data(data)
          .enter().append("g");



          bar.append("circle")
          .attr("cx",function(d, i) {
                  return x(d.git_tag);
          })
          .attr("r", 5)
          .attr("transform", "translate("+margin.left+",45)")
          .attr("stroke", function(d) {
                  return d.light_color;
          })
          .style("fill","rgba(60,179,113, 0)")
          .attr("stroke-width", 3);




          chart.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate("+margin.left+",60)")
          .call(xAxis)
          .selectAll("text")
          .attr("y", 6)
          .attr("height",10)
          // .attr("x", 6)
          .style("text-anchor", "start");


          var gBrush = chart.append("g")
          .attr("class", "brush")
          .call(brush)
          .call(brush.event);

          gBrush.selectAll("rect")
          .attr("height", 40)
          .attr("transform", "translate("+margin.left+",20)")
          ;



          function brushended() {

            if (!d3.event.sourceEvent) return; // only transition after input
              console.log("BRUSH_END")
              var extent0 = brush.extent();


              var extent1 = extent0;
              extent1[0] = Math.round(extent0[0]);
              extent1[1] = Math.round(extent0[1]);

              // console.log(extent0)
              console.log(extent1[0])
              console.log(extent1[1])

              d3.select(this).transition()
              .call(brush.extent(extent1))
              .call(brush.event);
              }


              </script>
